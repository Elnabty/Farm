
Farm_01062019_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000838  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e4  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036c  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c7  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:



int main(void)
{
    UART_int();
  7c:	0e 94 66 00 	call	0xcc	; 0xcc <UART_int>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	95 e3       	ldi	r25, 0x35	; 53
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x8>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0xe>
  8a:	00 00       	nop
	_delay_ms(5);
	sei();
  8c:	78 94       	sei
	unsigned char x=0;
    while (1) 
    {
		if( gUartRFlag == 1  )
  8e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gUartRFlag>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	89 f4       	brne	.+34     	; 0xb8 <main+0x3c>
		{
			UART_tx('E');
  96:	85 e4       	ldi	r24, 0x45	; 69
  98:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_tx>
			UART_tx('S');
  9c:	83 e5       	ldi	r24, 0x53	; 83
  9e:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_tx>
			UART_tx('S');
  a2:	83 e5       	ldi	r24, 0x53	; 83
  a4:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_tx>
			UART_tx('A');
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_tx>
			UART_tx('M');
  ae:	8d e4       	ldi	r24, 0x4D	; 77
  b0:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_tx>
			
			gUartRFlag=0;
  b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <gUartRFlag>
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	2f eb       	ldi	r18, 0xBF	; 191
  bc:	81 e2       	ldi	r24, 0x21	; 33
  be:	91 50       	subi	r25, 0x01	; 1
  c0:	20 40       	sbci	r18, 0x00	; 0
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x42>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x4c>
  c8:	00 00       	nop
  ca:	e1 cf       	rjmp	.-62     	; 0x8e <main+0x12>

000000cc <UART_int>:
extern unsigned char gUartRFlag;
extern unsigned char gUartData;
void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);   // enable Tx Rx and Rx interrupt
  cc:	88 e9       	ldi	r24, 0x98	; 152
  ce:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 bit data
  d0:	86 e8       	ldi	r24, 0x86	; 134
  d2:	80 bd       	out	0x20, r24	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	85 e2       	ldi	r24, 0x25	; 37
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <UART_int+0xa>
	_delay_us(10);
	UCSRC&=~(1<<URSEL);
  da:	80 b5       	in	r24, 0x20	; 32
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	80 bd       	out	0x20, r24	; 32
	UBRRH = (unsigned char)(UBRRset>>8);
  e0:	10 bc       	out	0x20, r1	; 32
	UBRRL= (unsigned char)(UBRRset);
  e2:	87 e4       	ldi	r24, 0x47	; 71
  e4:	89 b9       	out	0x09, r24	; 9
  e6:	08 95       	ret

000000e8 <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSRA & (1<<UDRE)));
  e8:	5d 9b       	sbis	0x0b, 5	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <UART_tx>
	UDR=x;
  ec:	8c b9       	out	0x0c, r24	; 12
  ee:	08 95       	ret

000000f0 <__vector_13>:
}

ISR(USART_RXC_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
	cli();
  fc:	f8 94       	cli
	
	gUartRFlag=1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gUartRFlag>
	gUartData=UDR;
 104:	8c b1       	in	r24, 0x0c	; 12
 106:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

	sei();
 10a:	78 94       	sei
	
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
