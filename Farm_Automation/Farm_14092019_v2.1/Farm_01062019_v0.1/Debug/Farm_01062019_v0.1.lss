
Farm_01062019_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000009b2  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800214  00800214  00000a5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c1f  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001063  00000000  00000000  00002793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af7  00000000  00000000  000037f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000042f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071d  00000000  00000000  00004478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c3  00000000  00000000  00004b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	a9 c2       	rjmp	.+1362   	; 0x598 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	d7 c2       	rjmp	.+1454   	; 0x614 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 eb       	ldi	r30, 0xB2	; 178
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 31       	cpi	r26, 0x18	; 24
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	dc d0       	rcall	.+440    	; 0x2d8 <main>
 120:	46 c4       	rjmp	.+2188   	; 0x9ae <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <dht_getdata_dht_11>:

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <dht_getdata_dht_11+0x14>
 138:	1f 92       	push	r1
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
 140:	fe 01       	movw	r30, r28
 142:	31 96       	adiw	r30, 0x01	; 1
 144:	25 e0       	ldi	r18, 0x05	; 5
 146:	df 01       	movw	r26, r30
 148:	1d 92       	st	X+, r1
 14a:	2a 95       	dec	r18
 14c:	e9 f7       	brne	.-6      	; 0x148 <dht_getdata_dht_11+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
 14e:	21 b1       	in	r18, 0x01	; 1
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	04 2e       	mov	r0, r20
 156:	02 c0       	rjmp	.+4      	; 0x15c <dht_getdata_dht_11+0x38>
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <dht_getdata_dht_11+0x34>
 160:	2e 2b       	or	r18, r30
 162:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //high
 164:	22 b1       	in	r18, 0x02	; 2
 166:	2e 2b       	or	r18, r30
 168:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	bf ef       	ldi	r27, 0xFF	; 255
 16c:	21 ee       	ldi	r18, 0xE1	; 225
 16e:	34 e0       	ldi	r19, 0x04	; 4
 170:	b1 50       	subi	r27, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <dht_getdata_dht_11+0x4c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <dht_getdata_dht_11+0x56>
 17a:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
 17c:	32 b1       	in	r19, 0x02	; 2
 17e:	2e 2f       	mov	r18, r30
 180:	20 95       	com	r18
 182:	32 23       	and	r19, r18
 184:	32 b9       	out	0x02, r19	; 2
 186:	5f ef       	ldi	r21, 0xFF	; 255
 188:	a0 ee       	ldi	r26, 0xE0	; 224
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	51 50       	subi	r21, 0x01	; 1
 18e:	a0 40       	sbci	r26, 0x00	; 0
 190:	b0 40       	sbci	r27, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <dht_getdata_dht_11+0x68>
 194:	00 c0       	rjmp	.+0      	; 0x196 <dht_getdata_dht_11+0x72>
 196:	00 00       	nop
	
		_delay_ms(18);
	
	
	
	DHT_PORT |= (1<<channel); //high
 198:	32 b1       	in	r19, 0x02	; 2
 19a:	3e 2b       	or	r19, r30
 19c:	32 b9       	out	0x02, r19	; 2
	DHT_DDR &= ~(1<<channel); //input
 19e:	31 b1       	in	r19, 0x01	; 1
 1a0:	23 23       	and	r18, r19
 1a2:	21 b9       	out	0x01, r18	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	25 ed       	ldi	r18, 0xD5	; 213
 1a6:	2a 95       	dec	r18
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <dht_getdata_dht_11+0x82>
 1aa:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
 1ac:	20 b1       	in	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	04 2e       	mov	r0, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <dht_getdata_dht_11+0x94>
 1b4:	35 95       	asr	r19
 1b6:	27 95       	ror	r18
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <dht_getdata_dht_11+0x90>
 1bc:	20 fd       	sbrc	r18, 0
 1be:	74 c0       	rjmp	.+232    	; 0x2a8 <dht_getdata_dht_11+0x184>
 1c0:	af e3       	ldi	r26, 0x3F	; 63
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	11 97       	sbiw	r26, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <dht_getdata_dht_11+0xa0>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <dht_getdata_dht_11+0xa6>
 1ca:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
 1cc:	20 b1       	in	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <dht_getdata_dht_11+0xb2>
 1d2:	35 95       	asr	r19
 1d4:	27 95       	ror	r18
 1d6:	4a 95       	dec	r20
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <dht_getdata_dht_11+0xae>
 1da:	20 ff       	sbrs	r18, 0
 1dc:	67 c0       	rjmp	.+206    	; 0x2ac <dht_getdata_dht_11+0x188>
 1de:	af e3       	ldi	r26, 0x3F	; 63
 1e0:	b1 e0       	ldi	r27, 0x01	; 1
 1e2:	11 97       	sbiw	r26, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <dht_getdata_dht_11+0xbe>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <dht_getdata_dht_11+0xc4>
 1e8:	00 00       	nop
 1ea:	9e 01       	movw	r18, r28
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	79 01       	movw	r14, r18
 1f2:	6e 01       	movw	r12, r28
 1f4:	36 e0       	ldi	r19, 0x06	; 6
 1f6:	c3 0e       	add	r12, r19
 1f8:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
 1fa:	01 e0       	ldi	r16, 0x01	; 1
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	31 c0       	rjmp	.+98     	; 0x262 <dht_getdata_dht_11+0x13e>
 200:	41 50       	subi	r20, 0x01	; 1
 202:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 204:	19 f4       	brne	.+6      	; 0x20c <dht_getdata_dht_11+0xe8>
 206:	54 c0       	rjmp	.+168    	; 0x2b0 <dht_getdata_dht_11+0x18c>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 208:	49 ec       	ldi	r20, 0xC9	; 201
 20a:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
 20c:	20 b1       	in	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2e 23       	and	r18, r30
 212:	3f 23       	and	r19, r31
 214:	23 2b       	or	r18, r19
 216:	a1 f3       	breq	.-24     	; 0x200 <dht_getdata_dht_11+0xdc>
 218:	40 ea       	ldi	r20, 0xA0	; 160
 21a:	4a 95       	dec	r20
 21c:	f1 f7       	brne	.-4      	; 0x21a <dht_getdata_dht_11+0xf6>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
 21e:	20 b1       	in	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	2e 23       	and	r18, r30
 224:	3f 23       	and	r19, r31
 226:	23 2b       	or	r18, r19
 228:	41 f0       	breq	.+16     	; 0x23a <dht_getdata_dht_11+0x116>
				result |= (1<<(7-i));
 22a:	98 01       	movw	r18, r16
 22c:	0a 2e       	mov	r0, r26
 22e:	02 c0       	rjmp	.+4      	; 0x234 <dht_getdata_dht_11+0x110>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <dht_getdata_dht_11+0x10c>
 238:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
 23a:	49 ec       	ldi	r20, 0xC9	; 201
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	03 c0       	rjmp	.+6      	; 0x246 <dht_getdata_dht_11+0x122>
 240:	41 50       	subi	r20, 0x01	; 1
 242:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 244:	b9 f1       	breq	.+110    	; 0x2b4 <dht_getdata_dht_11+0x190>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
 246:	20 b1       	in	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	2e 23       	and	r18, r30
 24c:	3f 23       	and	r19, r31
 24e:	23 2b       	or	r18, r19
 250:	b9 f7       	brne	.-18     	; 0x240 <dht_getdata_dht_11+0x11c>
 252:	11 97       	sbiw	r26, 0x01	; 1
 254:	c8 f6       	brcc	.-78     	; 0x208 <dht_getdata_dht_11+0xe4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
 256:	d7 01       	movw	r26, r14
 258:	bd 92       	st	X+, r11
 25a:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
 25c:	ca 16       	cp	r12, r26
 25e:	db 06       	cpc	r13, r27
 260:	21 f0       	breq	.+8      	; 0x26a <dht_getdata_dht_11+0x146>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 262:	a7 e0       	ldi	r26, 0x07	; 7
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	b1 2c       	mov	r11, r1
 268:	cf cf       	rjmp	.-98     	; 0x208 <dht_getdata_dht_11+0xe4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
 26a:	21 b1       	in	r18, 0x01	; 1
 26c:	2e 2b       	or	r18, r30
 26e:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //low
 270:	22 b1       	in	r18, 0x02	; 2
 272:	e2 2b       	or	r30, r18
 274:	e2 b9       	out	0x02, r30	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	bf ef       	ldi	r27, 0xFF	; 255
 278:	e1 ee       	ldi	r30, 0xE1	; 225
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	b1 50       	subi	r27, 0x01	; 1
 27e:	e0 40       	sbci	r30, 0x00	; 0
 280:	f0 40       	sbci	r31, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <dht_getdata_dht_11+0x158>
 284:	00 c0       	rjmp	.+0      	; 0x286 <dht_getdata_dht_11+0x162>
 286:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
 288:	49 81       	ldd	r20, Y+1	; 0x01
 28a:	5b 81       	ldd	r21, Y+3	; 0x03
 28c:	2a 81       	ldd	r18, Y+2	; 0x02
 28e:	24 0f       	add	r18, r20
 290:	25 0f       	add	r18, r21
 292:	3c 81       	ldd	r19, Y+4	; 0x04
 294:	23 0f       	add	r18, r19
 296:	3d 81       	ldd	r19, Y+5	; 0x05
 298:	23 13       	cpse	r18, r19
 29a:	0e c0       	rjmp	.+28     	; 0x2b8 <dht_getdata_dht_11+0x194>
		//return temperature and humidity
		
			*temperature = bits[2];
 29c:	dc 01       	movw	r26, r24
 29e:	5c 93       	st	X, r21
			*humidity = bits[0];
 2a0:	fb 01       	movw	r30, r22
 2a2:	40 83       	st	Z, r20
		



		
		return 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <dht_getdata_dht_11+0x196>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <dht_getdata_dht_11+0x196>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <dht_getdata_dht_11+0x196>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <dht_getdata_dht_11+0x196>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <dht_getdata_dht_11+0x196>

		
		return 0;
	}

	return -1;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	bf 90       	pop	r11
 2d6:	08 95       	ret

000002d8 <main>:
volatile unsigned char gUartRFlag=0;
volatile unsigned char gUartData=0;
extern volatile unsigned char oneSec;
uint8_t manualflag = 0;
int main(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	69 97       	sbiw	r28, 0x19	; 25
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
	DDRB_CONFIG;
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	84 b9       	out	0x04, r24	; 4
	PORTB_COMFIG;
 2f0:	15 b8       	out	0x05, r1	; 5
	DDRC_CONFIG;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	87 b9       	out	0x07, r24	; 7
	PORTC_COMFIG;
 2f6:	18 b8       	out	0x08, r1	; 8
	timer1_init();
 2f8:	3e d1       	rcall	.+636    	; 0x576 <timer1_init>
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
	
	
     UART_int();
 2fa:	5f d1       	rcall	.+702    	; 0x5ba <UART_int>
 2fc:	8f e1       	ldi	r24, 0x1F	; 31
 2fe:	9e e4       	ldi	r25, 0x4E	; 78
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <main+0x28>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x2e>
 306:	00 00       	nop
 308:	19 82       	std	Y+1, r1	; 0x01
	_delay_ms(5);
	

		float ftemperature = 0;
		float fhumidity = 0;
		int8_t temperature = 0;
 30a:	1a 82       	std	Y+2, r1	; 0x02
		int8_t humidity = 0;
 30c:	86 e0       	ldi	r24, 0x06	; 6
		
	unsigned char tempString[] = {'T','e','m','p',':','\0'};
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	f2 e0       	ldi	r31, 0x02	; 2
 312:	de 01       	movw	r26, r28
 314:	13 96       	adiw	r26, 0x03	; 3
 316:	01 90       	ld	r0, Z+
 318:	0d 92       	st	X+, r0
 31a:	8a 95       	dec	r24
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0x3e>
 31e:	86 e0       	ldi	r24, 0x06	; 6
	unsigned char humString[] =  {'H','u','m','d',':','\0'};
 320:	e6 e0       	ldi	r30, 0x06	; 6
 322:	f2 e0       	ldi	r31, 0x02	; 2
 324:	de 01       	movw	r26, r28
 326:	19 96       	adiw	r26, 0x09	; 9
 328:	01 90       	ld	r0, Z+
 32a:	0d 92       	st	X+, r0
 32c:	8a 95       	dec	r24
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x50>
 330:	88 e0       	ldi	r24, 0x08	; 8
	unsigned char sensor0[] = {'S','e','n','s','o','r','1','\0'};
	unsigned char sensor1[] = {'S','e','n','s','o','r','2','\0'};			
 332:	ec e0       	ldi	r30, 0x0C	; 12
 334:	f2 e0       	ldi	r31, 0x02	; 2
 336:	de 01       	movw	r26, r28
 338:	1f 96       	adiw	r26, 0x0f	; 15
 33a:	01 90       	ld	r0, Z+
 33c:	0d 92       	st	X+, r0
 33e:	8a 95       	dec	r24
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x62>
 342:	f8 94       	cli
	unsigned char buffer[3]; //used in itoa 

	//sei();
	cli();
 344:	15 b8       	out	0x05, r1	; 5
	PORTB = 0u;
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	23 ed       	ldi	r18, 0xD3	; 211
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x74>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x7e>
 356:	00 00       	nop
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	23 ed       	ldi	r18, 0xD3	; 211
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	91 50       	subi	r25, 0x01	; 1
 360:	20 40       	sbci	r18, 0x00	; 0
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0x86>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x90>
 368:	00 00       	nop
 36a:	9f ef       	ldi	r25, 0xFF	; 255
 36c:	23 ed       	ldi	r18, 0xD3	; 211
 36e:	80 e3       	ldi	r24, 0x30	; 48
 370:	91 50       	subi	r25, 0x01	; 1
 372:	20 40       	sbci	r18, 0x00	; 0
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x98>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0xa2>
 37a:	00 00       	nop
 37c:	9f ef       	ldi	r25, 0xFF	; 255
 37e:	23 ed       	ldi	r18, 0xD3	; 211
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	91 50       	subi	r25, 0x01	; 1
 384:	20 40       	sbci	r18, 0x00	; 0
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0xaa>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0xb4>
 38c:	00 00       	nop
 38e:	9f ef       	ldi	r25, 0xFF	; 255
 390:	23 ed       	ldi	r18, 0xD3	; 211
 392:	80 e3       	ldi	r24, 0x30	; 48
 394:	91 50       	subi	r25, 0x01	; 1
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0xbc>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0xc6>
 39e:	00 00       	nop
 3a0:	f0 90 17 02 	lds	r15, 0x0217	; 0x800217 <oneSec>
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	oldTime = oneSec;
 3a4:	78 94       	sei
	sei();
 3a6:	00 e0       	ldi	r16, 0x00	; 0
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
 3a8:	10 e0       	ldi	r17, 0x00	; 0
	PORTB_COMFIG;
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
 3aa:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <oneSec>
	oldTime = oneSec;
	sei();
	while(1){
			
		
		if(oneSec != oldTime)
 3ae:	f8 16       	cp	r15, r24
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <main+0xdc>
 3b2:	8b c0       	rjmp	.+278    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 3b4:	f0 90 17 02 	lds	r15, 0x0217	; 0x800217 <oneSec>
		{
			oldTime = oneSec;
 3b8:	15 30       	cpi	r17, 0x05	; 5
			
			if(five_sec == 5u)
 3ba:	09 f0       	breq	.+2      	; 0x3be <main+0xe6>
 3bc:	41 c0       	rjmp	.+130    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3be:	f8 94       	cli
			{		
					cli();
 3c0:	41 e0       	ldi	r20, 0x01	; 1
					dtostrf(fhumidity, 3, 3, buffer);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');*/
					
					dht_getdata_dht_11(&temperature,&humidity,1);
 3c2:	be 01       	movw	r22, r28
 3c4:	6e 5f       	subi	r22, 0xFE	; 254
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	ab de       	rcall	.-682    	; 0x124 <dht_getdata_dht_11>
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d0:	4a e0       	ldi	r20, 0x0A	; 10
 3d2:	be 01       	movw	r22, r28
 3d4:	69 5e       	subi	r22, 0xE9	; 233
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	08 2e       	mov	r0, r24
 3da:	00 0c       	add	r0, r0
 3dc:	99 0b       	sbc	r25, r25
 3de:	b4 d2       	rcall	.+1384   	; 0x948 <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_tx('[');
 3e0:	8b e5       	ldi	r24, 0x5B	; 91
 3e2:	fb d0       	rcall	.+502    	; 0x5da <UART_tx>
					UART_string_tx(sensor1);
 3e4:	ce 01       	movw	r24, r28
 3e6:	0f 96       	adiw	r24, 0x0f	; 15
 3e8:	00 d1       	rcall	.+512    	; 0x5ea <UART_string_tx>
					UART_string_tx(tempString);
 3ea:	ce 01       	movw	r24, r28
 3ec:	03 96       	adiw	r24, 0x03	; 3
 3ee:	fd d0       	rcall	.+506    	; 0x5ea <UART_string_tx>
					UART_string_tx(buffer);
 3f0:	ce 01       	movw	r24, r28
 3f2:	47 96       	adiw	r24, 0x17	; 23
 3f4:	fa d0       	rcall	.+500    	; 0x5ea <UART_string_tx>
 3f6:	8d e5       	ldi	r24, 0x5D	; 93
					UART_tx(']');
 3f8:	f0 d0       	rcall	.+480    	; 0x5da <UART_tx>
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	ee d0       	rcall	.+476    	; 0x5da <UART_tx>
					UART_tx('\n');
 3fe:	8f e3       	ldi	r24, 0x3F	; 63
 400:	9c e9       	ldi	r25, 0x9C	; 156
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	4a e0       	ldi	r20, 0x0A	; 10
 40e:	be 01       	movw	r22, r28
 410:	69 5e       	subi	r22, 0xE9	; 233
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	08 2e       	mov	r0, r24
 416:	00 0c       	add	r0, r0
 418:	99 0b       	sbc	r25, r25
 41a:	96 d2       	rcall	.+1324   	; 0x948 <__itoa_ncheck>
					_delay_ms(10);
					itoa(humidity, buffer, 10);
					UART_tx('[');
 41c:	8b e5       	ldi	r24, 0x5B	; 91
 41e:	dd d0       	rcall	.+442    	; 0x5da <UART_tx>
					UART_string_tx(sensor1);
 420:	ce 01       	movw	r24, r28
 422:	0f 96       	adiw	r24, 0x0f	; 15
 424:	e2 d0       	rcall	.+452    	; 0x5ea <UART_string_tx>
					UART_string_tx(humString);
 426:	ce 01       	movw	r24, r28
 428:	09 96       	adiw	r24, 0x09	; 9
 42a:	df d0       	rcall	.+446    	; 0x5ea <UART_string_tx>
 42c:	ce 01       	movw	r24, r28
					UART_string_tx(buffer);
 42e:	47 96       	adiw	r24, 0x17	; 23
 430:	dc d0       	rcall	.+440    	; 0x5ea <UART_string_tx>
 432:	8d e5       	ldi	r24, 0x5D	; 93
 434:	d2 d0       	rcall	.+420    	; 0x5da <UART_tx>
					UART_tx(']');
 436:	8a e0       	ldi	r24, 0x0A	; 10
 438:	d0 d0       	rcall	.+416    	; 0x5da <UART_tx>
 43a:	78 94       	sei
					UART_tx('\n');
 43c:	10 e0       	ldi	r17, 0x00	; 0
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
					
					five_sec = 0u;	
					sei();
 440:	1f 5f       	subi	r17, 0xFF	; 255
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx(']');
					UART_tx('\n');
					
					five_sec = 0u;	
 442:	03 30       	cpi	r16, 0x03	; 3
 444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
					sei();
					
			}
			else
			{
				five_sec++;
 446:	3f c0       	rjmp	.+126    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			}

			if(sec_3 == 3u)
 448:	f8 94       	cli
 44a:	41 e0       	ldi	r20, 0x01	; 1
			{
	cli();
 44c:	be 01       	movw	r22, r28

	if (  /*dht_getdata_dht_22(&ftemperature,&fhumidity,0)!=-1  &&*/ dht_getdata_dht_11(&temperature,&humidity,1) == 0 )
 44e:	6e 5f       	subi	r22, 0xFE	; 254
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	66 de       	rcall	.-820    	; 0x124 <dht_getdata_dht_11>
 458:	81 11       	cpse	r24, r1
 45a:	30 c0       	rjmp	.+96     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 45c:	69 81       	ldd	r22, Y+1	; 0x01
		int8_t temp_avr;
		int8_t humd_avr;
		temp_avr = ( (ftemperature+temperature)/2 );
		humd_avr = ((fhumidity+humidity)/2);
		
		if(temp_avr > 30 || humd_avr > 67)
 45e:	06 2e       	mov	r0, r22
 460:	00 0c       	add	r0, r0
 462:	77 0b       	sbc	r23, r23
 464:	88 0b       	sbc	r24, r24
 466:	99 0b       	sbc	r25, r25
 468:	80 d1       	rcall	.+768    	; 0x76a <__floatsisf>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	a9 01       	movw	r20, r18
 470:	e5 d0       	rcall	.+458    	; 0x63c <__addsf3>
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	5f e3       	ldi	r21, 0x3F	; 63
 47a:	03 d2       	rcall	.+1030   	; 0x882 <__mulsf3>
 47c:	43 d1       	rcall	.+646    	; 0x704 <__fixsfsi>
 47e:	6f 31       	cpi	r22, 0x1F	; 31
 480:	9c f4       	brge	.+38     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 482:	6a 81       	ldd	r22, Y+2	; 0x02
 484:	06 2e       	mov	r0, r22
 486:	00 0c       	add	r0, r0
 488:	77 0b       	sbc	r23, r23
 48a:	88 0b       	sbc	r24, r24
 48c:	99 0b       	sbc	r25, r25
 48e:	6d d1       	rcall	.+730    	; 0x76a <__floatsisf>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	a9 01       	movw	r20, r18
 496:	d2 d0       	rcall	.+420    	; 0x63c <__addsf3>
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	5f e3       	ldi	r21, 0x3F	; 63
 4a0:	f0 d1       	rcall	.+992    	; 0x882 <__mulsf3>
 4a2:	30 d1       	rcall	.+608    	; 0x704 <__fixsfsi>
 4a4:	64 34       	cpi	r22, 0x44	; 68
 4a6:	1c f0       	brlt	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a8:	29 98       	cbi	0x05, 1	; 5
 4aa:	2c 98       	cbi	0x05, 4	; 5
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4ae:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
		{
			VENTILATION_ON;
			FAN_ON;
 4b2:	81 11       	cpse	r24, r1
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		}
		
		else if (manualflag == 0)
 4b6:	29 9a       	sbi	0x05, 1	; 5
 4b8:	2c 9a       	sbi	0x05, 4	; 5
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4bc:	2c 98       	cbi	0x05, 4	; 5
		{
			VENTILATION_OFF;
 4be:	29 98       	cbi	0x05, 1	; 5
			FAN_OFF;
 4c0:	78 94       	sei
 4c2:	00 e0       	ldi	r16, 0x00	; 0
		
	}
	else
	{
		//UART_string_tx("FATAL ERROR!");
		FAN_ON;
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		VENTILATION_ON;
 4c6:	0f 5f       	subi	r16, 0xFF	; 255
	}
	sec_3=0u;
	sei();
 4c8:	01 c0       	rjmp	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	{
		//UART_string_tx("FATAL ERROR!");
		FAN_ON;
		VENTILATION_ON;
	}
	sec_3=0u;
 4ca:	f8 2e       	mov	r15, r24
 4cc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <gUartRFlag>

	

}

else{sec_3++;}
 4d0:	81 30       	cpi	r24, 0x01	; 1

			
		}
		
		
		if( gUartRFlag == 1 )
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d4:	6a cf       	rjmp	.-300    	; 0x3aa <main+0xd2>
 4d6:	f8 94       	cli
 4d8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <gUartData>
		{
				cli();//cretical section 
 4dc:	7e d0       	rcall	.+252    	; 0x5da <UART_tx>
				UART_tx(gUartData);
 4de:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <gUartData>
 4e2:	82 33       	cpi	r24, 0x32	; 50
				//relayModuleControl( gUartData);
				
			switch (gUartData)
 4e4:	79 f1       	breq	.+94     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 4e6:	83 33       	cpi	r24, 0x33	; 51
 4e8:	91 f1       	breq	.+100    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 4ea:	81 33       	cpi	r24, 0x31	; 49
 4ec:	a1 f5       	brne	.+104    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 4ee:	41 e0       	ldi	r20, 0x01	; 1
					UART_string_tx(buffer);
					dtostrf(fhumidity, 3, 3, buffer);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');*/
					dht_getdata_dht_11(&temperature,&humidity,1);
 4f0:	be 01       	movw	r22, r28
 4f2:	6e 5f       	subi	r22, 0xFE	; 254
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	14 de       	rcall	.-984    	; 0x124 <dht_getdata_dht_11>
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	4a e0       	ldi	r20, 0x0A	; 10
 500:	be 01       	movw	r22, r28
 502:	69 5e       	subi	r22, 0xE9	; 233
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	08 2e       	mov	r0, r24
 508:	00 0c       	add	r0, r0
 50a:	99 0b       	sbc	r25, r25
					itoa(temperature,buffer,10);
					UART_string_tx(sensor1);
 50c:	1d d2       	rcall	.+1082   	; 0x948 <__itoa_ncheck>
 50e:	ce 01       	movw	r24, r28
 510:	0f 96       	adiw	r24, 0x0f	; 15
 512:	6b d0       	rcall	.+214    	; 0x5ea <UART_string_tx>
					UART_string_tx(tempString);
 514:	ce 01       	movw	r24, r28
 516:	03 96       	adiw	r24, 0x03	; 3
 518:	68 d0       	rcall	.+208    	; 0x5ea <UART_string_tx>
 51a:	ce 01       	movw	r24, r28
					UART_string_tx(buffer);
 51c:	47 96       	adiw	r24, 0x17	; 23
 51e:	65 d0       	rcall	.+202    	; 0x5ea <UART_string_tx>
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	4a e0       	ldi	r20, 0x0A	; 10
 524:	be 01       	movw	r22, r28
 526:	69 5e       	subi	r22, 0xE9	; 233
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	08 2e       	mov	r0, r24
 52c:	00 0c       	add	r0, r0
 52e:	99 0b       	sbc	r25, r25
 530:	0b d2       	rcall	.+1046   	; 0x948 <__itoa_ncheck>
 532:	ce 01       	movw	r24, r28
 534:	09 96       	adiw	r24, 0x09	; 9
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
 536:	59 d0       	rcall	.+178    	; 0x5ea <UART_string_tx>
 538:	ce 01       	movw	r24, r28
 53a:	47 96       	adiw	r24, 0x17	; 23
 53c:	56 d0       	rcall	.+172    	; 0x5ea <UART_string_tx>
					UART_string_tx(buffer);
 53e:	8a e0       	ldi	r24, 0x0A	; 10
 540:	4c d0       	rcall	.+152    	; 0x5da <UART_tx>
 542:	0c c0       	rjmp	.+24     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 544:	2c 98       	cbi	0x05, 4	; 5
					UART_tx('\n');		
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			
			break;
 54c:	07 c0       	rjmp	.+14     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
			
			case '2': FAN_ON;manualflag=1; break;
 54e:	2c 9a       	sbi	0x05, 4	; 5
 550:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
 554:	03 c0       	rjmp	.+6      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 556:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <gUartData>
			case '3': FAN_OFF;manualflag=0;break;
 55a:	3f d0       	rcall	.+126    	; 0x5da <UART_tx>
 55c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <gUartRFlag>
			
			default:UART_tx(gUartData);//UART_string_tx("wrong request");
 560:	9f ef       	ldi	r25, 0xFF	; 255
 562:	23 ed       	ldi	r18, 0xD3	; 211
 564:	80 e3       	ldi	r24, 0x30	; 48
 566:	91 50       	subi	r25, 0x01	; 1
			}
			
	
			
			gUartRFlag=0;
 568:	20 40       	sbci	r18, 0x00	; 0
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 570:	00 00       	nop
 572:	78 94       	sei
 574:	1a cf       	rjmp	.-460    	; 0x3aa <main+0xd2>

00000576 <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
 576:	e1 e8       	ldi	r30, 0x81	; 129
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8d 60       	ori	r24, 0x0D	; 13
 57e:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
 580:	ef e6       	ldi	r30, 0x6F	; 111
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	83 60       	ori	r24, 0x03	; 3
 588:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
 58a:	8d e3       	ldi	r24, 0x3D	; 61
 58c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
 590:	89 e0       	ldi	r24, 0x09	; 9
 592:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 596:	08 95       	ret

00000598 <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	8f 93       	push	r24
	
	
	oneSec ++;
 5a4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <oneSec>
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <oneSec>
	
	
 5ae:	8f 91       	pop	r24
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <UART_int>:
extern volatile unsigned char gUartRFlag;
extern volatile unsigned char gUartData;
void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);   // enable Tx Rx and Rx interrupt
 5ba:	88 e9       	ldi	r24, 0x98	; 152
 5bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00); // 8 bit data
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c6:	85 e3       	ldi	r24, 0x35	; 53
 5c8:	8a 95       	dec	r24
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <UART_int+0xe>
 5cc:	00 00       	nop
	_delay_us(10);
	UBRR0H = (unsigned char)(UBRRset>>8);
 5ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L= (unsigned char)(UBRRset);
 5d2:	87 e6       	ldi	r24, 0x67	; 103
 5d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 5d8:	08 95       	ret

000005da <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSR0A & (1<<UDRE0)));
 5da:	e0 ec       	ldi	r30, 0xC0	; 192
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	90 81       	ld	r25, Z
 5e0:	95 ff       	sbrs	r25, 5
 5e2:	fd cf       	rjmp	.-6      	; 0x5de <UART_tx+0x4>
	UDR0=x;
 5e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 5e8:	08 95       	ret

000005ea <UART_string_tx>:
}

void UART_string_tx(unsigned char *x)
{
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(x[i] !='\0')
 5f2:	80 81       	ld	r24, Z
 5f4:	88 23       	and	r24, r24
 5f6:	51 f0       	breq	.+20     	; 0x60c <UART_string_tx+0x22>
 5f8:	8f 01       	movw	r16, r30
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_tx( x[i] );
 5fc:	ee df       	rcall	.-36     	; 0x5da <UART_tx>
		i++;
 5fe:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_string_tx(unsigned char *x)
{
	unsigned char i=0;
	while(x[i] !='\0')
 600:	f8 01       	movw	r30, r16
 602:	ec 0f       	add	r30, r28
 604:	f1 1d       	adc	r31, r1
 606:	80 81       	ld	r24, Z
 608:	81 11       	cpse	r24, r1
 60a:	f8 cf       	rjmp	.-16     	; 0x5fc <UART_string_tx+0x12>
	{
		UART_tx( x[i] );
		i++;
	}
}
 60c:	cf 91       	pop	r28
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	08 95       	ret

00000614 <__vector_25>:

ISR(USART0_RX_vect)
{
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	8f 93       	push	r24
	//cli();
	
	
	gUartData = UDR0;
 620:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 624:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <gUartData>
	gUartRFlag=1;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <gUartRFlag>
	
	

	//sei();
	
 62e:	8f 91       	pop	r24
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <__subsf3>:
 63a:	50 58       	subi	r21, 0x80	; 128

0000063c <__addsf3>:
 63c:	bb 27       	eor	r27, r27
 63e:	aa 27       	eor	r26, r26
 640:	0e d0       	rcall	.+28     	; 0x65e <__addsf3x>
 642:	e5 c0       	rjmp	.+458    	; 0x80e <__fp_round>
 644:	d6 d0       	rcall	.+428    	; 0x7f2 <__fp_pscA>
 646:	30 f0       	brcs	.+12     	; 0x654 <__addsf3+0x18>
 648:	db d0       	rcall	.+438    	; 0x800 <__fp_pscB>
 64a:	20 f0       	brcs	.+8      	; 0x654 <__addsf3+0x18>
 64c:	31 f4       	brne	.+12     	; 0x65a <__addsf3+0x1e>
 64e:	9f 3f       	cpi	r25, 0xFF	; 255
 650:	11 f4       	brne	.+4      	; 0x656 <__addsf3+0x1a>
 652:	1e f4       	brtc	.+6      	; 0x65a <__addsf3+0x1e>
 654:	cb c0       	rjmp	.+406    	; 0x7ec <__fp_nan>
 656:	0e f4       	brtc	.+2      	; 0x65a <__addsf3+0x1e>
 658:	e0 95       	com	r30
 65a:	e7 fb       	bst	r30, 7
 65c:	c1 c0       	rjmp	.+386    	; 0x7e0 <__fp_inf>

0000065e <__addsf3x>:
 65e:	e9 2f       	mov	r30, r25
 660:	e7 d0       	rcall	.+462    	; 0x830 <__fp_split3>
 662:	80 f3       	brcs	.-32     	; 0x644 <__addsf3+0x8>
 664:	ba 17       	cp	r27, r26
 666:	62 07       	cpc	r22, r18
 668:	73 07       	cpc	r23, r19
 66a:	84 07       	cpc	r24, r20
 66c:	95 07       	cpc	r25, r21
 66e:	18 f0       	brcs	.+6      	; 0x676 <__addsf3x+0x18>
 670:	71 f4       	brne	.+28     	; 0x68e <__addsf3x+0x30>
 672:	9e f5       	brtc	.+102    	; 0x6da <__addsf3x+0x7c>
 674:	ff c0       	rjmp	.+510    	; 0x874 <__fp_zero>
 676:	0e f4       	brtc	.+2      	; 0x67a <__addsf3x+0x1c>
 678:	e0 95       	com	r30
 67a:	0b 2e       	mov	r0, r27
 67c:	ba 2f       	mov	r27, r26
 67e:	a0 2d       	mov	r26, r0
 680:	0b 01       	movw	r0, r22
 682:	b9 01       	movw	r22, r18
 684:	90 01       	movw	r18, r0
 686:	0c 01       	movw	r0, r24
 688:	ca 01       	movw	r24, r20
 68a:	a0 01       	movw	r20, r0
 68c:	11 24       	eor	r1, r1
 68e:	ff 27       	eor	r31, r31
 690:	59 1b       	sub	r21, r25
 692:	99 f0       	breq	.+38     	; 0x6ba <__addsf3x+0x5c>
 694:	59 3f       	cpi	r21, 0xF9	; 249
 696:	50 f4       	brcc	.+20     	; 0x6ac <__addsf3x+0x4e>
 698:	50 3e       	cpi	r21, 0xE0	; 224
 69a:	68 f1       	brcs	.+90     	; 0x6f6 <__addsf3x+0x98>
 69c:	1a 16       	cp	r1, r26
 69e:	f0 40       	sbci	r31, 0x00	; 0
 6a0:	a2 2f       	mov	r26, r18
 6a2:	23 2f       	mov	r18, r19
 6a4:	34 2f       	mov	r19, r20
 6a6:	44 27       	eor	r20, r20
 6a8:	58 5f       	subi	r21, 0xF8	; 248
 6aa:	f3 cf       	rjmp	.-26     	; 0x692 <__addsf3x+0x34>
 6ac:	46 95       	lsr	r20
 6ae:	37 95       	ror	r19
 6b0:	27 95       	ror	r18
 6b2:	a7 95       	ror	r26
 6b4:	f0 40       	sbci	r31, 0x00	; 0
 6b6:	53 95       	inc	r21
 6b8:	c9 f7       	brne	.-14     	; 0x6ac <__addsf3x+0x4e>
 6ba:	7e f4       	brtc	.+30     	; 0x6da <__addsf3x+0x7c>
 6bc:	1f 16       	cp	r1, r31
 6be:	ba 0b       	sbc	r27, r26
 6c0:	62 0b       	sbc	r22, r18
 6c2:	73 0b       	sbc	r23, r19
 6c4:	84 0b       	sbc	r24, r20
 6c6:	ba f0       	brmi	.+46     	; 0x6f6 <__addsf3x+0x98>
 6c8:	91 50       	subi	r25, 0x01	; 1
 6ca:	a1 f0       	breq	.+40     	; 0x6f4 <__addsf3x+0x96>
 6cc:	ff 0f       	add	r31, r31
 6ce:	bb 1f       	adc	r27, r27
 6d0:	66 1f       	adc	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	c2 f7       	brpl	.-16     	; 0x6c8 <__addsf3x+0x6a>
 6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <__addsf3x+0x98>
 6da:	ba 0f       	add	r27, r26
 6dc:	62 1f       	adc	r22, r18
 6de:	73 1f       	adc	r23, r19
 6e0:	84 1f       	adc	r24, r20
 6e2:	48 f4       	brcc	.+18     	; 0x6f6 <__addsf3x+0x98>
 6e4:	87 95       	ror	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f7 95       	ror	r31
 6ee:	9e 3f       	cpi	r25, 0xFE	; 254
 6f0:	08 f0       	brcs	.+2      	; 0x6f4 <__addsf3x+0x96>
 6f2:	b3 cf       	rjmp	.-154    	; 0x65a <__addsf3+0x1e>
 6f4:	93 95       	inc	r25
 6f6:	88 0f       	add	r24, r24
 6f8:	08 f0       	brcs	.+2      	; 0x6fc <__addsf3x+0x9e>
 6fa:	99 27       	eor	r25, r25
 6fc:	ee 0f       	add	r30, r30
 6fe:	97 95       	ror	r25
 700:	87 95       	ror	r24
 702:	08 95       	ret

00000704 <__fixsfsi>:
 704:	04 d0       	rcall	.+8      	; 0x70e <__fixunssfsi>
 706:	68 94       	set
 708:	b1 11       	cpse	r27, r1
 70a:	b5 c0       	rjmp	.+362    	; 0x876 <__fp_szero>
 70c:	08 95       	ret

0000070e <__fixunssfsi>:
 70e:	98 d0       	rcall	.+304    	; 0x840 <__fp_splitA>
 710:	88 f0       	brcs	.+34     	; 0x734 <__fixunssfsi+0x26>
 712:	9f 57       	subi	r25, 0x7F	; 127
 714:	90 f0       	brcs	.+36     	; 0x73a <__fixunssfsi+0x2c>
 716:	b9 2f       	mov	r27, r25
 718:	99 27       	eor	r25, r25
 71a:	b7 51       	subi	r27, 0x17	; 23
 71c:	a0 f0       	brcs	.+40     	; 0x746 <__fixunssfsi+0x38>
 71e:	d1 f0       	breq	.+52     	; 0x754 <__fixunssfsi+0x46>
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	1a f0       	brmi	.+6      	; 0x730 <__fixunssfsi+0x22>
 72a:	ba 95       	dec	r27
 72c:	c9 f7       	brne	.-14     	; 0x720 <__fixunssfsi+0x12>
 72e:	12 c0       	rjmp	.+36     	; 0x754 <__fixunssfsi+0x46>
 730:	b1 30       	cpi	r27, 0x01	; 1
 732:	81 f0       	breq	.+32     	; 0x754 <__fixunssfsi+0x46>
 734:	9f d0       	rcall	.+318    	; 0x874 <__fp_zero>
 736:	b1 e0       	ldi	r27, 0x01	; 1
 738:	08 95       	ret
 73a:	9c c0       	rjmp	.+312    	; 0x874 <__fp_zero>
 73c:	67 2f       	mov	r22, r23
 73e:	78 2f       	mov	r23, r24
 740:	88 27       	eor	r24, r24
 742:	b8 5f       	subi	r27, 0xF8	; 248
 744:	39 f0       	breq	.+14     	; 0x754 <__fixunssfsi+0x46>
 746:	b9 3f       	cpi	r27, 0xF9	; 249
 748:	cc f3       	brlt	.-14     	; 0x73c <__fixunssfsi+0x2e>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b3 95       	inc	r27
 752:	d9 f7       	brne	.-10     	; 0x74a <__fixunssfsi+0x3c>
 754:	3e f4       	brtc	.+14     	; 0x764 <__fixunssfsi+0x56>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__floatunsisf>:
 766:	e8 94       	clt
 768:	09 c0       	rjmp	.+18     	; 0x77c <__floatsisf+0x12>

0000076a <__floatsisf>:
 76a:	97 fb       	bst	r25, 7
 76c:	3e f4       	brtc	.+14     	; 0x77c <__floatsisf+0x12>
 76e:	90 95       	com	r25
 770:	80 95       	com	r24
 772:	70 95       	com	r23
 774:	61 95       	neg	r22
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	8f 4f       	sbci	r24, 0xFF	; 255
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	99 23       	and	r25, r25
 77e:	a9 f0       	breq	.+42     	; 0x7aa <__floatsisf+0x40>
 780:	f9 2f       	mov	r31, r25
 782:	96 e9       	ldi	r25, 0x96	; 150
 784:	bb 27       	eor	r27, r27
 786:	93 95       	inc	r25
 788:	f6 95       	lsr	r31
 78a:	87 95       	ror	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f1 11       	cpse	r31, r1
 794:	f8 cf       	rjmp	.-16     	; 0x786 <__floatsisf+0x1c>
 796:	fa f4       	brpl	.+62     	; 0x7d6 <__floatsisf+0x6c>
 798:	bb 0f       	add	r27, r27
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__floatsisf+0x36>
 79c:	60 ff       	sbrs	r22, 0
 79e:	1b c0       	rjmp	.+54     	; 0x7d6 <__floatsisf+0x6c>
 7a0:	6f 5f       	subi	r22, 0xFF	; 255
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <__floatsisf+0x6c>
 7aa:	88 23       	and	r24, r24
 7ac:	11 f0       	breq	.+4      	; 0x7b2 <__floatsisf+0x48>
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	11 c0       	rjmp	.+34     	; 0x7d4 <__floatsisf+0x6a>
 7b2:	77 23       	and	r23, r23
 7b4:	21 f0       	breq	.+8      	; 0x7be <__floatsisf+0x54>
 7b6:	9e e8       	ldi	r25, 0x8E	; 142
 7b8:	87 2f       	mov	r24, r23
 7ba:	76 2f       	mov	r23, r22
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <__floatsisf+0x5e>
 7be:	66 23       	and	r22, r22
 7c0:	71 f0       	breq	.+28     	; 0x7de <__floatsisf+0x74>
 7c2:	96 e8       	ldi	r25, 0x86	; 134
 7c4:	86 2f       	mov	r24, r22
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	2a f0       	brmi	.+10     	; 0x7d6 <__floatsisf+0x6c>
 7cc:	9a 95       	dec	r25
 7ce:	66 0f       	add	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	da f7       	brpl	.-10     	; 0x7cc <__floatsisf+0x62>
 7d6:	88 0f       	add	r24, r24
 7d8:	96 95       	lsr	r25
 7da:	87 95       	ror	r24
 7dc:	97 f9       	bld	r25, 7
 7de:	08 95       	ret

000007e0 <__fp_inf>:
 7e0:	97 f9       	bld	r25, 7
 7e2:	9f 67       	ori	r25, 0x7F	; 127
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_splitA+0x20>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__fp_splitA+0x2a>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__fp_splitA+0x30>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_zero>:
 874:	e8 94       	clt

00000876 <__fp_szero>:
 876:	bb 27       	eor	r27, r27
 878:	66 27       	eor	r22, r22
 87a:	77 27       	eor	r23, r23
 87c:	cb 01       	movw	r24, r22
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__mulsf3>:
 882:	0b d0       	rcall	.+22     	; 0x89a <__mulsf3x>
 884:	c4 cf       	rjmp	.-120    	; 0x80e <__fp_round>
 886:	b5 df       	rcall	.-150    	; 0x7f2 <__fp_pscA>
 888:	28 f0       	brcs	.+10     	; 0x894 <__mulsf3+0x12>
 88a:	ba df       	rcall	.-140    	; 0x800 <__fp_pscB>
 88c:	18 f0       	brcs	.+6      	; 0x894 <__mulsf3+0x12>
 88e:	95 23       	and	r25, r21
 890:	09 f0       	breq	.+2      	; 0x894 <__mulsf3+0x12>
 892:	a6 cf       	rjmp	.-180    	; 0x7e0 <__fp_inf>
 894:	ab cf       	rjmp	.-170    	; 0x7ec <__fp_nan>
 896:	11 24       	eor	r1, r1
 898:	ee cf       	rjmp	.-36     	; 0x876 <__fp_szero>

0000089a <__mulsf3x>:
 89a:	ca df       	rcall	.-108    	; 0x830 <__fp_split3>
 89c:	a0 f3       	brcs	.-24     	; 0x886 <__mulsf3+0x4>

0000089e <__mulsf3_pse>:
 89e:	95 9f       	mul	r25, r21
 8a0:	d1 f3       	breq	.-12     	; 0x896 <__mulsf3+0x14>
 8a2:	95 0f       	add	r25, r21
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	55 1f       	adc	r21, r21
 8a8:	62 9f       	mul	r22, r18
 8aa:	f0 01       	movw	r30, r0
 8ac:	72 9f       	mul	r23, r18
 8ae:	bb 27       	eor	r27, r27
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	63 9f       	mul	r22, r19
 8b6:	aa 27       	eor	r26, r26
 8b8:	f0 0d       	add	r31, r0
 8ba:	b1 1d       	adc	r27, r1
 8bc:	aa 1f       	adc	r26, r26
 8be:	64 9f       	mul	r22, r20
 8c0:	66 27       	eor	r22, r22
 8c2:	b0 0d       	add	r27, r0
 8c4:	a1 1d       	adc	r26, r1
 8c6:	66 1f       	adc	r22, r22
 8c8:	82 9f       	mul	r24, r18
 8ca:	22 27       	eor	r18, r18
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	73 9f       	mul	r23, r19
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	62 1f       	adc	r22, r18
 8da:	83 9f       	mul	r24, r19
 8dc:	a0 0d       	add	r26, r0
 8de:	61 1d       	adc	r22, r1
 8e0:	22 1f       	adc	r18, r18
 8e2:	74 9f       	mul	r23, r20
 8e4:	33 27       	eor	r19, r19
 8e6:	a0 0d       	add	r26, r0
 8e8:	61 1d       	adc	r22, r1
 8ea:	23 1f       	adc	r18, r19
 8ec:	84 9f       	mul	r24, r20
 8ee:	60 0d       	add	r22, r0
 8f0:	21 1d       	adc	r18, r1
 8f2:	82 2f       	mov	r24, r18
 8f4:	76 2f       	mov	r23, r22
 8f6:	6a 2f       	mov	r22, r26
 8f8:	11 24       	eor	r1, r1
 8fa:	9f 57       	subi	r25, 0x7F	; 127
 8fc:	50 40       	sbci	r21, 0x00	; 0
 8fe:	8a f0       	brmi	.+34     	; 0x922 <__mulsf3_pse+0x84>
 900:	e1 f0       	breq	.+56     	; 0x93a <__mulsf3_pse+0x9c>
 902:	88 23       	and	r24, r24
 904:	4a f0       	brmi	.+18     	; 0x918 <__mulsf3_pse+0x7a>
 906:	ee 0f       	add	r30, r30
 908:	ff 1f       	adc	r31, r31
 90a:	bb 1f       	adc	r27, r27
 90c:	66 1f       	adc	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	91 50       	subi	r25, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	a9 f7       	brne	.-22     	; 0x902 <__mulsf3_pse+0x64>
 918:	9e 3f       	cpi	r25, 0xFE	; 254
 91a:	51 05       	cpc	r21, r1
 91c:	70 f0       	brcs	.+28     	; 0x93a <__mulsf3_pse+0x9c>
 91e:	60 cf       	rjmp	.-320    	; 0x7e0 <__fp_inf>
 920:	aa cf       	rjmp	.-172    	; 0x876 <__fp_szero>
 922:	5f 3f       	cpi	r21, 0xFF	; 255
 924:	ec f3       	brlt	.-6      	; 0x920 <__mulsf3_pse+0x82>
 926:	98 3e       	cpi	r25, 0xE8	; 232
 928:	dc f3       	brlt	.-10     	; 0x920 <__mulsf3_pse+0x82>
 92a:	86 95       	lsr	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b7 95       	ror	r27
 932:	f7 95       	ror	r31
 934:	e7 95       	ror	r30
 936:	9f 5f       	subi	r25, 0xFF	; 255
 938:	c1 f7       	brne	.-16     	; 0x92a <__mulsf3_pse+0x8c>
 93a:	fe 2b       	or	r31, r30
 93c:	88 0f       	add	r24, r24
 93e:	91 1d       	adc	r25, r1
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret

00000948 <__itoa_ncheck>:
 948:	bb 27       	eor	r27, r27
 94a:	4a 30       	cpi	r20, 0x0A	; 10
 94c:	31 f4       	brne	.+12     	; 0x95a <__itoa_ncheck+0x12>
 94e:	99 23       	and	r25, r25
 950:	22 f4       	brpl	.+8      	; 0x95a <__itoa_ncheck+0x12>
 952:	bd e2       	ldi	r27, 0x2D	; 45
 954:	90 95       	com	r25
 956:	81 95       	neg	r24
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	01 c0       	rjmp	.+2      	; 0x95e <__utoa_common>

0000095c <__utoa_ncheck>:
 95c:	bb 27       	eor	r27, r27

0000095e <__utoa_common>:
 95e:	fb 01       	movw	r30, r22
 960:	55 27       	eor	r21, r21
 962:	aa 27       	eor	r26, r26
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	aa 1f       	adc	r26, r26
 96a:	a4 17       	cp	r26, r20
 96c:	10 f0       	brcs	.+4      	; 0x972 <__utoa_common+0x14>
 96e:	a4 1b       	sub	r26, r20
 970:	83 95       	inc	r24
 972:	50 51       	subi	r21, 0x10	; 16
 974:	b9 f7       	brne	.-18     	; 0x964 <__utoa_common+0x6>
 976:	a0 5d       	subi	r26, 0xD0	; 208
 978:	aa 33       	cpi	r26, 0x3A	; 58
 97a:	08 f0       	brcs	.+2      	; 0x97e <__utoa_common+0x20>
 97c:	a9 5d       	subi	r26, 0xD9	; 217
 97e:	a1 93       	st	Z+, r26
 980:	00 97       	sbiw	r24, 0x00	; 0
 982:	79 f7       	brne	.-34     	; 0x962 <__utoa_common+0x4>
 984:	b1 11       	cpse	r27, r1
 986:	b1 93       	st	Z+, r27
 988:	11 92       	st	Z+, r1
 98a:	cb 01       	movw	r24, r22
 98c:	00 c0       	rjmp	.+0      	; 0x98e <strrev>

0000098e <strrev>:
 98e:	dc 01       	movw	r26, r24
 990:	fc 01       	movw	r30, r24
 992:	67 2f       	mov	r22, r23
 994:	71 91       	ld	r23, Z+
 996:	77 23       	and	r23, r23
 998:	e1 f7       	brne	.-8      	; 0x992 <strrev+0x4>
 99a:	32 97       	sbiw	r30, 0x02	; 2
 99c:	04 c0       	rjmp	.+8      	; 0x9a6 <strrev+0x18>
 99e:	7c 91       	ld	r23, X
 9a0:	6d 93       	st	X+, r22
 9a2:	70 83       	st	Z, r23
 9a4:	62 91       	ld	r22, -Z
 9a6:	ae 17       	cp	r26, r30
 9a8:	bf 07       	cpc	r27, r31
 9aa:	c8 f3       	brcs	.-14     	; 0x99e <strrev+0x10>
 9ac:	08 95       	ret

000009ae <_exit>:
 9ae:	f8 94       	cli

000009b0 <__stop_program>:
 9b0:	ff cf       	rjmp	.-2      	; 0x9b0 <__stop_program>
