
Farm_01062019_v6.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800200  0000151a  000015ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000151a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019c  0080035c  0080035c  0000170a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003de9  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001870  00000000  00000000  00005765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b31  00000000  00000000  00006fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  00008b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8d  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002234  00000000  00000000  00009b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000bd49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
       6:	00 00       	nop
       8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
       a:	00 00       	nop
       c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
       e:	00 00       	nop
      10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
      12:	00 00       	nop
      14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
      16:	00 00       	nop
      18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
      1e:	00 00       	nop
      20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
      22:	00 00       	nop
      24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
      26:	00 00       	nop
      28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
      2e:	00 00       	nop
      30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
      32:	00 00       	nop
      34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
      36:	00 00       	nop
      38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
      3e:	00 00       	nop
      40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c7       	rjmp	.+4066   	; 0x1028 <__vector_17>
      46:	00 00       	nop
      48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
      4e:	00 00       	nop
      50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c7       	rjmp	.+4084   	; 0x104a <__vector_21>
      56:	00 00       	nop
      58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
      5e:	00 00       	nop
      60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_25>
      68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
      6e:	00 00       	nop
      70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
      72:	00 00       	nop
      74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
      76:	00 00       	nop
      78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
      7e:	00 00       	nop
      80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
      82:	00 00       	nop
      84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
      86:	00 00       	nop
      88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
      8e:	00 00       	nop
      90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
      92:	00 00       	nop
      94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
      96:	00 00       	nop
      98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
      be:	00 00       	nop
      c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3b c0       	rjmp	.+118    	; 0x144 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	39 c0       	rjmp	.+114    	; 0x144 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
      da:	00 00       	nop
      dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
      de:	00 00       	nop
      e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	63 02       	muls	r22, r19
      e6:	71 02       	muls	r23, r17
      e8:	7f 02       	muls	r23, r31
      ea:	8d 02       	muls	r24, r29
      ec:	9b 02       	muls	r25, r27
      ee:	a9 02       	muls	r26, r25
      f0:	b7 02       	muls	r27, r23
      f2:	c5 02       	muls	r28, r21
      f4:	33 04       	cpc	r3, r3
      f6:	37 04       	cpc	r3, r7
      f8:	3b 04       	cpc	r3, r11
      fa:	3f 04       	cpc	r3, r15
      fc:	43 04       	cpc	r4, r3
      fe:	47 04       	cpc	r4, r7
     100:	4b 04       	cpc	r4, r11
     102:	4f 04       	cpc	r4, r15

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d1 e2       	ldi	r29, 0x21	; 33
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
     114:	13 e0       	ldi	r17, 0x03	; 3
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	ea e1       	ldi	r30, 0x1A	; 26
     11c:	f5 e1       	ldi	r31, 0x15	; 21
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	ac 35       	cpi	r26, 0x5C	; 92
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	24 e0       	ldi	r18, 0x04	; 4
     130:	ac e5       	ldi	r26, 0x5C	; 92
     132:	b3 e0       	ldi	r27, 0x03	; 3
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a8 3f       	cpi	r26, 0xF8	; 248
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	51 d5       	rcall	.+2722   	; 0xbe2 <main>
     140:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <_exit>

00000144 <__bad_interrupt>:
     144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <circularQueue_isEmpty>:
	
	head = head +1;
	
	return ret;
	
}
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <head>
     14c:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <__data_end>
     150:	29 13       	cpse	r18, r25
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	08 95       	ret

00000156 <circularQueue_enqueue>:
     156:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <__data_end>
     15a:	e9 2f       	mov	r30, r25
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	e9 59       	subi	r30, 0x99	; 153
     160:	fc 4f       	sbci	r31, 0xFC	; 252
     162:	80 83       	st	Z, r24
     164:	9f 5f       	subi	r25, 0xFF	; 255
     166:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <__data_end>
     16a:	08 95       	ret

0000016c <circularQueue_clearBuffer>:

void circularQueue_clearBuffer()
{
     16c:	e7 e6       	ldi	r30, 0x67	; 103
     16e:	f3 e0       	ldi	r31, 0x03	; 3
     170:	87 ef       	ldi	r24, 0xF7	; 247
     172:	94 e0       	ldi	r25, 0x04	; 4
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
	{
		gBuffer[i]=0;
     174:	11 92       	st	Z+, r1
}

void circularQueue_clearBuffer()
{
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
     176:	e8 17       	cp	r30, r24
     178:	f9 07       	cpc	r31, r25
     17a:	e1 f7       	brne	.-8      	; 0x174 <circularQueue_clearBuffer+0x8>
	{
		gBuffer[i]=0;
	}
	tail = 0;
     17c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <__data_end>
	head = 0;
     180:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <head>
     184:	08 95       	ret

00000186 <circularQueue_searchSubStringInQueue>:
	
}
uint8_t circularQueue_searchSubStringInQueue(uint8_t* data)
{
	uint8_t ret = FALSE;
	if( strstr(gBuffer,data) == NULL)
     186:	bc 01       	movw	r22, r24
     188:	87 e6       	ldi	r24, 0x67	; 103
     18a:	93 e0       	ldi	r25, 0x03	; 3
     18c:	0e 94 36 0a 	call	0x146c	; 0x146c <strstr>
	else
	{
		ret = TRUE;
	}
	
	return ret;
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	89 2b       	or	r24, r25
     194:	09 f4       	brne	.+2      	; 0x198 <circularQueue_searchSubStringInQueue+0x12>
     196:	20 e0       	ldi	r18, 0x00	; 0
}
     198:	82 2f       	mov	r24, r18
     19a:	08 95       	ret

0000019c <circularQueue_bufferPointer>:

uint8_t *circularQueue_bufferPointer()
{
	return gBuffer;
     19c:	87 e6       	ldi	r24, 0x67	; 103
     19e:	93 e0       	ldi	r25, 0x03	; 3
     1a0:	08 95       	ret

000001a2 <dht_getdata_dht_11>:
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
     1a2:	2f 92       	push	r2
     1a4:	3f 92       	push	r3
     1a6:	4f 92       	push	r4
     1a8:	5f 92       	push	r5
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <dht_getdata_dht_11+0x24>
     1c6:	1f 92       	push	r1
     1c8:	1f 92       	push	r1
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	5c 01       	movw	r10, r24
     1d0:	4b 01       	movw	r8, r22

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     1d2:	fe 01       	movw	r30, r28
     1d4:	31 96       	adiw	r30, 0x01	; 1
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	df 01       	movw	r26, r30
     1da:	1d 92       	st	X+, r1
     1dc:	8a 95       	dec	r24
     1de:	e9 f7       	brne	.-6      	; 0x1da <dht_getdata_dht_11+0x38>

	//reset port
	DDR(DDR_data) |= (1<<channel); //output
     1e0:	fa 01       	movw	r30, r20
     1e2:	80 a1       	ldd	r24, Z+32	; 0x20
     1e4:	e1 e0       	ldi	r30, 0x01	; 1
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	0e 2c       	mov	r0, r14
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <dht_getdata_dht_11+0x4e>
     1ec:	ee 0f       	add	r30, r30
     1ee:	ff 1f       	adc	r31, r31
     1f0:	0a 94       	dec	r0
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <dht_getdata_dht_11+0x4a>
     1f4:	8e 2b       	or	r24, r30
     1f6:	da 01       	movw	r26, r20
     1f8:	90 96       	adiw	r26, 0x20	; 32
     1fa:	8c 93       	st	X, r24
	PORT(PORT_data) |= (1<<channel); //high
     1fc:	d9 01       	movw	r26, r18
     1fe:	90 96       	adiw	r26, 0x20	; 32
     200:	8c 91       	ld	r24, X
     202:	90 97       	sbiw	r26, 0x20	; 32
     204:	8e 2b       	or	r24, r30
     206:	90 96       	adiw	r26, 0x20	; 32
     208:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	bf ef       	ldi	r27, 0xFF	; 255
     20c:	61 ee       	ldi	r22, 0xE1	; 225
     20e:	74 e0       	ldi	r23, 0x04	; 4
     210:	b1 50       	subi	r27, 0x01	; 1
     212:	60 40       	sbci	r22, 0x00	; 0
     214:	70 40       	sbci	r23, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <dht_getdata_dht_11+0x6e>
     218:	00 c0       	rjmp	.+0      	; 0x21a <dht_getdata_dht_11+0x78>
     21a:	00 00       	nop
	_delay_ms(100);

	//send request
	PORT(PORT_data) &= ~(1<<channel); //low
     21c:	d9 01       	movw	r26, r18
     21e:	90 96       	adiw	r26, 0x20	; 32
     220:	9c 91       	ld	r25, X
     222:	90 97       	sbiw	r26, 0x20	; 32
     224:	8e 2f       	mov	r24, r30
     226:	80 95       	com	r24
     228:	98 23       	and	r25, r24
     22a:	90 96       	adiw	r26, 0x20	; 32
     22c:	9c 93       	st	X, r25
     22e:	bf ef       	ldi	r27, 0xFF	; 255
     230:	60 ee       	ldi	r22, 0xE0	; 224
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	b1 50       	subi	r27, 0x01	; 1
     236:	60 40       	sbci	r22, 0x00	; 0
     238:	70 40       	sbci	r23, 0x00	; 0
     23a:	e1 f7       	brne	.-8      	; 0x234 <dht_getdata_dht_11+0x92>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <dht_getdata_dht_11+0x9c>
     23e:	00 00       	nop
	
	_delay_ms(18);
	
	
	
	PORT(PORT_data) |= (1<<channel); //high
     240:	d9 01       	movw	r26, r18
     242:	90 96       	adiw	r26, 0x20	; 32
     244:	9c 91       	ld	r25, X
     246:	90 97       	sbiw	r26, 0x20	; 32
     248:	9e 2b       	or	r25, r30
     24a:	90 96       	adiw	r26, 0x20	; 32
     24c:	9c 93       	st	X, r25
	DDR(DDR_data) &= ~(1<<channel); //input
     24e:	da 01       	movw	r26, r20
     250:	90 96       	adiw	r26, 0x20	; 32
     252:	9c 91       	ld	r25, X
     254:	90 97       	sbiw	r26, 0x20	; 32
     256:	89 23       	and	r24, r25
     258:	90 96       	adiw	r26, 0x20	; 32
     25a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25c:	b5 ed       	ldi	r27, 0xD5	; 213
     25e:	ba 95       	dec	r27
     260:	f1 f7       	brne	.-4      	; 0x25e <dht_getdata_dht_11+0xbc>
     262:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((PIN(PIN_data) & (1<<channel))) {
     264:	18 01       	movw	r2, r16
     266:	60 e2       	ldi	r22, 0x20	; 32
     268:	26 0e       	add	r2, r22
     26a:	31 1c       	adc	r3, r1
     26c:	d8 01       	movw	r26, r16
     26e:	90 96       	adiw	r26, 0x20	; 32
     270:	8c 91       	ld	r24, X
     272:	90 97       	sbiw	r26, 0x20	; 32
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 2c       	mov	r0, r14
     278:	02 c0       	rjmp	.+4      	; 0x27e <dht_getdata_dht_11+0xdc>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	0a 94       	dec	r0
     280:	e2 f7       	brpl	.-8      	; 0x27a <dht_getdata_dht_11+0xd8>
     282:	80 fd       	sbrc	r24, 0
     284:	82 c0       	rjmp	.+260    	; 0x38a <dht_getdata_dht_11+0x1e8>
     286:	8f e3       	ldi	r24, 0x3F	; 63
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <dht_getdata_dht_11+0xe8>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <dht_getdata_dht_11+0xee>
     290:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIN(PIN_data) & (1<<channel))) {
     292:	90 96       	adiw	r26, 0x20	; 32
     294:	8c 91       	ld	r24, X
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <dht_getdata_dht_11+0xfc>
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	ea 94       	dec	r14
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <dht_getdata_dht_11+0xf8>
     2a2:	80 ff       	sbrs	r24, 0
     2a4:	74 c0       	rjmp	.+232    	; 0x38e <dht_getdata_dht_11+0x1ec>
     2a6:	8f e3       	ldi	r24, 0x3F	; 63
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <dht_getdata_dht_11+0x108>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <dht_getdata_dht_11+0x10e>
     2b0:	00 00       	nop
     2b2:	de 01       	movw	r26, r28
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	6d 01       	movw	r12, r26
     2b8:	2e 01       	movw	r4, r28
     2ba:	b6 e0       	ldi	r27, 0x06	; 6
     2bc:	4b 0e       	add	r4, r27
     2be:	51 1c       	adc	r5, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
     2c0:	ee 24       	eor	r14, r14
     2c2:	e3 94       	inc	r14
     2c4:	f1 2c       	mov	r15, r1
     2c6:	36 c0       	rjmp	.+108    	; 0x334 <dht_getdata_dht_11+0x192>
     2c8:	61 50       	subi	r22, 0x01	; 1
     2ca:	71 09       	sbc	r23, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     2cc:	19 f4       	brne	.+6      	; 0x2d4 <dht_getdata_dht_11+0x132>
     2ce:	61 c0       	rjmp	.+194    	; 0x392 <dht_getdata_dht_11+0x1f0>
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
     2d0:	69 ec       	ldi	r22, 0xC9	; 201
     2d2:	70 e0       	ldi	r23, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
     2d4:	d1 01       	movw	r26, r2
     2d6:	8c 91       	ld	r24, X
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	8e 23       	and	r24, r30
     2dc:	9f 23       	and	r25, r31
     2de:	89 2b       	or	r24, r25
     2e0:	99 f3       	breq	.-26     	; 0x2c8 <dht_getdata_dht_11+0x126>
     2e2:	b0 ea       	ldi	r27, 0xA0	; 160
     2e4:	ba 95       	dec	r27
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <dht_getdata_dht_11+0x142>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
     2e8:	d1 01       	movw	r26, r2
     2ea:	8c 91       	ld	r24, X
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	8e 23       	and	r24, r30
     2f0:	9f 23       	and	r25, r31
     2f2:	89 2b       	or	r24, r25
     2f4:	41 f0       	breq	.+16     	; 0x306 <dht_getdata_dht_11+0x164>
			result |= (1<<(7-i));
     2f6:	c7 01       	movw	r24, r14
     2f8:	00 2e       	mov	r0, r16
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <dht_getdata_dht_11+0x15e>
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <dht_getdata_dht_11+0x15a>
     304:	78 2a       	or	r7, r24
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
     306:	69 ec       	ldi	r22, 0xC9	; 201
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	04 c0       	rjmp	.+8      	; 0x314 <dht_getdata_dht_11+0x172>
     30c:	61 50       	subi	r22, 0x01	; 1
     30e:	71 09       	sbc	r23, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     310:	09 f4       	brne	.+2      	; 0x314 <dht_getdata_dht_11+0x172>
     312:	41 c0       	rjmp	.+130    	; 0x396 <dht_getdata_dht_11+0x1f4>
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
     314:	d1 01       	movw	r26, r2
     316:	8c 91       	ld	r24, X
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	8e 23       	and	r24, r30
     31c:	9f 23       	and	r25, r31
     31e:	89 2b       	or	r24, r25
     320:	a9 f7       	brne	.-22     	; 0x30c <dht_getdata_dht_11+0x16a>
     322:	01 50       	subi	r16, 0x01	; 1
     324:	11 09       	sbc	r17, r1
     326:	a0 f6       	brcc	.-88     	; 0x2d0 <dht_getdata_dht_11+0x12e>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     328:	d6 01       	movw	r26, r12
     32a:	7d 92       	st	X+, r7
     32c:	6d 01       	movw	r12, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     32e:	4a 16       	cp	r4, r26
     330:	5b 06       	cpc	r5, r27
     332:	21 f0       	breq	.+8      	; 0x33c <dht_getdata_dht_11+0x19a>
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
     334:	07 e0       	ldi	r16, 0x07	; 7
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	71 2c       	mov	r7, r1
     33a:	ca cf       	rjmp	.-108    	; 0x2d0 <dht_getdata_dht_11+0x12e>
		}
		bits[j] = result;
	}

	//reset port
	DDR(DDR_data) |= (1<<channel); //output
     33c:	da 01       	movw	r26, r20
     33e:	90 96       	adiw	r26, 0x20	; 32
     340:	8c 91       	ld	r24, X
     342:	90 97       	sbiw	r26, 0x20	; 32
     344:	8e 2b       	or	r24, r30
     346:	90 96       	adiw	r26, 0x20	; 32
     348:	8c 93       	st	X, r24
	PORT(PORT_data) |= (1<<channel); //low
     34a:	d9 01       	movw	r26, r18
     34c:	90 96       	adiw	r26, 0x20	; 32
     34e:	8c 91       	ld	r24, X
     350:	90 97       	sbiw	r26, 0x20	; 32
     352:	e8 2b       	or	r30, r24
     354:	90 96       	adiw	r26, 0x20	; 32
     356:	ec 93       	st	X, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     358:	bf ef       	ldi	r27, 0xFF	; 255
     35a:	e1 ee       	ldi	r30, 0xE1	; 225
     35c:	f4 e0       	ldi	r31, 0x04	; 4
     35e:	b1 50       	subi	r27, 0x01	; 1
     360:	e0 40       	sbci	r30, 0x00	; 0
     362:	f0 40       	sbci	r31, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <dht_getdata_dht_11+0x1bc>
     366:	00 c0       	rjmp	.+0      	; 0x368 <dht_getdata_dht_11+0x1c6>
     368:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3b 81       	ldd	r19, Y+3	; 0x03
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	82 0f       	add	r24, r18
     372:	83 0f       	add	r24, r19
     374:	9c 81       	ldd	r25, Y+4	; 0x04
     376:	89 0f       	add	r24, r25
     378:	9d 81       	ldd	r25, Y+5	; 0x05
     37a:	89 13       	cpse	r24, r25
     37c:	0e c0       	rjmp	.+28     	; 0x39a <dht_getdata_dht_11+0x1f8>
		//return temperature and humidity
		
		*temperature = bits[2];
     37e:	d5 01       	movw	r26, r10
     380:	3c 93       	st	X, r19
		*humidity = bits[0];
     382:	f4 01       	movw	r30, r8
     384:	20 83       	st	Z, r18
		



		
		return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	09 c0       	rjmp	.+18     	; 0x39c <dht_getdata_dht_11+0x1fa>
	DDR(DDR_data) &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((PIN(PIN_data) & (1<<channel))) {
		return -1;
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	07 c0       	rjmp	.+14     	; 0x39c <dht_getdata_dht_11+0x1fa>
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIN(PIN_data) & (1<<channel))) {
		return -1;
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	05 c0       	rjmp	.+10     	; 0x39c <dht_getdata_dht_11+0x1fa>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	03 c0       	rjmp	.+6      	; 0x39c <dht_getdata_dht_11+0x1fa>
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	01 c0       	rjmp	.+2      	; 0x39c <dht_getdata_dht_11+0x1fa>

		
		return 0;
	}

	return -1;
     39a:	8f ef       	ldi	r24, 0xFF	; 255

}
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	9f 90       	pop	r9
     3bc:	8f 90       	pop	r8
     3be:	7f 90       	pop	r7
     3c0:	5f 90       	pop	r5
     3c2:	4f 90       	pop	r4
     3c4:	3f 90       	pop	r3
     3c6:	2f 90       	pop	r2
     3c8:	08 95       	ret

000003ca <ESP_close_TCP>:
            UART_string_tx(command);
        }

    circularQueue_clearBuffer();
    _delay_ms(1000);
}
     3ca:	d0 de       	rcall	.-608    	; 0x16c <circularQueue_clearBuffer>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	9b d6       	rcall	.+3382   	; 0x1108 <UART_string_tx>
     3d2:	b9 de       	rcall	.-654    	; 0x146 <circularQueue_isEmpty>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	e9 f3       	breq	.-6      	; 0x3d2 <ESP_close_TCP+0x8>
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	80 e7       	ldi	r24, 0x70	; 112
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <ESP_close_TCP+0x14>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <ESP_close_TCP+0x1e>
     3e8:	00 00       	nop
     3ea:	c0 ce       	rjmp	.-640    	; 0x16c <circularQueue_clearBuffer>
     3ec:	08 95       	ret

000003ee <ESP_write_Fields>:


void ESP_write_Fields(struct Json *data,uint8_t* api_key,uint8_t fieldStart,uint8_t fieldEnd)
{
     3ee:	8f 92       	push	r8
     3f0:	9f 92       	push	r9
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	cf 54       	subi	r28, 0x4F	; 79
     40c:	d1 40       	sbci	r29, 0x01	; 1
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	4c 01       	movw	r8, r24
     41a:	7b 01       	movw	r14, r22
     41c:	14 2f       	mov	r17, r20
     41e:	02 2f       	mov	r16, r18
    uint8_t command[300];
    uint8_t command_length[30];
    uint8_t buffer[5];
    uint8_t i;
   
    ESP_close_TCP();// CLOSE ANY TCP CONNECTION
     420:	d4 df       	rcall	.-88     	; 0x3ca <ESP_close_TCP>

    strcpy(command,"GET https://api.thingspeak.com/update?api_key=");
     422:	8f e2       	ldi	r24, 0x2F	; 47
     424:	ee e0       	ldi	r30, 0x0E	; 14
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	de 01       	movw	r26, r28
     42a:	11 96       	adiw	r26, 0x01	; 1
     42c:	01 90       	ld	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	8a 95       	dec	r24
     432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
    strcat(command,api_key);
     434:	b7 01       	movw	r22, r14
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <strcat>
	 
    for(i=fieldStart; i<=fieldEnd; i++)
     43e:	01 17       	cp	r16, r17
     440:	08 f4       	brcc	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	b4 c0       	rjmp	.+360    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
        {
            strcat(command,"&");
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	7c 01       	movw	r14, r24
     44a:	0f 2e       	mov	r0, r31
     44c:	f6 e2       	ldi	r31, 0x26	; 38
     44e:	af 2e       	mov	r10, r31
     450:	b1 2c       	mov	r11, r1
     452:	f0 2d       	mov	r31, r0
            strcat(command,"field");
            itoa(i,buffer,10);
            strcat(command,buffer);
            strcat(command,"=");
     454:	0f 2e       	mov	r0, r31
     456:	fd e3       	ldi	r31, 0x3D	; 61
     458:	cf 2e       	mov	r12, r31
     45a:	d1 2c       	mov	r13, r1
     45c:	f0 2d       	mov	r31, r0
    strcpy(command,"GET https://api.thingspeak.com/update?api_key=");
    strcat(command,api_key);
	 
    for(i=fieldStart; i<=fieldEnd; i++)
        {
            strcat(command,"&");
     45e:	f7 01       	movw	r30, r14
     460:	01 90       	ld	r0, Z+
     462:	00 20       	and	r0, r0
     464:	e9 f7       	brne	.-6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     466:	31 97       	sbiw	r30, 0x01	; 1
     468:	b1 82       	std	Z+1, r11	; 0x01
     46a:	a0 82       	st	Z, r10
            strcat(command,"field");
     46c:	d7 01       	movw	r26, r14
     46e:	0d 90       	ld	r0, X+
     470:	00 20       	and	r0, r0
     472:	e9 f7       	brne	.-6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     474:	11 97       	sbiw	r26, 0x01	; 1
     476:	86 e0       	ldi	r24, 0x06	; 6
     478:	e7 e9       	ldi	r30, 0x97	; 151
     47a:	f2 e0       	ldi	r31, 0x02	; 2
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	8a 95       	dec	r24
     482:	e1 f7       	brne	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     484:	4a e0       	ldi	r20, 0x0A	; 10
     486:	be 01       	movw	r22, r28
     488:	65 5b       	subi	r22, 0xB5	; 181
     48a:	7e 4f       	sbci	r23, 0xFE	; 254
     48c:	81 2f       	mov	r24, r17
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__itoa_ncheck>
            itoa(i,buffer,10);
            strcat(command,buffer);
     494:	be 01       	movw	r22, r28
     496:	65 5b       	subi	r22, 0xB5	; 181
     498:	7e 4f       	sbci	r23, 0xFE	; 254
     49a:	c7 01       	movw	r24, r14
     49c:	dc d7       	rcall	.+4024   	; 0x1456 <strcat>
            strcat(command,"=");
     49e:	f7 01       	movw	r30, r14
     4a0:	01 90       	ld	r0, Z+
     4a2:	00 20       	and	r0, r0
     4a4:	e9 f7       	brne	.-6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     4a6:	31 97       	sbiw	r30, 0x01	; 1
     4a8:	d1 82       	std	Z+1, r13	; 0x01
     4aa:	c0 82       	st	Z, r12
            switch(i)
     4ac:	81 2f       	mov	r24, r17
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	31 97       	sbiw	r30, 0x01	; 1
     4b4:	e8 30       	cpi	r30, 0x08	; 8
     4b6:	f1 05       	cpc	r31, r1
     4b8:	08 f0       	brcs	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	74 c0       	rjmp	.+232    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     4bc:	88 27       	eor	r24, r24
     4be:	ee 58       	subi	r30, 0x8E	; 142
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	8f 4f       	sbci	r24, 0xFF	; 255
     4c4:	a3 c7       	rjmp	.+3910   	; 0x140c <__tablejump2__>
     4c6:	f4 01       	movw	r30, r8
     4c8:	81 81       	ldd	r24, Z+1	; 0x01
     4ca:	4a e0       	ldi	r20, 0x0A	; 10
     4cc:	be 01       	movw	r22, r28
     4ce:	65 5b       	subi	r22, 0xB5	; 181
     4d0:	7e 4f       	sbci	r23, 0xFE	; 254
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	e5 d7       	rcall	.+4042   	; 0x14a0 <__itoa_ncheck>
                {
                    case 1:
                        itoa(data->field1,buffer,10);
                        strcat(command,buffer);
     4d6:	be 01       	movw	r22, r28
     4d8:	65 5b       	subi	r22, 0xB5	; 181
     4da:	7e 4f       	sbci	r23, 0xFE	; 254
     4dc:	c7 01       	movw	r24, r14
     4de:	bb d7       	rcall	.+3958   	; 0x1456 <strcat>
                        break;
     4e0:	61 c0       	rjmp	.+194    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     4e2:	f4 01       	movw	r30, r8
     4e4:	82 81       	ldd	r24, Z+2	; 0x02
     4e6:	4a e0       	ldi	r20, 0x0A	; 10
     4e8:	be 01       	movw	r22, r28
     4ea:	65 5b       	subi	r22, 0xB5	; 181
     4ec:	7e 4f       	sbci	r23, 0xFE	; 254
     4ee:	90 e0       	ldi	r25, 0x00	; 0
                    case 2:
                        itoa(data->field2,buffer,10);
                        strcat(command,buffer);
     4f0:	d7 d7       	rcall	.+4014   	; 0x14a0 <__itoa_ncheck>
     4f2:	be 01       	movw	r22, r28
     4f4:	65 5b       	subi	r22, 0xB5	; 181
     4f6:	7e 4f       	sbci	r23, 0xFE	; 254
     4f8:	c7 01       	movw	r24, r14
     4fa:	ad d7       	rcall	.+3930   	; 0x1456 <strcat>
                        break;
     4fc:	53 c0       	rjmp	.+166    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     4fe:	f4 01       	movw	r30, r8
     500:	83 81       	ldd	r24, Z+3	; 0x03
     502:	4a e0       	ldi	r20, 0x0A	; 10
     504:	be 01       	movw	r22, r28
     506:	65 5b       	subi	r22, 0xB5	; 181
     508:	7e 4f       	sbci	r23, 0xFE	; 254
     50a:	90 e0       	ldi	r25, 0x00	; 0
                    case 3:
                        itoa(data->field3,buffer,10);
                        strcat(command,buffer);
     50c:	c9 d7       	rcall	.+3986   	; 0x14a0 <__itoa_ncheck>
     50e:	be 01       	movw	r22, r28
     510:	65 5b       	subi	r22, 0xB5	; 181
     512:	7e 4f       	sbci	r23, 0xFE	; 254
     514:	c7 01       	movw	r24, r14
                        break;
     516:	9f d7       	rcall	.+3902   	; 0x1456 <strcat>
     518:	45 c0       	rjmp	.+138    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     51a:	f4 01       	movw	r30, r8
     51c:	84 81       	ldd	r24, Z+4	; 0x04
     51e:	4a e0       	ldi	r20, 0x0A	; 10
     520:	be 01       	movw	r22, r28
     522:	65 5b       	subi	r22, 0xB5	; 181
     524:	7e 4f       	sbci	r23, 0xFE	; 254
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	bb d7       	rcall	.+3958   	; 0x14a0 <__itoa_ncheck>
                    case 4:
                        itoa(data->field4,buffer,10);
                        strcat(command,buffer);
     52a:	be 01       	movw	r22, r28
     52c:	65 5b       	subi	r22, 0xB5	; 181
     52e:	7e 4f       	sbci	r23, 0xFE	; 254
     530:	c7 01       	movw	r24, r14
                        break;
     532:	91 d7       	rcall	.+3874   	; 0x1456 <strcat>
     534:	37 c0       	rjmp	.+110    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     536:	f4 01       	movw	r30, r8
     538:	85 81       	ldd	r24, Z+5	; 0x05
     53a:	4a e0       	ldi	r20, 0x0A	; 10
     53c:	be 01       	movw	r22, r28
     53e:	65 5b       	subi	r22, 0xB5	; 181
     540:	7e 4f       	sbci	r23, 0xFE	; 254
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	ad d7       	rcall	.+3930   	; 0x14a0 <__itoa_ncheck>
                    case 5:
                        itoa(data->field5,buffer,10);
                        strcat(command,buffer);
     546:	be 01       	movw	r22, r28
     548:	65 5b       	subi	r22, 0xB5	; 181
     54a:	7e 4f       	sbci	r23, 0xFE	; 254
     54c:	c7 01       	movw	r24, r14
                        break;
     54e:	83 d7       	rcall	.+3846   	; 0x1456 <strcat>
     550:	29 c0       	rjmp	.+82     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     552:	f4 01       	movw	r30, r8
     554:	86 81       	ldd	r24, Z+6	; 0x06
     556:	4a e0       	ldi	r20, 0x0A	; 10
     558:	be 01       	movw	r22, r28
     55a:	65 5b       	subi	r22, 0xB5	; 181
     55c:	7e 4f       	sbci	r23, 0xFE	; 254
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	9f d7       	rcall	.+3902   	; 0x14a0 <__itoa_ncheck>
                    case 6:
                        itoa(data->field6,buffer,10);
                        strcat(command,buffer);
     562:	be 01       	movw	r22, r28
     564:	65 5b       	subi	r22, 0xB5	; 181
     566:	7e 4f       	sbci	r23, 0xFE	; 254
     568:	c7 01       	movw	r24, r14
     56a:	75 d7       	rcall	.+3818   	; 0x1456 <strcat>
                        break;
     56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     56e:	f4 01       	movw	r30, r8
     570:	87 81       	ldd	r24, Z+7	; 0x07
     572:	4a e0       	ldi	r20, 0x0A	; 10
     574:	be 01       	movw	r22, r28
     576:	65 5b       	subi	r22, 0xB5	; 181
     578:	7e 4f       	sbci	r23, 0xFE	; 254
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	91 d7       	rcall	.+3874   	; 0x14a0 <__itoa_ncheck>
                    case 7:
                        itoa(data->field7,buffer,10);
                        strcat(command,buffer);
     57e:	be 01       	movw	r22, r28
     580:	65 5b       	subi	r22, 0xB5	; 181
     582:	7e 4f       	sbci	r23, 0xFE	; 254
     584:	c7 01       	movw	r24, r14
     586:	67 d7       	rcall	.+3790   	; 0x1456 <strcat>
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
                        break;
     58a:	f4 01       	movw	r30, r8
     58c:	80 85       	ldd	r24, Z+8	; 0x08
     58e:	4a e0       	ldi	r20, 0x0A	; 10
     590:	be 01       	movw	r22, r28
     592:	65 5b       	subi	r22, 0xB5	; 181
     594:	7e 4f       	sbci	r23, 0xFE	; 254
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	83 d7       	rcall	.+3846   	; 0x14a0 <__itoa_ncheck>
                    case 8:
                        itoa(data->field8,buffer,10);
                        strcat(command,buffer);
     59a:	be 01       	movw	r22, r28
     59c:	65 5b       	subi	r22, 0xB5	; 181
     59e:	7e 4f       	sbci	r23, 0xFE	; 254
     5a0:	c7 01       	movw	r24, r14
     5a2:	59 d7       	rcall	.+3762   	; 0x1456 <strcat>
     5a4:	1f 5f       	subi	r17, 0xFF	; 255
    ESP_close_TCP();// CLOSE ANY TCP CONNECTION

    strcpy(command,"GET https://api.thingspeak.com/update?api_key=");
    strcat(command,api_key);
	 
    for(i=fieldStart; i<=fieldEnd; i++)
     5a6:	01 17       	cp	r16, r17
     5a8:	08 f0       	brcs	.+2      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5aa:	59 cf       	rjmp	.-334    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     5ac:	de 01       	movw	r26, r28
                }

        }


    strcat(command,"\r\n");
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	fd 01       	movw	r30, r26
     5b2:	01 90       	ld	r0, Z+
     5b4:	00 20       	and	r0, r0
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	0f 2e       	mov	r0, r31
     5bc:	fd e0       	ldi	r31, 0x0D	; 13
     5be:	ef 2e       	mov	r14, r31
     5c0:	fa e0       	ldi	r31, 0x0A	; 10
     5c2:	ff 2e       	mov	r15, r31
     5c4:	f0 2d       	mov	r31, r0
     5c6:	f1 82       	std	Z+1, r15	; 0x01
     5c8:	e0 82       	st	Z, r14
     5ca:	12 82       	std	Z+2, r1	; 0x02
     5cc:	fd 01       	movw	r30, r26
    itoa(strlen(command),buffer,10);
     5ce:	01 90       	ld	r0, Z+
     5d0:	00 20       	and	r0, r0
     5d2:	e9 f7       	brne	.-6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5d4:	cf 01       	movw	r24, r30
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	be 01       	movw	r22, r28
     5dc:	65 5b       	subi	r22, 0xB5	; 181
     5de:	7e 4f       	sbci	r23, 0xFE	; 254
     5e0:	8a 1b       	sub	r24, r26
     5e2:	9b 0b       	sbc	r25, r27
     5e4:	5d d7       	rcall	.+3770   	; 0x14a0 <__itoa_ncheck>
     5e6:	8e 01       	movw	r16, r28
    strcpy(command_length,MESSAGE_LENGTH);
     5e8:	03 5d       	subi	r16, 0xD3	; 211
     5ea:	1e 4f       	sbci	r17, 0xFE	; 254
     5ec:	8c e0       	ldi	r24, 0x0C	; 12
     5ee:	ed e3       	ldi	r30, 0x3D	; 61
     5f0:	f2 e0       	ldi	r31, 0x02	; 2
     5f2:	d8 01       	movw	r26, r16
     5f4:	01 90       	ld	r0, Z+
     5f6:	0d 92       	st	X+, r0
     5f8:	8a 95       	dec	r24
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
    strcat(command_length,buffer);
     5fc:	be 01       	movw	r22, r28
     5fe:	65 5b       	subi	r22, 0xB5	; 181
     600:	7e 4f       	sbci	r23, 0xFE	; 254
     602:	c8 01       	movw	r24, r16
     604:	28 d7       	rcall	.+3664   	; 0x1456 <strcat>
    strcat(command_length,"\r\n");
     606:	f8 01       	movw	r30, r16
     608:	01 90       	ld	r0, Z+
     60a:	00 20       	and	r0, r0
     60c:	e9 f7       	brne	.-6      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     60e:	31 97       	sbiw	r30, 0x01	; 1
     610:	f1 82       	std	Z+1, r15	; 0x01

    circularQueue_clearBuffer();
     612:	e0 82       	st	Z, r14
     614:	12 82       	std	Z+2, r1	; 0x02
    UART_string_tx(TCP_THINGSPEAK);
     616:	aa dd       	rcall	.-1196   	; 0x16c <circularQueue_clearBuffer>
     618:	89 e4       	ldi	r24, 0x49	; 73
     61a:	92 e0       	ldi	r25, 0x02	; 2
    while(circularQueue_isEmpty() == TRUE);
     61c:	75 d5       	rcall	.+2794   	; 0x1108 <UART_string_tx>
     61e:	93 dd       	rcall	.-1242   	; 0x146 <circularQueue_isEmpty>
     620:	81 30       	cpi	r24, 0x01	; 1
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE  && circularQueue_searchSubStringInQueue("OK") == FALSE);
     622:	e9 f3       	breq	.-6      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     624:	82 e7       	ldi	r24, 0x72	; 114
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	ae dd       	rcall	.-1188   	; 0x186 <circularQueue_searchSubStringInQueue>
     62a:	81 11       	cpse	r24, r1
     62c:	05 c0       	rjmp	.+10     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     62e:	88 e7       	ldi	r24, 0x78	; 120
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	a9 dd       	rcall	.-1198   	; 0x186 <circularQueue_searchSubStringInQueue>
     634:	88 23       	and	r24, r24
     636:	b1 f3       	breq	.-20     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     638:	82 e7       	ldi	r24, 0x72	; 114
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	a4 dd       	rcall	.-1208   	; 0x186 <circularQueue_searchSubStringInQueue>
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	59 f4       	brne	.+22     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     642:	94 dd       	rcall	.-1240   	; 0x16c <circularQueue_clearBuffer>
        {
            circularQueue_clearBuffer();
     644:	ff ef       	ldi	r31, 0xFF	; 255
     646:	23 ed       	ldi	r18, 0xD3	; 211
     648:	80 e3       	ldi	r24, 0x30	; 48
     64a:	f1 50       	subi	r31, 0x01	; 1
     64c:	20 40       	sbci	r18, 0x00	; 0
     64e:	80 40       	sbci	r24, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     652:	00 c0       	rjmp	.+0      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     654:	00 00       	nop
     656:	5a c0       	rjmp	.+180    	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     658:	9f ef       	ldi	r25, 0xFF	; 255
     65a:	e9 ef       	ldi	r30, 0xF9	; 249
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	91 50       	subi	r25, 0x01	; 1
     660:	e0 40       	sbci	r30, 0x00	; 0
     662:	f0 40       	sbci	r31, 0x00	; 0
     664:	e1 f7       	brne	.-8      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
            return;

        }

    _delay_ms(20);
    circularQueue_clearBuffer();
     666:	00 c0       	rjmp	.+0      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     668:	00 00       	nop
    UART_string_tx(command_length);
     66a:	80 dd       	rcall	.-1280   	; 0x16c <circularQueue_clearBuffer>
     66c:	ce 01       	movw	r24, r28
     66e:	83 5d       	subi	r24, 0xD3	; 211
     670:	9e 4f       	sbci	r25, 0xFE	; 254
    while(circularQueue_isEmpty() == TRUE);
     672:	4a d5       	rcall	.+2708   	; 0x1108 <UART_string_tx>
     674:	68 dd       	rcall	.-1328   	; 0x146 <circularQueue_isEmpty>
     676:	81 30       	cpi	r24, 0x01	; 1
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE && circularQueue_searchSubStringInQueue("OK") == FALSE && circularQueue_searchSubStringInQueue("FAIL") == FALSE);
     678:	e9 f3       	breq	.-6      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     67a:	82 e7       	ldi	r24, 0x72	; 114
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	83 dd       	rcall	.-1274   	; 0x186 <circularQueue_searchSubStringInQueue>
     680:	81 11       	cpse	r24, r1
     682:	0a c0       	rjmp	.+20     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     684:	88 e7       	ldi	r24, 0x78	; 120
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	7e dd       	rcall	.-1284   	; 0x186 <circularQueue_searchSubStringInQueue>
     68a:	81 11       	cpse	r24, r1
     68c:	05 c0       	rjmp	.+10     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     68e:	8b e7       	ldi	r24, 0x7B	; 123
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	79 dd       	rcall	.-1294   	; 0x186 <circularQueue_searchSubStringInQueue>
     694:	88 23       	and	r24, r24
     696:	89 f3       	breq	.-30     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     698:	82 e7       	ldi	r24, 0x72	; 114

    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	74 dd       	rcall	.-1304   	; 0x186 <circularQueue_searchSubStringInQueue>
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	59 f4       	brne	.+22     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     6a2:	64 dd       	rcall	.-1336   	; 0x16c <circularQueue_clearBuffer>
        {
            circularQueue_clearBuffer();
     6a4:	2f ef       	ldi	r18, 0xFF	; 255
     6a6:	83 ed       	ldi	r24, 0xD3	; 211
     6a8:	90 e3       	ldi	r25, 0x30	; 48
     6aa:	21 50       	subi	r18, 0x01	; 1
     6ac:	80 40       	sbci	r24, 0x00	; 0
     6ae:	90 40       	sbci	r25, 0x00	; 0
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     6b4:	00 00       	nop
     6b6:	2a c0       	rjmp	.+84     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     6b8:	ef ef       	ldi	r30, 0xFF	; 255
     6ba:	f9 ef       	ldi	r31, 0xF9	; 249
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	e1 50       	subi	r30, 0x01	; 1
     6c0:	f0 40       	sbci	r31, 0x00	; 0
     6c2:	20 40       	sbci	r18, 0x00	; 0
     6c4:	e1 f7       	brne	.-8      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
            return;

        }
	 
    _delay_ms(20);
    if (circularQueue_searchSubStringInQueue("OK") == TRUE)
     6c8:	00 00       	nop
     6ca:	88 e7       	ldi	r24, 0x78	; 120
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	5b dd       	rcall	.-1354   	; 0x186 <circularQueue_searchSubStringInQueue>
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	91 f4       	brne	.+36     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
        {
            while(circularQueue_searchSubStringInQueue(">") == FALSE);
     6d4:	80 e8       	ldi	r24, 0x80	; 128
     6d6:	92 e0       	ldi	r25, 0x02	; 2
     6d8:	56 dd       	rcall	.-1364   	; 0x186 <circularQueue_searchSubStringInQueue>
     6da:	88 23       	and	r24, r24
     6dc:	d9 f3       	breq	.-10     	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
     6de:	46 dd       	rcall	.-1396   	; 0x16c <circularQueue_clearBuffer>
            circularQueue_clearBuffer();
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	90 e7       	ldi	r25, 0x70	; 112
     6e4:	e2 e0       	ldi	r30, 0x02	; 2
     6e6:	81 50       	subi	r24, 0x01	; 1
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	e0 40       	sbci	r30, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6f0:	00 00       	nop
     6f2:	ce 01       	movw	r24, r28
     6f4:	01 96       	adiw	r24, 0x01	; 1
			 
            _delay_ms(50);
            UART_string_tx(command);
     6f6:	08 d5       	rcall	.+2576   	; 0x1108 <UART_string_tx>
     6f8:	39 dd       	rcall	.-1422   	; 0x16c <circularQueue_clearBuffer>
     6fa:	ff ef       	ldi	r31, 0xFF	; 255
     6fc:	23 ed       	ldi	r18, 0xD3	; 211
        }

    circularQueue_clearBuffer();
     6fe:	80 e3       	ldi	r24, 0x30	; 48
     700:	f1 50       	subi	r31, 0x01	; 1
     702:	20 40       	sbci	r18, 0x00	; 0
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	e1 f7       	brne	.-8      	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
     708:	00 c0       	rjmp	.+0      	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
     70a:	00 00       	nop
     70c:	c1 5b       	subi	r28, 0xB1	; 177
     70e:	de 4f       	sbci	r29, 0xFE	; 254
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
	 
    _delay_ms(1000);
}
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	08 95       	ret

00000734 <readFieldValue>:
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	00 d0       	rcall	.+0      	; 0x73a <readFieldValue+0x6>
     73a:	1f 92       	push	r1


}

uint8_t readFieldValue(uint8_t* data)
{
     73c:	1f 92       	push	r1
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	dc 01       	movw	r26, r24
    int i = 0;
    uint8_t count=0;
    uint8_t buffer[5]= {'1','5','\0'};
     744:	9e 01       	movw	r18, r28
     746:	2f 5f       	subi	r18, 0xFF	; 255
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	85 e0       	ldi	r24, 0x05	; 5
     74c:	f9 01       	movw	r30, r18
     74e:	11 92       	st	Z+, r1
     750:	8a 95       	dec	r24
     752:	e9 f7       	brne	.-6      	; 0x74e <readFieldValue+0x1a>
     754:	81 e3       	ldi	r24, 0x31	; 49
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	85 e3       	ldi	r24, 0x35	; 53
     75a:	8a 83       	std	Y+2, r24	; 0x02
     75c:	bd 01       	movw	r22, r26
     75e:	69 5f       	subi	r22, 0xF9	; 249
     760:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t readFieldValue(uint8_t* data)
{
    int i = 0;
    uint8_t count=0;
     762:	40 e0       	ldi	r20, 0x00	; 0
    uint8_t buffer[5]= {'1','5','\0'};
    uint8_t ret;
    for(i=7; i<strlen(data); i++)
     764:	27 e0       	ldi	r18, 0x07	; 7
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	1d c0       	rjmp	.+58     	; 0x7a4 <readFieldValue+0x70>
        {
            if(  (data[i]>='0' && data[i]<='9') || data[i]=='-')
     76a:	fb 01       	movw	r30, r22
     76c:	91 91       	ld	r25, Z+
     76e:	bf 01       	movw	r22, r30
     770:	80 ed       	ldi	r24, 0xD0	; 208
     772:	89 0f       	add	r24, r25
     774:	8a 30       	cpi	r24, 0x0A	; 10
     776:	10 f0       	brcs	.+4      	; 0x77c <readFieldValue+0x48>
     778:	9d 32       	cpi	r25, 0x2D	; 45
     77a:	81 f4       	brne	.+32     	; 0x79c <readFieldValue+0x68>
                {

                    buffer[count] = data[i];
     77c:	e1 e0       	ldi	r30, 0x01	; 1
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ec 0f       	add	r30, r28
     782:	fd 1f       	adc	r31, r29
     784:	e4 0f       	add	r30, r20
     786:	f1 1d       	adc	r31, r1
     788:	90 83       	st	Z, r25
                    count++;
     78a:	4f 5f       	subi	r20, 0xFF	; 255
                    buffer[count]='\0';
     78c:	e1 e0       	ldi	r30, 0x01	; 1
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	ec 0f       	add	r30, r28
     792:	fd 1f       	adc	r31, r29
     794:	e4 0f       	add	r30, r20
     796:	f1 1d       	adc	r31, r1
     798:	10 82       	st	Z, r1
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <readFieldValue+0x6c>
                }

            else if (data[i]==',')
     79c:	9c 32       	cpi	r25, 0x2C	; 44
     79e:	61 f0       	breq	.+24     	; 0x7b8 <readFieldValue+0x84>
{
    int i = 0;
    uint8_t count=0;
    uint8_t buffer[5]= {'1','5','\0'};
    uint8_t ret;
    for(i=7; i<strlen(data); i++)
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	fd 01       	movw	r30, r26
     7a6:	01 90       	ld	r0, Z+
     7a8:	00 20       	and	r0, r0
     7aa:	e9 f7       	brne	.-6      	; 0x7a6 <readFieldValue+0x72>
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	ea 1b       	sub	r30, r26
     7b0:	fb 0b       	sbc	r31, r27
     7b2:	2e 17       	cp	r18, r30
     7b4:	3f 07       	cpc	r19, r31
     7b6:	c8 f2       	brcs	.-78     	; 0x76a <readFieldValue+0x36>
                {
                    break;
                }
        }

    ret = atoi(buffer);
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	2f d6       	rcall	.+3166   	; 0x141c <atoi>

    return ret;

     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <jasonParser>:
    _delay_ms(1000);
}


uint8_t jasonParser(uint8_t* data, uint8_t numberOfFields, Json * Jdata)
{
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	2a 97       	sbiw	r28, 0x0a	; 10
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	7c 01       	movw	r14, r24
     7f2:	b6 2e       	mov	r11, r22
     7f4:	6a 01       	movw	r12, r20
    uint8_t ret=0;
    uint8_t i=0;
    uint8_t Field[10];
    uint8_t *splitedata;
    uint8_t splitRet;
    strcpy(Field,"field0");
     7f6:	87 e0       	ldi	r24, 0x07	; 7
     7f8:	ed e9       	ldi	r30, 0x9D	; 157
     7fa:	f2 e0       	ldi	r31, 0x02	; 2
     7fc:	de 01       	movw	r26, r28
     7fe:	11 96       	adiw	r26, 0x01	; 1
     800:	01 90       	ld	r0, Z+
     802:	0d 92       	st	X+, r0
     804:	8a 95       	dec	r24
     806:	e1 f7       	brne	.-8      	; 0x800 <jasonParser+0x32>
    Field[5]='0'+i;
     808:	80 e3       	ldi	r24, 0x30	; 48
     80a:	8e 83       	std	Y+6, r24	; 0x06

    if(strstr(data,"IPD") == 0)
     80c:	64 ea       	ldi	r22, 0xA4	; 164
     80e:	72 e0       	ldi	r23, 0x02	; 2
     810:	c7 01       	movw	r24, r14
     812:	2c d6       	rcall	.+3160   	; 0x146c <strstr>
     814:	89 2b       	or	r24, r25
     816:	09 f4       	brne	.+2      	; 0x81a <jasonParser+0x4c>
     818:	4a c0       	rjmp	.+148    	; 0x8ae <jasonParser+0xe0>

        }

    else
        {
            for(i=1; i<= numberOfFields; i++)
     81a:	bb 20       	and	r11, r11
     81c:	09 f4       	brne	.+2      	; 0x820 <jasonParser+0x52>
     81e:	49 c0       	rjmp	.+146    	; 0x8b2 <jasonParser+0xe4>
     820:	11 e0       	ldi	r17, 0x01	; 1
     822:	00 e0       	ldi	r16, 0x00	; 0
                {
                    strcpy(Field,"field");
     824:	86 e0       	ldi	r24, 0x06	; 6
     826:	e7 e9       	ldi	r30, 0x97	; 151
     828:	f2 e0       	ldi	r31, 0x02	; 2
     82a:	de 01       	movw	r26, r28
     82c:	11 96       	adiw	r26, 0x01	; 1
     82e:	01 90       	ld	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	8a 95       	dec	r24
     834:	e1 f7       	brne	.-8      	; 0x82e <jasonParser+0x60>
                    Field[5]='0'+i;
     836:	80 e3       	ldi	r24, 0x30	; 48
     838:	81 0f       	add	r24, r17
     83a:	8e 83       	std	Y+6, r24	; 0x06
                    splitedata = strstr(data,Field);
     83c:	be 01       	movw	r22, r28
     83e:	6f 5f       	subi	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	c7 01       	movw	r24, r14
     844:	13 d6       	rcall	.+3110   	; 0x146c <strstr>

                    if(splitedata!=0 )
     846:	00 97       	sbiw	r24, 0x00	; 0
                        {
                            splitRet = readFieldValue(splitedata);
     848:	69 f1       	breq	.+90     	; 0x8a4 <jasonParser+0xd6>
     84a:	74 df       	rcall	.-280    	; 0x734 <readFieldValue>
     84c:	28 2f       	mov	r18, r24

                            switch(i)
     84e:	81 2f       	mov	r24, r17
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	fc 01       	movw	r30, r24
     854:	31 97       	sbiw	r30, 0x01	; 1
     856:	e8 30       	cpi	r30, 0x08	; 8
     858:	f1 05       	cpc	r31, r1
     85a:	20 f5       	brcc	.+72     	; 0x8a4 <jasonParser+0xd6>
     85c:	88 27       	eor	r24, r24
     85e:	e6 58       	subi	r30, 0x86	; 134
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	8f 4f       	sbci	r24, 0xFF	; 255
     864:	d3 c5       	rjmp	.+2982   	; 0x140c <__tablejump2__>
                                {
                                    case 1:
                                        Jdata->field1=splitRet;
     866:	f6 01       	movw	r30, r12
     868:	21 83       	std	Z+1, r18	; 0x01
                                        ret++;
     86a:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     86c:	1b c0       	rjmp	.+54     	; 0x8a4 <jasonParser+0xd6>
                                    case 2:
                                        Jdata->field2=splitRet;
     86e:	f6 01       	movw	r30, r12
     870:	22 83       	std	Z+2, r18	; 0x02
                                        ret++;
     872:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     874:	17 c0       	rjmp	.+46     	; 0x8a4 <jasonParser+0xd6>
                                    case 3:
                                        Jdata->field3=splitRet;
     876:	f6 01       	movw	r30, r12
     878:	23 83       	std	Z+3, r18	; 0x03
                                        ret++;
     87a:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     87c:	13 c0       	rjmp	.+38     	; 0x8a4 <jasonParser+0xd6>
                                    case 4:
                                        Jdata->field4=splitRet;
     87e:	f6 01       	movw	r30, r12
     880:	24 83       	std	Z+4, r18	; 0x04
                                        ret++;
     882:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     884:	0f c0       	rjmp	.+30     	; 0x8a4 <jasonParser+0xd6>
                                    case 5:
                                        Jdata->field5=splitRet;
     886:	f6 01       	movw	r30, r12
     888:	25 83       	std	Z+5, r18	; 0x05
                                        ret++;
     88a:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     88c:	0b c0       	rjmp	.+22     	; 0x8a4 <jasonParser+0xd6>
                                    case 6:
                                        Jdata->field6=splitRet;
     88e:	f6 01       	movw	r30, r12
     890:	26 83       	std	Z+6, r18	; 0x06
                                        ret++;
     892:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     894:	07 c0       	rjmp	.+14     	; 0x8a4 <jasonParser+0xd6>
                                    case 7:
                                        Jdata->field7=splitRet;
     896:	f6 01       	movw	r30, r12
     898:	27 83       	std	Z+7, r18	; 0x07
                                        ret++;
     89a:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     89c:	03 c0       	rjmp	.+6      	; 0x8a4 <jasonParser+0xd6>
                                    case 8:
                                        Jdata->field8=splitRet;
     89e:	f6 01       	movw	r30, r12
     8a0:	20 87       	std	Z+8, r18	; 0x08
                                        ret++;
     8a2:	0f 5f       	subi	r16, 0xFF	; 255

        }

    else
        {
            for(i=1; i<= numberOfFields; i++)
     8a4:	1f 5f       	subi	r17, 0xFF	; 255
     8a6:	b1 16       	cp	r11, r17
     8a8:	08 f0       	brcs	.+2      	; 0x8ac <jasonParser+0xde>
     8aa:	bc cf       	rjmp	.-136    	; 0x824 <jasonParser+0x56>
     8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <jasonParser+0xe6>
    Field[5]='0'+i;

    if(strstr(data,"IPD") == 0)
        {

            ret = 0;
     8ae:	00 e0       	ldi	r16, 0x00	; 0
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <jasonParser+0xe6>

        }

    else
        {
            for(i=1; i<= numberOfFields; i++)
     8b2:	00 e0       	ldi	r16, 0x00	; 0


    return ret;


}
     8b4:	80 2f       	mov	r24, r16
     8b6:	2a 96       	adiw	r28, 0x0a	; 10
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	bf 90       	pop	r11
     8d4:	08 95       	ret

000008d6 <ESP_Read>:
}


//https://api.thingspeak.com/channels/872668/feeds/last.json?api_key=HFCKEVJ6RK7YOMS3
void ESP_Read(Json* Jdata, uint8_t* channelID,uint8_t* api_key,uint8_t numberOfFields)
{
     8d6:	8f 92       	push	r8
     8d8:	9f 92       	push	r9
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	cb 5e       	subi	r28, 0xEB	; 235
     8f2:	d1 09       	sbc	r29, r1
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	6c 01       	movw	r12, r24
     900:	4b 01       	movw	r8, r22
     902:	7a 01       	movw	r14, r20
     904:	b2 2e       	mov	r11, r18
    uint8_t command[200];
    uint8_t command_length[30];
    uint8_t buffer[5];
    uint8_t *data;

    ESP_close_TCP();// CLOSE ANY TCP CONNECTION
     906:	61 dd       	rcall	.-1342   	; 0x3ca <ESP_close_TCP>
	 wdt_reset();
     908:	a8 95       	wdr
    strcpy(command,"GET https://api.thingspeak.com/channels/");
     90a:	89 e2       	ldi	r24, 0x29	; 41
     90c:	e8 ea       	ldi	r30, 0xA8	; 168
     90e:	f2 e0       	ldi	r31, 0x02	; 2
     910:	8e 01       	movw	r16, r28
     912:	0f 5f       	subi	r16, 0xFF	; 255
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	d8 01       	movw	r26, r16
     918:	01 90       	ld	r0, Z+
     91a:	0d 92       	st	X+, r0
     91c:	8a 95       	dec	r24
     91e:	e1 f7       	brne	.-8      	; 0x918 <ESP_Read+0x42>
    strcat(command,channelID);
     920:	b4 01       	movw	r22, r8
     922:	c8 01       	movw	r24, r16
     924:	98 d5       	rcall	.+2864   	; 0x1456 <strcat>
    strcat(command,"/feeds/last.json?api_key=");
     926:	d8 01       	movw	r26, r16
     928:	0d 90       	ld	r0, X+
     92a:	00 20       	and	r0, r0
     92c:	e9 f7       	brne	.-6      	; 0x928 <ESP_Read+0x52>
     92e:	11 97       	sbiw	r26, 0x01	; 1
     930:	8a e1       	ldi	r24, 0x1A	; 26
     932:	e1 ed       	ldi	r30, 0xD1	; 209
     934:	f2 e0       	ldi	r31, 0x02	; 2
     936:	01 90       	ld	r0, Z+
     938:	0d 92       	st	X+, r0
     93a:	8a 95       	dec	r24
     93c:	e1 f7       	brne	.-8      	; 0x936 <ESP_Read+0x60>
    strcat(command,api_key);
     93e:	b7 01       	movw	r22, r14
     940:	c8 01       	movw	r24, r16
     942:	89 d5       	rcall	.+2834   	; 0x1456 <strcat>
    strcat(command,"\r\n");
     944:	f8 01       	movw	r30, r16
     946:	01 90       	ld	r0, Z+
     948:	00 20       	and	r0, r0
     94a:	e9 f7       	brne	.-6      	; 0x946 <ESP_Read+0x70>
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	0f 2e       	mov	r0, r31
     950:	fd e0       	ldi	r31, 0x0D	; 13
     952:	ef 2e       	mov	r14, r31
     954:	fa e0       	ldi	r31, 0x0A	; 10
     956:	ff 2e       	mov	r15, r31
     958:	f0 2d       	mov	r31, r0
     95a:	f1 82       	std	Z+1, r15	; 0x01
     95c:	e0 82       	st	Z, r14
     95e:	12 82       	std	Z+2, r1	; 0x02
    itoa(strlen(command),buffer,10);
     960:	f8 01       	movw	r30, r16
     962:	01 90       	ld	r0, Z+
     964:	00 20       	and	r0, r0
     966:	e9 f7       	brne	.-6      	; 0x962 <ESP_Read+0x8c>
     968:	cf 01       	movw	r24, r30
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	4a e0       	ldi	r20, 0x0A	; 10
     96e:	be 01       	movw	r22, r28
     970:	69 51       	subi	r22, 0x19	; 25
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	80 1b       	sub	r24, r16
     976:	91 0b       	sbc	r25, r17
     978:	93 d5       	rcall	.+2854   	; 0x14a0 <__itoa_ncheck>
    strcpy(command_length,MESSAGE_LENGTH);
     97a:	08 53       	subi	r16, 0x38	; 56
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	8c e0       	ldi	r24, 0x0C	; 12
     980:	ed e3       	ldi	r30, 0x3D	; 61
     982:	f2 e0       	ldi	r31, 0x02	; 2
     984:	d8 01       	movw	r26, r16
     986:	01 90       	ld	r0, Z+
     988:	0d 92       	st	X+, r0
     98a:	8a 95       	dec	r24
     98c:	e1 f7       	brne	.-8      	; 0x986 <ESP_Read+0xb0>
    strcat(command_length,buffer);
     98e:	be 01       	movw	r22, r28
     990:	69 51       	subi	r22, 0x19	; 25
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	c8 01       	movw	r24, r16
     996:	5f d5       	rcall	.+2750   	; 0x1456 <strcat>
    strcat(command_length,"\r\n");
     998:	f8 01       	movw	r30, r16
     99a:	01 90       	ld	r0, Z+
     99c:	00 20       	and	r0, r0
     99e:	e9 f7       	brne	.-6      	; 0x99a <ESP_Read+0xc4>
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	f1 82       	std	Z+1, r15	; 0x01

    circularQueue_clearBuffer();
     9a4:	e0 82       	st	Z, r14
     9a6:	12 82       	std	Z+2, r1	; 0x02
    UART_string_tx(TCP_THINGSPEAK);
     9a8:	e1 db       	rcall	.-2110   	; 0x16c <circularQueue_clearBuffer>
     9aa:	89 e4       	ldi	r24, 0x49	; 73
     9ac:	92 e0       	ldi	r25, 0x02	; 2
    while(circularQueue_isEmpty() == TRUE);
     9ae:	ac d3       	rcall	.+1880   	; 0x1108 <UART_string_tx>
     9b0:	ca db       	rcall	.-2156   	; 0x146 <circularQueue_isEmpty>
     9b2:	81 30       	cpi	r24, 0x01	; 1
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE  && circularQueue_searchSubStringInQueue("OK") == FALSE);
     9b4:	e9 f3       	breq	.-6      	; 0x9b0 <ESP_Read+0xda>
     9b6:	82 e7       	ldi	r24, 0x72	; 114
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	e5 db       	rcall	.-2102   	; 0x186 <circularQueue_searchSubStringInQueue>
     9bc:	81 11       	cpse	r24, r1
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <ESP_Read+0xf4>
     9c0:	88 e7       	ldi	r24, 0x78	; 120
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	e0 db       	rcall	.-2112   	; 0x186 <circularQueue_searchSubStringInQueue>
     9c6:	88 23       	and	r24, r24
    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     9c8:	b1 f3       	breq	.-20     	; 0x9b6 <ESP_Read+0xe0>
     9ca:	82 e7       	ldi	r24, 0x72	; 114
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	db db       	rcall	.-2122   	; 0x186 <circularQueue_searchSubStringInQueue>
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	59 f4       	brne	.+22     	; 0x9ea <ESP_Read+0x114>
        {
            circularQueue_clearBuffer();
     9d4:	cb db       	rcall	.-2154   	; 0x16c <circularQueue_clearBuffer>
     9d6:	ff ef       	ldi	r31, 0xFF	; 255
     9d8:	23 ed       	ldi	r18, 0xD3	; 211
     9da:	80 e3       	ldi	r24, 0x30	; 48
     9dc:	f1 50       	subi	r31, 0x01	; 1
     9de:	20 40       	sbci	r18, 0x00	; 0
     9e0:	80 40       	sbci	r24, 0x00	; 0
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <ESP_Read+0x106>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <ESP_Read+0x110>
     9e6:	00 00       	nop
     9e8:	71 c0       	rjmp	.+226    	; 0xacc <ESP_Read+0x1f6>
     9ea:	9f ef       	ldi	r25, 0xFF	; 255
     9ec:	e9 ef       	ldi	r30, 0xF9	; 249
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	91 50       	subi	r25, 0x01	; 1
     9f2:	e0 40       	sbci	r30, 0x00	; 0
     9f4:	f0 40       	sbci	r31, 0x00	; 0
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <ESP_Read+0x11a>
            return;

        }

    _delay_ms(20);
    circularQueue_clearBuffer();
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <ESP_Read+0x124>
     9fa:	00 00       	nop
    UART_string_tx(command_length);
     9fc:	b7 db       	rcall	.-2194   	; 0x16c <circularQueue_clearBuffer>
     9fe:	ce 01       	movw	r24, r28
     a00:	87 53       	subi	r24, 0x37	; 55
     a02:	9f 4f       	sbci	r25, 0xFF	; 255
    while(circularQueue_isEmpty() == TRUE);
     a04:	81 d3       	rcall	.+1794   	; 0x1108 <UART_string_tx>
     a06:	9f db       	rcall	.-2242   	; 0x146 <circularQueue_isEmpty>
     a08:	81 30       	cpi	r24, 0x01	; 1
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE && circularQueue_searchSubStringInQueue("OK") == FALSE && circularQueue_searchSubStringInQueue("FAIL") == FALSE);
     a0a:	e9 f3       	breq	.-6      	; 0xa06 <ESP_Read+0x130>
     a0c:	82 e7       	ldi	r24, 0x72	; 114
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	ba db       	rcall	.-2188   	; 0x186 <circularQueue_searchSubStringInQueue>
     a12:	81 11       	cpse	r24, r1
     a14:	0a c0       	rjmp	.+20     	; 0xa2a <ESP_Read+0x154>
     a16:	88 e7       	ldi	r24, 0x78	; 120
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	b5 db       	rcall	.-2198   	; 0x186 <circularQueue_searchSubStringInQueue>
     a1c:	81 11       	cpse	r24, r1
     a1e:	05 c0       	rjmp	.+10     	; 0xa2a <ESP_Read+0x154>
     a20:	8b e7       	ldi	r24, 0x7B	; 123
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	b0 db       	rcall	.-2208   	; 0x186 <circularQueue_searchSubStringInQueue>
     a26:	88 23       	and	r24, r24
     a28:	89 f3       	breq	.-30     	; 0xa0c <ESP_Read+0x136>
	 wdt_reset();
     a2a:	a8 95       	wdr
    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE || circularQueue_searchSubStringInQueue("FAIL") == TRUE)
     a2c:	82 e7       	ldi	r24, 0x72	; 114
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	aa db       	rcall	.-2220   	; 0x186 <circularQueue_searchSubStringInQueue>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	29 f0       	breq	.+10     	; 0xa40 <ESP_Read+0x16a>
     a36:	8b e7       	ldi	r24, 0x7B	; 123
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	a5 db       	rcall	.-2230   	; 0x186 <circularQueue_searchSubStringInQueue>
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	59 f4       	brne	.+22     	; 0xa56 <ESP_Read+0x180>
     a40:	95 db       	rcall	.-2262   	; 0x16c <circularQueue_clearBuffer>
     a42:	2f ef       	ldi	r18, 0xFF	; 255
        {
            circularQueue_clearBuffer();
     a44:	83 ed       	ldi	r24, 0xD3	; 211
     a46:	90 e3       	ldi	r25, 0x30	; 48
     a48:	21 50       	subi	r18, 0x01	; 1
     a4a:	80 40       	sbci	r24, 0x00	; 0
     a4c:	90 40       	sbci	r25, 0x00	; 0
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <ESP_Read+0x172>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <ESP_Read+0x17c>
     a52:	00 00       	nop
     a54:	3b c0       	rjmp	.+118    	; 0xacc <ESP_Read+0x1f6>
     a56:	ef ef       	ldi	r30, 0xFF	; 255
     a58:	f9 ef       	ldi	r31, 0xF9	; 249
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	e1 50       	subi	r30, 0x01	; 1
     a5e:	f0 40       	sbci	r31, 0x00	; 0
     a60:	20 40       	sbci	r18, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <ESP_Read+0x186>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <ESP_Read+0x190>
     a66:	00 00       	nop
            return;

        }

    _delay_ms(20);
	 wdt_reset();
     a68:	a8 95       	wdr
    if (circularQueue_searchSubStringInQueue("OK") == TRUE)
     a6a:	88 e7       	ldi	r24, 0x78	; 120
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	8b db       	rcall	.-2282   	; 0x186 <circularQueue_searchSubStringInQueue>
     a70:	81 30       	cpi	r24, 0x01	; 1
        {
            while(circularQueue_searchSubStringInQueue(">") == FALSE);
     a72:	11 f5       	brne	.+68     	; 0xab8 <ESP_Read+0x1e2>
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	86 db       	rcall	.-2292   	; 0x186 <circularQueue_searchSubStringInQueue>
     a7a:	88 23       	and	r24, r24
     a7c:	d9 f3       	breq	.-10     	; 0xa74 <ESP_Read+0x19e>
            circularQueue_clearBuffer();
     a7e:	76 db       	rcall	.-2324   	; 0x16c <circularQueue_clearBuffer>
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	90 e7       	ldi	r25, 0x70	; 112
     a84:	e2 e0       	ldi	r30, 0x02	; 2
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	90 40       	sbci	r25, 0x00	; 0
     a8a:	e0 40       	sbci	r30, 0x00	; 0
            _delay_ms(50);

            UART_string_tx(command);
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <ESP_Read+0x1b0>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <ESP_Read+0x1ba>
     a90:	00 00       	nop
     a92:	ce 01       	movw	r24, r28
            while(circularQueue_searchSubStringInQueue("CLOSED") == FALSE);
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	38 d3       	rcall	.+1648   	; 0x1108 <UART_string_tx>
     a98:	8b ee       	ldi	r24, 0xEB	; 235
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	74 db       	rcall	.-2328   	; 0x186 <circularQueue_searchSubStringInQueue>
     a9e:	88 23       	and	r24, r24
     aa0:	d9 f3       	breq	.-10     	; 0xa98 <ESP_Read+0x1c2>
     aa2:	8f e1       	ldi	r24, 0x1F	; 31
     aa4:	9e e4       	ldi	r25, 0x4E	; 78
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <ESP_Read+0x1d0>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <ESP_Read+0x1d6>
            _delay_ms(5);
            data=circularQueue_bufferPointer();
     aac:	00 00       	nop
     aae:	76 db       	rcall	.-2324   	; 0x19c <circularQueue_bufferPointer>
            jasonParser(data,numberOfFields,Jdata);
     ab0:	a6 01       	movw	r20, r12
     ab2:	6b 2d       	mov	r22, r11
     ab4:	8c de       	rcall	.-744    	; 0x7ce <jasonParser>
     ab6:	5a db       	rcall	.-2380   	; 0x16c <circularQueue_clearBuffer>
            circularQueue_clearBuffer();
     ab8:	59 db       	rcall	.-2382   	; 0x16c <circularQueue_clearBuffer>
     aba:	9f ef       	ldi	r25, 0xFF	; 255
        }

    circularQueue_clearBuffer();
     abc:	e3 ed       	ldi	r30, 0xD3	; 211
     abe:	f0 e3       	ldi	r31, 0x30	; 48
     ac0:	91 50       	subi	r25, 0x01	; 1
     ac2:	e0 40       	sbci	r30, 0x00	; 0
     ac4:	f0 40       	sbci	r31, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <ESP_Read+0x1ea>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <ESP_Read+0x1f4>
     aca:	00 00       	nop
     acc:	c5 51       	subi	r28, 0x15	; 21
     ace:	df 4f       	sbci	r29, 0xFF	; 255
     ad0:	0f b6       	in	r0, 0x3f	; 63
    _delay_ms(1000);
}
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	9f 90       	pop	r9
     aee:	8f 90       	pop	r8
     af0:	08 95       	ret

00000af2 <relayModuleControl_Sol>:
        }

}
#endif
void relayModuleControl_Sol(Json * Jdata)
{
     af2:	fc 01       	movw	r30, r24
    if(Jdata->field1 == 0)
     af4:	81 81       	ldd	r24, Z+1	; 0x01
     af6:	81 11       	cpse	r24, r1
     af8:	02 c0       	rjmp	.+4      	; 0xafe <relayModuleControl_Sol+0xc>
        {
            SOL_1_OFF;
     afa:	a2 98       	cbi	0x14, 2	; 20
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <relayModuleControl_Sol+0xe>
        }
    else
        {
            SOL_1_ON
     afe:	a2 9a       	sbi	0x14, 2	; 20
        }


    if(Jdata->field2 == 0)
     b00:	82 81       	ldd	r24, Z+2	; 0x02
     b02:	81 11       	cpse	r24, r1
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <relayModuleControl_Sol+0x18>
        {
            SOL_2_OFF;
     b06:	a0 98       	cbi	0x14, 0	; 20
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <relayModuleControl_Sol+0x1a>
        }
    else
        {
            SOL_2_ON
     b0a:	a0 9a       	sbi	0x14, 0	; 20
        }
    if(Jdata->field3 == 0)
     b0c:	83 81       	ldd	r24, Z+3	; 0x03
     b0e:	81 11       	cpse	r24, r1
     b10:	06 c0       	rjmp	.+12     	; 0xb1e <relayModuleControl_Sol+0x2c>
        {
            SOL_3_OFF;
     b12:	ab e0       	ldi	r26, 0x0B	; 11
     b14:	b1 e0       	ldi	r27, 0x01	; 1
     b16:	8c 91       	ld	r24, X
     b18:	8f 7b       	andi	r24, 0xBF	; 191
     b1a:	8c 93       	st	X, r24
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <relayModuleControl_Sol+0x36>
        }
    else
        {
            SOL_3_ON
     b1e:	ab e0       	ldi	r26, 0x0B	; 11
     b20:	b1 e0       	ldi	r27, 0x01	; 1
     b22:	8c 91       	ld	r24, X
     b24:	80 64       	ori	r24, 0x40	; 64
     b26:	8c 93       	st	X, r24
        }
    if(Jdata->field4 == 0)
     b28:	84 81       	ldd	r24, Z+4	; 0x04
     b2a:	81 11       	cpse	r24, r1
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <relayModuleControl_Sol+0x48>
        {
            SOL_4_OFF;
     b2e:	eb e0       	ldi	r30, 0x0B	; 11
     b30:	f1 e0       	ldi	r31, 0x01	; 1
     b32:	80 81       	ld	r24, Z
     b34:	8f 7e       	andi	r24, 0xEF	; 239
     b36:	80 83       	st	Z, r24
     b38:	08 95       	ret
        }
    else
        {
            SOL_4_ON
     b3a:	eb e0       	ldi	r30, 0x0B	; 11
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	80 81       	ld	r24, Z
     b40:	80 61       	ori	r24, 0x10	; 16
     b42:	80 83       	st	Z, r24
     b44:	08 95       	ret

00000b46 <GPOIcontrol_FVLM>:

}

/*Fan Ventilation Light Med*/
void GPOIcontrol_FVLM(struct Json * Jdata)
{
     b46:	fc 01       	movw	r30, r24
	if(Jdata->field1 == 0)
     b48:	81 81       	ldd	r24, Z+1	; 0x01
     b4a:	81 11       	cpse	r24, r1
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <GPOIcontrol_FVLM+0x14>
	{
		FLYMED_OFF;
     b4e:	ab e0       	ldi	r26, 0x0B	; 11
     b50:	b1 e0       	ldi	r27, 0x01	; 1
     b52:	8c 91       	ld	r24, X
     b54:	84 60       	ori	r24, 0x04	; 4
     b56:	8c 93       	st	X, r24
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <GPOIcontrol_FVLM+0x1e>
	}
	else
	{
		FLYMED_ON;
     b5a:	ab e0       	ldi	r26, 0x0B	; 11
     b5c:	b1 e0       	ldi	r27, 0x01	; 1
     b5e:	8c 91       	ld	r24, X
     b60:	8b 7f       	andi	r24, 0xFB	; 251
     b62:	8c 93       	st	X, r24
	}


	if(Jdata->field2 == 0)
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	81 11       	cpse	r24, r1
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <GPOIcontrol_FVLM+0x30>
	{
		VENTILATION_OFF;
     b6a:	ab e0       	ldi	r26, 0x0B	; 11
     b6c:	b1 e0       	ldi	r27, 0x01	; 1
     b6e:	8c 91       	ld	r24, X
     b70:	81 60       	ori	r24, 0x01	; 1
     b72:	8c 93       	st	X, r24
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <GPOIcontrol_FVLM+0x3a>
	}
	else
	{
		VENTILATION_ON;
     b76:	ab e0       	ldi	r26, 0x0B	; 11
     b78:	b1 e0       	ldi	r27, 0x01	; 1
     b7a:	8c 91       	ld	r24, X
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	8c 93       	st	X, r24
	}
	if(Jdata->field3 == 0)
     b80:	83 81       	ldd	r24, Z+3	; 0x03
     b82:	81 11       	cpse	r24, r1
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <GPOIcontrol_FVLM+0x44>
	{
		LIGHT_1_OFF;
     b86:	2a 9a       	sbi	0x05, 2	; 5
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <GPOIcontrol_FVLM+0x46>
	}
	else
	{
		LIGHT_1_ON;
     b8a:	2a 98       	cbi	0x05, 2	; 5
	}
	if(Jdata->field4 == 0)
     b8c:	84 81       	ldd	r24, Z+4	; 0x04
     b8e:	81 11       	cpse	r24, r1
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <GPOIcontrol_FVLM+0x50>
	{
		LIGHT_2_OFF;
     b92:	28 9a       	sbi	0x05, 0	; 5
     b94:	08 95       	ret
	}
	else
	{
		LIGHT_2_ON;
     b96:	28 98       	cbi	0x05, 0	; 5
     b98:	08 95       	ret

00000b9a <GPIO_init>:

}

void GPIO_init(void)
{
	 DDR_FLYMED_CONFIG;
     b9a:	ea e0       	ldi	r30, 0x0A	; 10
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	80 81       	ld	r24, Z
     ba0:	84 60       	ori	r24, 0x04	; 4
     ba2:	80 83       	st	Z, r24
	 DDR_LIGHT_1_CONFIG;
     ba4:	22 9a       	sbi	0x04, 2	; 4
	 DDR_VENTILATION_CONFIG;
     ba6:	80 81       	ld	r24, Z
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 83       	st	Z, r24
	 
	 DDR_SOL_1_CONFIG;
     bac:	9a 9a       	sbi	0x13, 2	; 19
	 DDR_SOL_2_CONFIG;
     bae:	98 9a       	sbi	0x13, 0	; 19
	 DDR_SOL_3_CONFIG;
     bb0:	80 81       	ld	r24, Z
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	80 83       	st	Z, r24
	 DDR_SOL_4_CONFIG;
     bb6:	80 81       	ld	r24, Z
     bb8:	80 61       	ori	r24, 0x10	; 16
     bba:	80 83       	st	Z, r24
	 
	 SOL_1_OFF;
     bbc:	a2 98       	cbi	0x14, 2	; 20
	 SOL_2_OFF;
     bbe:	a0 98       	cbi	0x14, 0	; 20
	 SOL_3_OFF;
     bc0:	eb e0       	ldi	r30, 0x0B	; 11
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	80 81       	ld	r24, Z
     bc6:	8f 7b       	andi	r24, 0xBF	; 191
     bc8:	80 83       	st	Z, r24
	 SOL_4_OFF;
     bca:	80 81       	ld	r24, Z
     bcc:	8f 7e       	andi	r24, 0xEF	; 239
     bce:	80 83       	st	Z, r24
	 
	 FLYMED_OFF;
     bd0:	80 81       	ld	r24, Z
     bd2:	84 60       	ori	r24, 0x04	; 4
     bd4:	80 83       	st	Z, r24
	 LIGHT_1_ON;
     bd6:	2a 98       	cbi	0x05, 2	; 5
	 VENTILATION_OFF;
     bd8:	80 81       	ld	r24, Z
     bda:	81 60       	ori	r24, 0x01	; 1
     bdc:	80 83       	st	Z, r24
	 LIGHT_2_OFF;
     bde:	28 9a       	sbi	0x05, 0	; 5
     be0:	08 95       	ret

00000be2 <main>:


extern volatile unsigned char oneSec;

int main(void)
{
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	29 97       	sbiw	r28, 0x09	; 9
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
	unsigned char oldTime = 0;
	unsigned char sec_5 = 0;
	unsigned char sec_3 = 0u;
	uint8_t sec_4 = 0u;
	uint8_t sec_10 = 0u;
	Json Jdata = {0};
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	7c 01       	movw	r14, r24
     bfc:	89 e0       	ldi	r24, 0x09	; 9
     bfe:	f7 01       	movw	r30, r14
     c00:	11 92       	st	Z+, r1
     c02:	8a 95       	dec	r24
     c04:	e9 f7       	brne	.-6      	; 0xc00 <main+0x1e>
	
	motorDriver_Config();
     c06:	2c d1       	rcall	.+600    	; 0xe60 <motorDriver_Config>
	GPIO_init();
     c08:	c8 df       	rcall	.-112    	; 0xb9a <GPIO_init>
	
	timer1_init();
     c0a:	f5 d1       	rcall	.+1002   	; 0xff6 <timer1_init>
	timer0_init();
     c0c:	05 d2       	rcall	.+1034   	; 0x1018 <timer0_init>
     c0e:	64 d2       	rcall	.+1224   	; 0x10d8 <UART_int>
	UART_int();
     c10:	bc d2       	rcall	.+1400   	; 0x118a <usound_init>
     c12:	8f e1       	ldi	r24, 0x1F	; 31
	usound_init();
     c14:	9e e4       	ldi	r25, 0x4E	; 78
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <main+0x34>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <main+0x3a>
     c1c:	00 00       	nop
     c1e:	f8 94       	cli
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	e3 ed       	ldi	r30, 0xD3	; 211

	
	_delay_ms(5);

	cli();
     c24:	f0 e3       	ldi	r31, 0x30	; 48
     c26:	91 50       	subi	r25, 0x01	; 1
     c28:	e0 40       	sbci	r30, 0x00	; 0
     c2a:	f0 40       	sbci	r31, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0x44>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <main+0x4e>
     c30:	00 00       	nop
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	83 ed       	ldi	r24, 0xD3	; 211
     c36:	90 e3       	ldi	r25, 0x30	; 48
     c38:	21 50       	subi	r18, 0x01	; 1
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	90 40       	sbci	r25, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <main+0x56>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <main+0x60>
     c42:	00 00       	nop
     c44:	ef ef       	ldi	r30, 0xFF	; 255
     c46:	f3 ed       	ldi	r31, 0xD3	; 211
     c48:	20 e3       	ldi	r18, 0x30	; 48
     c4a:	e1 50       	subi	r30, 0x01	; 1
     c4c:	f0 40       	sbci	r31, 0x00	; 0
     c4e:	20 40       	sbci	r18, 0x00	; 0
     c50:	e1 f7       	brne	.-8      	; 0xc4a <main+0x68>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <main+0x72>
     c54:	00 00       	nop
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	93 ed       	ldi	r25, 0xD3	; 211
     c5a:	e0 e3       	ldi	r30, 0x30	; 48
     c5c:	81 50       	subi	r24, 0x01	; 1
     c5e:	90 40       	sbci	r25, 0x00	; 0
     c60:	e0 40       	sbci	r30, 0x00	; 0
     c62:	e1 f7       	brne	.-8      	; 0xc5c <main+0x7a>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <main+0x84>
     c66:	00 00       	nop
     c68:	ff ef       	ldi	r31, 0xFF	; 255
     c6a:	23 ed       	ldi	r18, 0xD3	; 211
     c6c:	80 e3       	ldi	r24, 0x30	; 48
     c6e:	f1 50       	subi	r31, 0x01	; 1
     c70:	20 40       	sbci	r18, 0x00	; 0
     c72:	80 40       	sbci	r24, 0x00	; 0
     c74:	e1 f7       	brne	.-8      	; 0xc6e <main+0x8c>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <main+0x96>
     c78:	00 00       	nop
     c7a:	10 91 66 03 	lds	r17, 0x0366	; 0x800366 <oneSec>
     c7e:	78 94       	sei
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	oldTime = oneSec;
     c80:	99 e2       	ldi	r25, 0x29	; 41
     c82:	88 e1       	ldi	r24, 0x18	; 24
	
	
	sei();
     c84:	0f b6       	in	r0, 0x3f	; 63
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     c86:	f8 94       	cli
     c88:	a8 95       	wdr
     c8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c94:	a8 95       	wdr
     c96:	28 e0       	ldi	r18, 0x08	; 8
     c98:	41 e0       	ldi	r20, 0x01	; 1
	wdt_enable(WDTO_8S);
	wdt_reset();
	/*Set Injection channel: */
	ESP_write_Fields(&Jdata,INJECTION_WRITE_APIKEY,1,8);
     c9a:	62 ef       	ldi	r22, 0xF2	; 242
     c9c:	72 e0       	ldi	r23, 0x02	; 2
     c9e:	c7 01       	movw	r24, r14
     ca0:	a6 db       	rcall	.-2228   	; 0x3ee <ESP_write_Fields>
     ca2:	e1 2c       	mov	r14, r1
     ca4:	f1 2c       	mov	r15, r1
     ca6:	00 e0       	ldi	r16, 0x00	; 0
	
	unsigned char oldTime = 0;
	unsigned char sec_5 = 0;
	unsigned char sec_3 = 0u;
	uint8_t sec_4 = 0u;
	uint8_t sec_10 = 0u;
     ca8:	a8 95       	wdr
{
	
	unsigned char oldTime = 0;
	unsigned char sec_5 = 0;
	unsigned char sec_3 = 0u;
	uint8_t sec_4 = 0u;
     caa:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <oneSec>
		

		


		wdt_reset();
     cae:	81 17       	cp	r24, r17
		

		if(oneSec != oldTime)
     cb0:	d9 f3       	breq	.-10     	; 0xca8 <main+0xc6>
     cb2:	10 91 66 03 	lds	r17, 0x0366	; 0x800366 <oneSec>
		{
			oldTime = oneSec;
     cb6:	05 30       	cpi	r16, 0x05	; 5
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <main+0xde>
			
			
			
			

			if(sec_5 == 5u)
     cba:	f8 d0       	rcall	.+496    	; 0xeac <task_5sec>
     cbc:	00 e0       	ldi	r16, 0x00	; 0
			{
				  task_5sec();
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <main+0xe0>
				sec_5 = 0;
     cc0:	0f 5f       	subi	r16, 0xFF	; 255
     cc2:	9a e0       	ldi	r25, 0x0A	; 10
			}
			else
			{
				sec_5++;
     cc4:	e9 12       	cpse	r14, r25
			}

			if(sec_10 == 10u)
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <main+0xec>
     cc8:	95 d1       	rcall	.+810    	; 0xff4 <task_10sec>

			{
				 task_10sec();
     cca:	e1 2c       	mov	r14, r1
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <main+0xee>
				sec_10=0u;
     cce:	e3 94       	inc	r14
     cd0:	e4 e0       	ldi	r30, 0x04	; 4
			}

			else
			{

				sec_10++;
     cd2:	fe 12       	cpse	r15, r30

			}



			if(sec_4 == 4u)
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <main+0xfa>
     cd6:	35 d1       	rcall	.+618    	; 0xf42 <task_4Sec>
     cd8:	f1 2c       	mov	r15, r1
			{
				task_4Sec();
     cda:	e6 cf       	rjmp	.-52     	; 0xca8 <main+0xc6>
     cdc:	f3 94       	inc	r15
				sec_4 = 0;
     cde:	e4 cf       	rjmp	.-56     	; 0xca8 <main+0xc6>

00000ce0 <motorDriver_Med>:
     ce0:	ff 92       	push	r15
			}
			else
			{
				sec_4++;
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
#include "motorDriver.h"

extern volatile uint16_t number_of_rotation;
volatile uint8_t Medicine;
void motorDriver_Med(struct Json * Jdata)
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	29 97       	sbiw	r28, 0x09	; 9
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	8c 01       	movw	r16, r24

	int8_t data;
	Json JRest={0};
     cfc:	fe 01       	movw	r30, r28
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	df 01       	movw	r26, r30
     d04:	1d 92       	st	X+, r1
     d06:	8a 95       	dec	r24
     d08:	e9 f7       	brne	.-6      	; 0xd04 <motorDriver_Med+0x24>

	
	

	if(Jdata->field2 != 0u)
     d0a:	f8 01       	movw	r30, r16
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <motorDriver_Med+0x34>
     d12:	4d c0       	rjmp	.+154    	; 0xdae <motorDriver_Med+0xce>
	{
		
		data = (int8_t)(Jdata->field1);
     d14:	f1 80       	ldd	r15, Z+1	; 0x01
		ESP_write_Fields(&JRest,INJECTION_WRITE_APIKEY,1,8);
     d16:	28 e0       	ldi	r18, 0x08	; 8
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	62 ef       	ldi	r22, 0xF2	; 242
     d1c:	72 e0       	ldi	r23, 0x02	; 2
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	65 db       	rcall	.-2358   	; 0x3ee <ESP_write_Fields>
		if(data < 0)
     d24:	ff 20       	and	r15, r15
     d26:	14 f5       	brge	.+68     	; 0xd6c <motorDriver_Med+0x8c>
		{
			MED_1_ACW;
     d28:	e2 e0       	ldi	r30, 0x02	; 2
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	80 81       	ld	r24, Z
     d2e:	80 62       	ori	r24, 0x20	; 32
     d30:	80 83       	st	Z, r24
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     d32:	8f 2d       	mov	r24, r15
     d34:	ff 0c       	add	r15, r15
     d36:	99 0b       	sbc	r25, r25
     d38:	99 23       	and	r25, r25
     d3a:	1c f4       	brge	.+6      	; 0xd42 <motorDriver_Med+0x62>
     d3c:	91 95       	neg	r25
     d3e:	81 95       	neg	r24
     d40:	91 09       	sbc	r25, r1
     d42:	40 e9       	ldi	r20, 0x90	; 144
     d44:	51 e0       	ldi	r21, 0x01	; 1
     d46:	84 9f       	mul	r24, r20
     d48:	90 01       	movw	r18, r0
     d4a:	85 9f       	mul	r24, r21
     d4c:	30 0d       	add	r19, r0
     d4e:	11 24       	eor	r1, r1
     d50:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <number_of_rotation+0x1>
     d54:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <number_of_rotation>
			Medicine=1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <Medicine>
			A4899_EN;
     d5e:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     d60:	ee e6       	ldi	r30, 0x6E	; 110
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	80 83       	st	Z, r24
     d6a:	21 c0       	rjmp	.+66     	; 0xdae <motorDriver_Med+0xce>
		}

		else
		{
			MED_1_CW;
     d6c:	e2 e0       	ldi	r30, 0x02	; 2
     d6e:	f1 e0       	ldi	r31, 0x01	; 1
     d70:	80 81       	ld	r24, Z
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	80 83       	st	Z, r24
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     d76:	8f 2d       	mov	r24, r15
     d78:	ff 0c       	add	r15, r15
     d7a:	99 0b       	sbc	r25, r25
     d7c:	99 23       	and	r25, r25
     d7e:	1c f4       	brge	.+6      	; 0xd86 <motorDriver_Med+0xa6>
     d80:	91 95       	neg	r25
     d82:	81 95       	neg	r24
     d84:	91 09       	sbc	r25, r1
     d86:	40 e9       	ldi	r20, 0x90	; 144
     d88:	51 e0       	ldi	r21, 0x01	; 1
     d8a:	84 9f       	mul	r24, r20
     d8c:	90 01       	movw	r18, r0
     d8e:	85 9f       	mul	r24, r21
     d90:	30 0d       	add	r19, r0
     d92:	11 24       	eor	r1, r1
     d94:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <number_of_rotation+0x1>
     d98:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <number_of_rotation>
			Medicine=1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <Medicine>
			A4899_EN;
     da2:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     da4:	ee e6       	ldi	r30, 0x6E	; 110
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	80 83       	st	Z, r24
	{

	}


	if(Jdata->field4 != 0u)
     dae:	d8 01       	movw	r26, r16
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8c 91       	ld	r24, X
     db4:	14 97       	sbiw	r26, 0x04	; 4
     db6:	88 23       	and	r24, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <motorDriver_Med+0xdc>
     dba:	46 c0       	rjmp	.+140    	; 0xe48 <motorDriver_Med+0x168>
	{
		
		data = (int8_t)(Jdata->field3);
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	1c 91       	ld	r17, X
		ESP_write_Fields(&JRest,INJECTION_WRITE_APIKEY,1,8);
     dc0:	28 e0       	ldi	r18, 0x08	; 8
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	62 ef       	ldi	r22, 0xF2	; 242
     dc6:	72 e0       	ldi	r23, 0x02	; 2
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	10 db       	rcall	.-2528   	; 0x3ee <ESP_write_Fields>
		if(data < 0)
     dce:	11 23       	and	r17, r17
     dd0:	f4 f4       	brge	.+60     	; 0xe0e <motorDriver_Med+0x12e>
		{
			MED_2_ACW;
     dd2:	74 9a       	sbi	0x0e, 4	; 14
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     dd4:	81 2f       	mov	r24, r17
     dd6:	11 0f       	add	r17, r17
     dd8:	99 0b       	sbc	r25, r25
     dda:	99 23       	and	r25, r25
     ddc:	1c f4       	brge	.+6      	; 0xde4 <motorDriver_Med+0x104>
     dde:	91 95       	neg	r25
     de0:	81 95       	neg	r24
     de2:	91 09       	sbc	r25, r1
     de4:	40 e9       	ldi	r20, 0x90	; 144
     de6:	51 e0       	ldi	r21, 0x01	; 1
     de8:	84 9f       	mul	r24, r20
     dea:	90 01       	movw	r18, r0
     dec:	85 9f       	mul	r24, r21
     dee:	30 0d       	add	r19, r0
     df0:	11 24       	eor	r1, r1
     df2:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <number_of_rotation+0x1>
     df6:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <number_of_rotation>
			Medicine=2;
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <Medicine>
			A4899_EN;
     e00:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     e02:	ee e6       	ldi	r30, 0x6E	; 110
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	80 83       	st	Z, r24
     e0c:	1d c0       	rjmp	.+58     	; 0xe48 <motorDriver_Med+0x168>
		}

		else
		{
			MED_2_CW;
     e0e:	74 98       	cbi	0x0e, 4	; 14
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     e10:	81 2f       	mov	r24, r17
     e12:	11 0f       	add	r17, r17
     e14:	99 0b       	sbc	r25, r25
     e16:	99 23       	and	r25, r25
     e18:	1c f4       	brge	.+6      	; 0xe20 <motorDriver_Med+0x140>
     e1a:	91 95       	neg	r25
     e1c:	81 95       	neg	r24
     e1e:	91 09       	sbc	r25, r1
     e20:	40 e9       	ldi	r20, 0x90	; 144
     e22:	51 e0       	ldi	r21, 0x01	; 1
     e24:	84 9f       	mul	r24, r20
     e26:	90 01       	movw	r18, r0
     e28:	85 9f       	mul	r24, r21
     e2a:	30 0d       	add	r19, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <number_of_rotation+0x1>
     e32:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <number_of_rotation>
			Medicine=2;
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <Medicine>
			A4899_EN;
     e3c:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     e3e:	ee e6       	ldi	r30, 0x6E	; 110
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	80 83       	st	Z, r24
	{

	}


}
     e48:	29 96       	adiw	r28, 0x09	; 9
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	08 95       	ret

00000e60 <motorDriver_Config>:


void motorDriver_Config(void)
{
	DDR_MED_1_DIR_CONFIG;
     e60:	e1 e0       	ldi	r30, 0x01	; 1
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	80 81       	ld	r24, Z
     e66:	80 62       	ori	r24, 0x20	; 32
     e68:	80 83       	st	Z, r24
	DDR_MED_1_STEP_CONFIG;
     e6a:	80 81       	ld	r24, Z
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	80 83       	st	Z, r24
	DDR_MED_2_DIR_CONFIG;
     e70:	6c 9a       	sbi	0x0d, 4	; 13
	DDR_MED_2_STEP_CONFIG;
     e72:	6d 9a       	sbi	0x0d, 5	; 13
	DDR_MED_3_DIR_CONFIG;
     e74:	9d 9a       	sbi	0x13, 5	; 19
	DDR_MED_3_STEP_CONFIG;
     e76:	6b 9a       	sbi	0x0d, 3	; 13
	DDR_MED_4_DIR_CONFIG;
     e78:	80 81       	ld	r24, Z
     e7a:	88 60       	ori	r24, 0x08	; 8
     e7c:	80 83       	st	Z, r24
	DDR_MED_4_STEP_CONFIG;
     e7e:	80 81       	ld	r24, Z
     e80:	80 61       	ori	r24, 0x10	; 16
     e82:	80 83       	st	Z, r24
	
	PORT_MED_1_DIR_CONFIG;
     e84:	80 81       	ld	r24, Z
     e86:	8f 7d       	andi	r24, 0xDF	; 223
     e88:	80 83       	st	Z, r24
	PORT_MED_1_STEP_CONFIG;
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	80 83       	st	Z, r24
	PORT_MED_2_DIR_CONFIG;
     e90:	6c 98       	cbi	0x0d, 4	; 13
	PORT_MED_2_STEP_CONFIG;
     e92:	6d 98       	cbi	0x0d, 5	; 13
	PORT_MED_3_DIR_CONFIG;
     e94:	9d 98       	cbi	0x13, 5	; 19
	PORT_MED_3_STEP_CONFIG;
     e96:	6b 98       	cbi	0x0d, 3	; 13
	PORT_MED_4_DIR_CONFIG;
     e98:	80 81       	ld	r24, Z
     e9a:	87 7f       	andi	r24, 0xF7	; 247
     e9c:	80 83       	st	Z, r24
	PORT_MED_4_STEP_CONFIG;
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7e       	andi	r24, 0xEF	; 239
     ea2:	80 83       	st	Z, r24
	
	DDR_A4899_CINFIG;
     ea4:	08 9a       	sbi	0x01, 0	; 1
	PORT_A4899_CINFIG;
     ea6:	10 9a       	sbi	0x02, 0	; 2
	A4899_DIS;
     ea8:	10 9a       	sbi	0x02, 0	; 2
     eaa:	08 95       	ret

00000eac <task_5sec>:
*/
#include "OS.h"
uint8_t manualflag = 0;

void task_5sec  (void)
{
     eac:	ef 92       	push	r14
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	29 97       	sbiw	r28, 0x09	; 9
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61

	Json Jdata = {0};
     ec6:	fe 01       	movw	r30, r28
     ec8:	31 96       	adiw	r30, 0x01	; 1
     eca:	89 e0       	ldi	r24, 0x09	; 9
     ecc:	df 01       	movw	r26, r30
     ece:	1d 92       	st	X+, r1
     ed0:	8a 95       	dec	r24
     ed2:	e9 f7       	brne	.-6      	; 0xece <task_5sec+0x22>
	int8_t flag=0;
	wdt_reset();
     ed4:	a8 95       	wdr
	cli();
     ed6:	f8 94       	cli
	flag=dht_getdata_dht_11(&temperature,&humidity,dht_2_DDRG,dht_2_PORTG,dht_2_PING,1);
     ed8:	ee 24       	eor	r14, r14
     eda:	e3 94       	inc	r14
     edc:	02 e1       	ldi	r16, 0x12	; 18
     ede:	10 e0       	ldi	r17, 0x00	; 0
     ee0:	24 e1       	ldi	r18, 0x14	; 20
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	43 e1       	ldi	r20, 0x13	; 19
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	62 e6       	ldi	r22, 0x62	; 98
     eea:	73 e0       	ldi	r23, 0x03	; 3
     eec:	83 e6       	ldi	r24, 0x63	; 99
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	58 d9       	rcall	.-3408   	; 0x1a2 <dht_getdata_dht_11>
	if(flag==0)
     ef2:	81 11       	cpse	r24, r1
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <task_5sec+0x56>
	{
		Jdata.field2=temperature;
     ef6:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <temperature>
     efa:	8b 83       	std	Y+3, r24	; 0x03
		Jdata.field3=humidity;
     efc:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <humidity>
	}
	
	
	waterLevel=readDistance();
     f00:	8c 83       	std	Y+4, r24	; 0x04
     f02:	46 d1       	rcall	.+652    	; 0x1190 <readDistance>
     f04:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <waterLevel>
     f08:	70 93 5f 03 	sts	0x035F, r23	; 0x80035f <waterLevel+0x1>
     f0c:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <waterLevel+0x2>
     f10:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <waterLevel+0x3>
	Jdata.field1=waterLevel;
     f14:	6a 83       	std	Y+2, r22	; 0x02
	sei();
     f16:	78 94       	sei
	wdt_reset();
     f18:	a8 95       	wdr
	ESP_write_Fields(&Jdata,SENORS_WRITE_APIKEY,1,3);
     f1a:	23 e0       	ldi	r18, 0x03	; 3
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	63 e0       	ldi	r22, 0x03	; 3
     f20:	73 e0       	ldi	r23, 0x03	; 3
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	63 da       	rcall	.-2874   	; 0x3ee <ESP_write_Fields>
	wdt_reset();
     f28:	a8 95       	wdr
	
}
     f2a:	29 96       	adiw	r28, 0x09	; 9
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ef 90       	pop	r14
     f40:	08 95       	ret

00000f42 <task_4Sec>:
void task_4Sec(void)
{
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	6b 97       	sbiw	r28, 0x1b	; 27
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
	

	 Json Jdata_Med={0};
     f62:	89 e0       	ldi	r24, 0x09	; 9
     f64:	9e 01       	movw	r18, r28
     f66:	2f 5f       	subi	r18, 0xFF	; 255
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	79 01       	movw	r14, r18
     f6c:	f9 01       	movw	r30, r18
     f6e:	28 2f       	mov	r18, r24
     f70:	11 92       	st	Z+, r1
     f72:	2a 95       	dec	r18
     f74:	e9 f7       	brne	.-6      	; 0xf70 <task_4Sec+0x2e>
	 Json Jdata_Sol={0};
     f76:	6e 01       	movw	r12, r28
     f78:	3a e0       	ldi	r19, 0x0A	; 10
     f7a:	c3 0e       	add	r12, r19
     f7c:	d1 1c       	adc	r13, r1
     f7e:	f6 01       	movw	r30, r12
     f80:	28 2f       	mov	r18, r24
     f82:	11 92       	st	Z+, r1
     f84:	2a 95       	dec	r18
     f86:	e9 f7       	brne	.-6      	; 0xf82 <task_4Sec+0x40>
	 Json Jdata_FVLM={0};	/*Fan_Ventilation_Light_Med*/
     f88:	8e 01       	movw	r16, r28
     f8a:	0d 5e       	subi	r16, 0xED	; 237
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	f8 01       	movw	r30, r16
     f90:	11 92       	st	Z+, r1
     f92:	8a 95       	dec	r24
     f94:	e9 f7       	brne	.-6      	; 0xf90 <task_4Sec+0x4e>
	
	
	wdt_reset();
     f96:	a8 95       	wdr
	
	
	/*Read data Solenoid valves data from thingspeak*/
	ESP_Read(&Jdata_Sol,SELONOID_CHANNEL_ID,SELONOID_READ_APIKEY,4);
     f98:	24 e0       	ldi	r18, 0x04	; 4
     f9a:	44 e1       	ldi	r20, 0x14	; 20
     f9c:	53 e0       	ldi	r21, 0x03	; 3
     f9e:	65 e2       	ldi	r22, 0x25	; 37
     fa0:	73 e0       	ldi	r23, 0x03	; 3
     fa2:	c6 01       	movw	r24, r12
     fa4:	98 dc       	rcall	.-1744   	; 0x8d6 <ESP_Read>
	relayModuleControl_Sol(&Jdata_Sol);
     fa6:	c6 01       	movw	r24, r12
     fa8:	a4 dd       	rcall	.-1208   	; 0xaf2 <relayModuleControl_Sol>
	wdt_reset();
     faa:	a8 95       	wdr
	/*Read data Injection data from thingspeak*/
	ESP_Read(&Jdata_Med,INJECTION_CHANNEL_ID,INJECTION_READ_APIKEY,8);
     fac:	28 e0       	ldi	r18, 0x08	; 8
     fae:	4c e2       	ldi	r20, 0x2C	; 44
     fb0:	53 e0       	ldi	r21, 0x03	; 3
     fb2:	6d e3       	ldi	r22, 0x3D	; 61
     fb4:	73 e0       	ldi	r23, 0x03	; 3
     fb6:	c7 01       	movw	r24, r14
	motorDriver_Med(&Jdata_Med);
     fb8:	8e dc       	rcall	.-1764   	; 0x8d6 <ESP_Read>
     fba:	c7 01       	movw	r24, r14
     fbc:	91 de       	rcall	.-734    	; 0xce0 <motorDriver_Med>
	wdt_reset();
     fbe:	a8 95       	wdr
	/*Read data FVLM data from thingspeak*/
	ESP_Read(&Jdata_FVLM,FAN_VENTILATION_CHANNEL_ID,FAN_VENTILATION_READ_APIKEY,4);
     fc0:	24 e0       	ldi	r18, 0x04	; 4
     fc2:	44 e4       	ldi	r20, 0x44	; 68
     fc4:	53 e0       	ldi	r21, 0x03	; 3
     fc6:	65 e5       	ldi	r22, 0x55	; 85
     fc8:	73 e0       	ldi	r23, 0x03	; 3
     fca:	c8 01       	movw	r24, r16
	GPOIcontrol_FVLM(&Jdata_FVLM);
     fcc:	84 dc       	rcall	.-1784   	; 0x8d6 <ESP_Read>
     fce:	c8 01       	movw	r24, r16
     fd0:	ba dd       	rcall	.-1164   	; 0xb46 <GPOIcontrol_FVLM>
	
	wdt_reset();
     fd2:	a8 95       	wdr
	sei();
     fd4:	78 94       	sei

	

}
     fd6:	6b 96       	adiw	r28, 0x1b	; 27
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	08 95       	ret

00000ff4 <task_10sec>:
void task_10sec (void)
{
     ff4:	08 95       	ret

00000ff6 <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
     ff6:	e1 e8       	ldi	r30, 0x81	; 129
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8d 60       	ori	r24, 0x0D	; 13
     ffe:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
    1000:	ef e6       	ldi	r30, 0x6F	; 111
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	83 60       	ori	r24, 0x03	; 3
    1008:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
    100a:	8d e3       	ldi	r24, 0x3D	; 61
    100c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
    1010:	89 e0       	ldi	r24, 0x09	; 9
    1012:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
    1016:	08 95       	ret

00001018 <timer0_init>:
}

void timer0_init(void)
{

	TCCR0A |= (1<<WGM01);
    1018:	84 b5       	in	r24, 0x24	; 36
    101a:	82 60       	ori	r24, 0x02	; 2
    101c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);// no Prescaler
    101e:	83 e0       	ldi	r24, 0x03	; 3
    1020:	85 bd       	out	0x25, r24	; 37
	OCR0A = 125;
    1022:	8d e7       	ldi	r24, 0x7D	; 125
    1024:	87 bd       	out	0x27, r24	; 39
    1026:	08 95       	ret

00001028 <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	8f 93       	push	r24
	
	
	oneSec ++;
    1034:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <oneSec>
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <oneSec>
	
	
}
    103e:	8f 91       	pop	r24
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <__vector_21>:

ISR (TIMER0_COMPA_vect)    // Timer0 ISR
{
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	0b b6       	in	r0, 0x3b	; 59
    1056:	0f 92       	push	r0
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31

	
	
	if(number_of_rotation == 0u)
    1060:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <number_of_rotation>
    1064:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <number_of_rotation+0x1>
    1068:	89 2b       	or	r24, r25
    106a:	39 f4       	brne	.+14     	; 0x107a <__vector_21+0x30>
	{
		
		A4899_DIS;
    106c:	10 9a       	sbi	0x02, 0	; 2
		TIMER0_INTER_DISABLE;
    106e:	ee e6       	ldi	r30, 0x6E	; 110
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8d 7f       	andi	r24, 0xFD	; 253
    1076:	80 83       	st	Z, r24
    1078:	24 c0       	rjmp	.+72     	; 0x10c2 <__vector_21+0x78>
		
	}
	else
	{
		switch(Medicine)
    107a:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <Medicine>
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	19 f0       	breq	.+6      	; 0x1088 <__vector_21+0x3e>
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	89 f0       	breq	.+34     	; 0x10a8 <__vector_21+0x5e>
    1086:	1d c0       	rjmp	.+58     	; 0x10c2 <__vector_21+0x78>
		{
			case 1: MED_1_TOGGLE;number_of_rotation--;break;
    1088:	e2 e0       	ldi	r30, 0x02	; 2
    108a:	f1 e0       	ldi	r31, 0x01	; 1
    108c:	90 81       	ld	r25, Z
    108e:	80 e4       	ldi	r24, 0x40	; 64
    1090:	89 27       	eor	r24, r25
    1092:	80 83       	st	Z, r24
    1094:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <number_of_rotation>
    1098:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <number_of_rotation+0x1>
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <number_of_rotation+0x1>
    10a2:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <number_of_rotation>
    10a6:	0d c0       	rjmp	.+26     	; 0x10c2 <__vector_21+0x78>
			case 2: MED_2_TOGGLE;number_of_rotation--;break;
    10a8:	9e b1       	in	r25, 0x0e	; 14
    10aa:	80 e2       	ldi	r24, 0x20	; 32
    10ac:	89 27       	eor	r24, r25
    10ae:	8e b9       	out	0x0e, r24	; 14
    10b0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <number_of_rotation>
    10b4:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <number_of_rotation+0x1>
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <number_of_rotation+0x1>
    10be:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <number_of_rotation>
		
	}
	
	
	
    10c2:	ff 91       	pop	r31
    10c4:	ef 91       	pop	r30
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	0f 90       	pop	r0
    10cc:	0b be       	out	0x3b, r0	; 59
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <UART_int>:
                    newData = TRUE;
                }
        }
    else if (rc == startMarker)
        {
            recvInProgress = TRUE;
    10d8:	88 e9       	ldi	r24, 0x98	; 152
    10da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    10de:	86 e0       	ldi	r24, 0x06	; 6
    10e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    10e4:	85 e3       	ldi	r24, 0x35	; 53
    10e6:	8a 95       	dec	r24
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <UART_int+0xe>
    10ea:	00 00       	nop
    10ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    10f6:	08 95       	ret

000010f8 <UART_tx>:
    10f8:	e0 ec       	ldi	r30, 0xC0	; 192
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	90 81       	ld	r25, Z
    10fe:	95 ff       	sbrs	r25, 5
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <UART_tx+0x4>
    1102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1106:	08 95       	ret

00001108 <UART_string_tx>:
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	fc 01       	movw	r30, r24
    1110:	80 81       	ld	r24, Z
    1112:	88 23       	and	r24, r24
    1114:	51 f0       	breq	.+20     	; 0x112a <UART_string_tx+0x22>
    1116:	8f 01       	movw	r16, r30
    1118:	c0 e0       	ldi	r28, 0x00	; 0
    111a:	ee df       	rcall	.-36     	; 0x10f8 <UART_tx>
    111c:	cf 5f       	subi	r28, 0xFF	; 255
    111e:	f8 01       	movw	r30, r16
    1120:	ec 0f       	add	r30, r28
    1122:	f1 1d       	adc	r31, r1
    1124:	80 81       	ld	r24, Z
    1126:	81 11       	cpse	r24, r1
    1128:	f8 cf       	rjmp	.-16     	; 0x111a <UART_string_tx+0x12>
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <__vector_25>:
}



ISR(USART0_RX_vect)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	0b b6       	in	r0, 0x3b	; 59
    113e:	0f 92       	push	r0
    1140:	2f 93       	push	r18
    1142:	3f 93       	push	r19
    1144:	4f 93       	push	r20
    1146:	5f 93       	push	r21
    1148:	6f 93       	push	r22
    114a:	7f 93       	push	r23
    114c:	8f 93       	push	r24
    114e:	9f 93       	push	r25
    1150:	af 93       	push	r26
    1152:	bf 93       	push	r27
    1154:	ef 93       	push	r30
    1156:	ff 93       	push	r31
    cli();
    1158:	f8 94       	cli



    circularQueue_enqueue((uint8_t)(UDR0));
    115a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    115e:	0e 94 ab 00 	call	0x156	; 0x156 <circularQueue_enqueue>
    //recvWithStartEndMarkers(UDR0);


    sei();
    1162:	78 94       	sei

}
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0b be       	out	0x3b, r0	; 59
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <usound_init>:
#include "usound.h"

void usound_init(void)
{
	US_DDR |= (1 << US_TRIGER)|(0 << US_ECHO);
    118a:	3d 9a       	sbi	0x07, 5	; 7
	US_PIN |= (1<<US_ECHO);
    118c:	37 9a       	sbi	0x06, 7	; 6
    118e:	08 95       	ret

00001190 <readDistance>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1190:	8a e0       	ldi	r24, 0x0A	; 10
    1192:	8a 95       	dec	r24
    1194:	f1 f7       	brne	.-4      	; 0x1192 <readDistance+0x2>
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <readDistance+0x8>
{
	uint8_t readStatus=0;
	uint32_t disTime=0;

	_delay_us(2);
	US_PORT |= (1 << US_TRIGER);
    1198:	45 9a       	sbi	0x08, 5	; 8
    119a:	85 e3       	ldi	r24, 0x35	; 53
    119c:	8a 95       	dec	r24
    119e:	f1 f7       	brne	.-4      	; 0x119c <readDistance+0xc>
    11a0:	00 00       	nop
	_delay_us(10);
	US_PORT &= ~(1 << US_TRIGER);
    11a2:	45 98       	cbi	0x08, 5	; 8
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <readDistance+0x28>

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	dc 01       	movw	r26, r24
		{
			disTime++;
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	a1 1d       	adc	r26, r1
    11b0:	b1 1d       	adc	r27, r1
	US_PORT &= ~(1 << US_TRIGER);

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
    11b2:	37 99       	sbic	0x06, 7	; 6
    11b4:	fb cf       	rjmp	.-10     	; 0x11ac <readDistance+0x1c>
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <readDistance+0x2e>
    11b8:	37 99       	sbic	0x06, 7	; 6
    11ba:	f5 cf       	rjmp	.-22     	; 0x11a6 <readDistance+0x16>
    11bc:	fd cf       	rjmp	.-6      	; 0x11b8 <readDistance+0x28>
			disTime++;
			readStatus = 1;
		}
	}	

	return disTime * 0.00862;	//return data in cm	
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	33 d0       	rcall	.+102    	; 0x122a <__floatunsisf>
    11c4:	27 ee       	ldi	r18, 0xE7	; 231
    11c6:	3a e3       	ldi	r19, 0x3A	; 58
    11c8:	4d e0       	ldi	r20, 0x0D	; 13
    11ca:	5c e3       	ldi	r21, 0x3C	; 60
    11cc:	94 d0       	rcall	.+296    	; 0x12f6 <__mulsf3>
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <__fixunssfsi>
}
    11d0:	08 95       	ret

000011d2 <__fixunssfsi>:
    11d2:	70 d0       	rcall	.+224    	; 0x12b4 <__fp_splitA>
    11d4:	88 f0       	brcs	.+34     	; 0x11f8 <__fixunssfsi+0x26>
    11d6:	9f 57       	subi	r25, 0x7F	; 127
    11d8:	90 f0       	brcs	.+36     	; 0x11fe <__fixunssfsi+0x2c>
    11da:	b9 2f       	mov	r27, r25
    11dc:	99 27       	eor	r25, r25
    11de:	b7 51       	subi	r27, 0x17	; 23
    11e0:	a0 f0       	brcs	.+40     	; 0x120a <__fixunssfsi+0x38>
    11e2:	d1 f0       	breq	.+52     	; 0x1218 <__fixunssfsi+0x46>
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	1a f0       	brmi	.+6      	; 0x11f4 <__fixunssfsi+0x22>
    11ee:	ba 95       	dec	r27
    11f0:	c9 f7       	brne	.-14     	; 0x11e4 <__fixunssfsi+0x12>
    11f2:	12 c0       	rjmp	.+36     	; 0x1218 <__fixunssfsi+0x46>
    11f4:	b1 30       	cpi	r27, 0x01	; 1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <__fixunssfsi+0x46>
    11f8:	77 d0       	rcall	.+238    	; 0x12e8 <__fp_zero>
    11fa:	b1 e0       	ldi	r27, 0x01	; 1
    11fc:	08 95       	ret
    11fe:	74 c0       	rjmp	.+232    	; 0x12e8 <__fp_zero>
    1200:	67 2f       	mov	r22, r23
    1202:	78 2f       	mov	r23, r24
    1204:	88 27       	eor	r24, r24
    1206:	b8 5f       	subi	r27, 0xF8	; 248
    1208:	39 f0       	breq	.+14     	; 0x1218 <__fixunssfsi+0x46>
    120a:	b9 3f       	cpi	r27, 0xF9	; 249
    120c:	cc f3       	brlt	.-14     	; 0x1200 <__fixunssfsi+0x2e>
    120e:	86 95       	lsr	r24
    1210:	77 95       	ror	r23
    1212:	67 95       	ror	r22
    1214:	b3 95       	inc	r27
    1216:	d9 f7       	brne	.-10     	; 0x120e <__fixunssfsi+0x3c>
    1218:	3e f4       	brtc	.+14     	; 0x1228 <__fixunssfsi+0x56>
    121a:	90 95       	com	r25
    121c:	80 95       	com	r24
    121e:	70 95       	com	r23
    1220:	61 95       	neg	r22
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	8f 4f       	sbci	r24, 0xFF	; 255
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	08 95       	ret

0000122a <__floatunsisf>:
    122a:	e8 94       	clt
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <__floatsisf+0x12>

0000122e <__floatsisf>:
    122e:	97 fb       	bst	r25, 7
    1230:	3e f4       	brtc	.+14     	; 0x1240 <__floatsisf+0x12>
    1232:	90 95       	com	r25
    1234:	80 95       	com	r24
    1236:	70 95       	com	r23
    1238:	61 95       	neg	r22
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	99 23       	and	r25, r25
    1242:	a9 f0       	breq	.+42     	; 0x126e <__floatsisf+0x40>
    1244:	f9 2f       	mov	r31, r25
    1246:	96 e9       	ldi	r25, 0x96	; 150
    1248:	bb 27       	eor	r27, r27
    124a:	93 95       	inc	r25
    124c:	f6 95       	lsr	r31
    124e:	87 95       	ror	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b7 95       	ror	r27
    1256:	f1 11       	cpse	r31, r1
    1258:	f8 cf       	rjmp	.-16     	; 0x124a <__floatsisf+0x1c>
    125a:	fa f4       	brpl	.+62     	; 0x129a <__floatsisf+0x6c>
    125c:	bb 0f       	add	r27, r27
    125e:	11 f4       	brne	.+4      	; 0x1264 <__floatsisf+0x36>
    1260:	60 ff       	sbrs	r22, 0
    1262:	1b c0       	rjmp	.+54     	; 0x129a <__floatsisf+0x6c>
    1264:	6f 5f       	subi	r22, 0xFF	; 255
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	8f 4f       	sbci	r24, 0xFF	; 255
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	16 c0       	rjmp	.+44     	; 0x129a <__floatsisf+0x6c>
    126e:	88 23       	and	r24, r24
    1270:	11 f0       	breq	.+4      	; 0x1276 <__floatsisf+0x48>
    1272:	96 e9       	ldi	r25, 0x96	; 150
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <__floatsisf+0x6a>
    1276:	77 23       	and	r23, r23
    1278:	21 f0       	breq	.+8      	; 0x1282 <__floatsisf+0x54>
    127a:	9e e8       	ldi	r25, 0x8E	; 142
    127c:	87 2f       	mov	r24, r23
    127e:	76 2f       	mov	r23, r22
    1280:	05 c0       	rjmp	.+10     	; 0x128c <__floatsisf+0x5e>
    1282:	66 23       	and	r22, r22
    1284:	71 f0       	breq	.+28     	; 0x12a2 <__floatsisf+0x74>
    1286:	96 e8       	ldi	r25, 0x86	; 134
    1288:	86 2f       	mov	r24, r22
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	2a f0       	brmi	.+10     	; 0x129a <__floatsisf+0x6c>
    1290:	9a 95       	dec	r25
    1292:	66 0f       	add	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	da f7       	brpl	.-10     	; 0x1290 <__floatsisf+0x62>
    129a:	88 0f       	add	r24, r24
    129c:	96 95       	lsr	r25
    129e:	87 95       	ror	r24
    12a0:	97 f9       	bld	r25, 7
    12a2:	08 95       	ret

000012a4 <__fp_split3>:
    12a4:	57 fd       	sbrc	r21, 7
    12a6:	90 58       	subi	r25, 0x80	; 128
    12a8:	44 0f       	add	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	59 f0       	breq	.+22     	; 0x12c4 <__fp_splitA+0x10>
    12ae:	5f 3f       	cpi	r21, 0xFF	; 255
    12b0:	71 f0       	breq	.+28     	; 0x12ce <__fp_splitA+0x1a>
    12b2:	47 95       	ror	r20

000012b4 <__fp_splitA>:
    12b4:	88 0f       	add	r24, r24
    12b6:	97 fb       	bst	r25, 7
    12b8:	99 1f       	adc	r25, r25
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <__fp_splitA+0x20>
    12bc:	9f 3f       	cpi	r25, 0xFF	; 255
    12be:	79 f0       	breq	.+30     	; 0x12de <__fp_splitA+0x2a>
    12c0:	87 95       	ror	r24
    12c2:	08 95       	ret
    12c4:	12 16       	cp	r1, r18
    12c6:	13 06       	cpc	r1, r19
    12c8:	14 06       	cpc	r1, r20
    12ca:	55 1f       	adc	r21, r21
    12cc:	f2 cf       	rjmp	.-28     	; 0x12b2 <__fp_split3+0xe>
    12ce:	46 95       	lsr	r20
    12d0:	f1 df       	rcall	.-30     	; 0x12b4 <__fp_splitA>
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <__fp_splitA+0x30>
    12d4:	16 16       	cp	r1, r22
    12d6:	17 06       	cpc	r1, r23
    12d8:	18 06       	cpc	r1, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	f1 cf       	rjmp	.-30     	; 0x12c0 <__fp_splitA+0xc>
    12de:	86 95       	lsr	r24
    12e0:	71 05       	cpc	r23, r1
    12e2:	61 05       	cpc	r22, r1
    12e4:	08 94       	sec
    12e6:	08 95       	ret

000012e8 <__fp_zero>:
    12e8:	e8 94       	clt

000012ea <__fp_szero>:
    12ea:	bb 27       	eor	r27, r27
    12ec:	66 27       	eor	r22, r22
    12ee:	77 27       	eor	r23, r23
    12f0:	cb 01       	movw	r24, r22
    12f2:	97 f9       	bld	r25, 7
    12f4:	08 95       	ret

000012f6 <__mulsf3>:
    12f6:	0b d0       	rcall	.+22     	; 0x130e <__mulsf3x>
    12f8:	78 c0       	rjmp	.+240    	; 0x13ea <__fp_round>
    12fa:	69 d0       	rcall	.+210    	; 0x13ce <__fp_pscA>
    12fc:	28 f0       	brcs	.+10     	; 0x1308 <__mulsf3+0x12>
    12fe:	6e d0       	rcall	.+220    	; 0x13dc <__fp_pscB>
    1300:	18 f0       	brcs	.+6      	; 0x1308 <__mulsf3+0x12>
    1302:	95 23       	and	r25, r21
    1304:	09 f0       	breq	.+2      	; 0x1308 <__mulsf3+0x12>
    1306:	5a c0       	rjmp	.+180    	; 0x13bc <__fp_inf>
    1308:	5f c0       	rjmp	.+190    	; 0x13c8 <__fp_nan>
    130a:	11 24       	eor	r1, r1
    130c:	ee cf       	rjmp	.-36     	; 0x12ea <__fp_szero>

0000130e <__mulsf3x>:
    130e:	ca df       	rcall	.-108    	; 0x12a4 <__fp_split3>
    1310:	a0 f3       	brcs	.-24     	; 0x12fa <__mulsf3+0x4>

00001312 <__mulsf3_pse>:
    1312:	95 9f       	mul	r25, r21
    1314:	d1 f3       	breq	.-12     	; 0x130a <__mulsf3+0x14>
    1316:	95 0f       	add	r25, r21
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	55 1f       	adc	r21, r21
    131c:	62 9f       	mul	r22, r18
    131e:	f0 01       	movw	r30, r0
    1320:	72 9f       	mul	r23, r18
    1322:	bb 27       	eor	r27, r27
    1324:	f0 0d       	add	r31, r0
    1326:	b1 1d       	adc	r27, r1
    1328:	63 9f       	mul	r22, r19
    132a:	aa 27       	eor	r26, r26
    132c:	f0 0d       	add	r31, r0
    132e:	b1 1d       	adc	r27, r1
    1330:	aa 1f       	adc	r26, r26
    1332:	64 9f       	mul	r22, r20
    1334:	66 27       	eor	r22, r22
    1336:	b0 0d       	add	r27, r0
    1338:	a1 1d       	adc	r26, r1
    133a:	66 1f       	adc	r22, r22
    133c:	82 9f       	mul	r24, r18
    133e:	22 27       	eor	r18, r18
    1340:	b0 0d       	add	r27, r0
    1342:	a1 1d       	adc	r26, r1
    1344:	62 1f       	adc	r22, r18
    1346:	73 9f       	mul	r23, r19
    1348:	b0 0d       	add	r27, r0
    134a:	a1 1d       	adc	r26, r1
    134c:	62 1f       	adc	r22, r18
    134e:	83 9f       	mul	r24, r19
    1350:	a0 0d       	add	r26, r0
    1352:	61 1d       	adc	r22, r1
    1354:	22 1f       	adc	r18, r18
    1356:	74 9f       	mul	r23, r20
    1358:	33 27       	eor	r19, r19
    135a:	a0 0d       	add	r26, r0
    135c:	61 1d       	adc	r22, r1
    135e:	23 1f       	adc	r18, r19
    1360:	84 9f       	mul	r24, r20
    1362:	60 0d       	add	r22, r0
    1364:	21 1d       	adc	r18, r1
    1366:	82 2f       	mov	r24, r18
    1368:	76 2f       	mov	r23, r22
    136a:	6a 2f       	mov	r22, r26
    136c:	11 24       	eor	r1, r1
    136e:	9f 57       	subi	r25, 0x7F	; 127
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	8a f0       	brmi	.+34     	; 0x1396 <__mulsf3_pse+0x84>
    1374:	e1 f0       	breq	.+56     	; 0x13ae <__mulsf3_pse+0x9c>
    1376:	88 23       	and	r24, r24
    1378:	4a f0       	brmi	.+18     	; 0x138c <__mulsf3_pse+0x7a>
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	bb 1f       	adc	r27, r27
    1380:	66 1f       	adc	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	91 50       	subi	r25, 0x01	; 1
    1388:	50 40       	sbci	r21, 0x00	; 0
    138a:	a9 f7       	brne	.-22     	; 0x1376 <__mulsf3_pse+0x64>
    138c:	9e 3f       	cpi	r25, 0xFE	; 254
    138e:	51 05       	cpc	r21, r1
    1390:	70 f0       	brcs	.+28     	; 0x13ae <__mulsf3_pse+0x9c>
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <__fp_inf>
    1394:	aa cf       	rjmp	.-172    	; 0x12ea <__fp_szero>
    1396:	5f 3f       	cpi	r21, 0xFF	; 255
    1398:	ec f3       	brlt	.-6      	; 0x1394 <__mulsf3_pse+0x82>
    139a:	98 3e       	cpi	r25, 0xE8	; 232
    139c:	dc f3       	brlt	.-10     	; 0x1394 <__mulsf3_pse+0x82>
    139e:	86 95       	lsr	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b7 95       	ror	r27
    13a6:	f7 95       	ror	r31
    13a8:	e7 95       	ror	r30
    13aa:	9f 5f       	subi	r25, 0xFF	; 255
    13ac:	c1 f7       	brne	.-16     	; 0x139e <__mulsf3_pse+0x8c>
    13ae:	fe 2b       	or	r31, r30
    13b0:	88 0f       	add	r24, r24
    13b2:	91 1d       	adc	r25, r1
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	97 f9       	bld	r25, 7
    13ba:	08 95       	ret

000013bc <__fp_inf>:
    13bc:	97 f9       	bld	r25, 7
    13be:	9f 67       	ori	r25, 0x7F	; 127
    13c0:	80 e8       	ldi	r24, 0x80	; 128
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	08 95       	ret

000013c8 <__fp_nan>:
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	80 ec       	ldi	r24, 0xC0	; 192
    13cc:	08 95       	ret

000013ce <__fp_pscA>:
    13ce:	00 24       	eor	r0, r0
    13d0:	0a 94       	dec	r0
    13d2:	16 16       	cp	r1, r22
    13d4:	17 06       	cpc	r1, r23
    13d6:	18 06       	cpc	r1, r24
    13d8:	09 06       	cpc	r0, r25
    13da:	08 95       	ret

000013dc <__fp_pscB>:
    13dc:	00 24       	eor	r0, r0
    13de:	0a 94       	dec	r0
    13e0:	12 16       	cp	r1, r18
    13e2:	13 06       	cpc	r1, r19
    13e4:	14 06       	cpc	r1, r20
    13e6:	05 06       	cpc	r0, r21
    13e8:	08 95       	ret

000013ea <__fp_round>:
    13ea:	09 2e       	mov	r0, r25
    13ec:	03 94       	inc	r0
    13ee:	00 0c       	add	r0, r0
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <__fp_round+0xc>
    13f2:	88 23       	and	r24, r24
    13f4:	52 f0       	brmi	.+20     	; 0x140a <__fp_round+0x20>
    13f6:	bb 0f       	add	r27, r27
    13f8:	40 f4       	brcc	.+16     	; 0x140a <__fp_round+0x20>
    13fa:	bf 2b       	or	r27, r31
    13fc:	11 f4       	brne	.+4      	; 0x1402 <__fp_round+0x18>
    13fe:	60 ff       	sbrs	r22, 0
    1400:	04 c0       	rjmp	.+8      	; 0x140a <__fp_round+0x20>
    1402:	6f 5f       	subi	r22, 0xFF	; 255
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__tablejump2__>:
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	88 1f       	adc	r24, r24
    1412:	8b bf       	out	0x3b, r24	; 59
    1414:	07 90       	elpm	r0, Z+
    1416:	f6 91       	elpm	r31, Z
    1418:	e0 2d       	mov	r30, r0
    141a:	19 94       	eijmp

0000141c <atoi>:
    141c:	fc 01       	movw	r30, r24
    141e:	88 27       	eor	r24, r24
    1420:	99 27       	eor	r25, r25
    1422:	e8 94       	clt
    1424:	21 91       	ld	r18, Z+
    1426:	20 32       	cpi	r18, 0x20	; 32
    1428:	e9 f3       	breq	.-6      	; 0x1424 <atoi+0x8>
    142a:	29 30       	cpi	r18, 0x09	; 9
    142c:	10 f0       	brcs	.+4      	; 0x1432 <atoi+0x16>
    142e:	2e 30       	cpi	r18, 0x0E	; 14
    1430:	c8 f3       	brcs	.-14     	; 0x1424 <atoi+0x8>
    1432:	2b 32       	cpi	r18, 0x2B	; 43
    1434:	39 f0       	breq	.+14     	; 0x1444 <atoi+0x28>
    1436:	2d 32       	cpi	r18, 0x2D	; 45
    1438:	31 f4       	brne	.+12     	; 0x1446 <atoi+0x2a>
    143a:	68 94       	set
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <atoi+0x28>
    143e:	3a d0       	rcall	.+116    	; 0x14b4 <__mulhi_const_10>
    1440:	82 0f       	add	r24, r18
    1442:	91 1d       	adc	r25, r1
    1444:	21 91       	ld	r18, Z+
    1446:	20 53       	subi	r18, 0x30	; 48
    1448:	2a 30       	cpi	r18, 0x0A	; 10
    144a:	c8 f3       	brcs	.-14     	; 0x143e <atoi+0x22>
    144c:	1e f4       	brtc	.+6      	; 0x1454 <atoi+0x38>
    144e:	90 95       	com	r25
    1450:	81 95       	neg	r24
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	08 95       	ret

00001456 <strcat>:
    1456:	fb 01       	movw	r30, r22
    1458:	dc 01       	movw	r26, r24
    145a:	0d 90       	ld	r0, X+
    145c:	00 20       	and	r0, r0
    145e:	e9 f7       	brne	.-6      	; 0x145a <strcat+0x4>
    1460:	11 97       	sbiw	r26, 0x01	; 1
    1462:	01 90       	ld	r0, Z+
    1464:	0d 92       	st	X+, r0
    1466:	00 20       	and	r0, r0
    1468:	e1 f7       	brne	.-8      	; 0x1462 <strcat+0xc>
    146a:	08 95       	ret

0000146c <strstr>:
    146c:	fb 01       	movw	r30, r22
    146e:	51 91       	ld	r21, Z+
    1470:	55 23       	and	r21, r21
    1472:	a9 f0       	breq	.+42     	; 0x149e <strstr+0x32>
    1474:	bf 01       	movw	r22, r30
    1476:	dc 01       	movw	r26, r24
    1478:	4d 91       	ld	r20, X+
    147a:	45 17       	cp	r20, r21
    147c:	41 11       	cpse	r20, r1
    147e:	e1 f7       	brne	.-8      	; 0x1478 <strstr+0xc>
    1480:	59 f4       	brne	.+22     	; 0x1498 <strstr+0x2c>
    1482:	cd 01       	movw	r24, r26
    1484:	01 90       	ld	r0, Z+
    1486:	00 20       	and	r0, r0
    1488:	49 f0       	breq	.+18     	; 0x149c <strstr+0x30>
    148a:	4d 91       	ld	r20, X+
    148c:	40 15       	cp	r20, r0
    148e:	41 11       	cpse	r20, r1
    1490:	c9 f3       	breq	.-14     	; 0x1484 <strstr+0x18>
    1492:	fb 01       	movw	r30, r22
    1494:	41 11       	cpse	r20, r1
    1496:	ef cf       	rjmp	.-34     	; 0x1476 <strstr+0xa>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	08 95       	ret

000014a0 <__itoa_ncheck>:
    14a0:	bb 27       	eor	r27, r27
    14a2:	4a 30       	cpi	r20, 0x0A	; 10
    14a4:	31 f4       	brne	.+12     	; 0x14b2 <__itoa_ncheck+0x12>
    14a6:	99 23       	and	r25, r25
    14a8:	22 f4       	brpl	.+8      	; 0x14b2 <__itoa_ncheck+0x12>
    14aa:	bd e2       	ldi	r27, 0x2D	; 45
    14ac:	90 95       	com	r25
    14ae:	81 95       	neg	r24
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <__utoa_common>

000014b4 <__mulhi_const_10>:
    14b4:	7a e0       	ldi	r23, 0x0A	; 10
    14b6:	97 9f       	mul	r25, r23
    14b8:	90 2d       	mov	r25, r0
    14ba:	87 9f       	mul	r24, r23
    14bc:	80 2d       	mov	r24, r0
    14be:	91 0d       	add	r25, r1
    14c0:	11 24       	eor	r1, r1
    14c2:	08 95       	ret

000014c4 <__utoa_ncheck>:
    14c4:	bb 27       	eor	r27, r27

000014c6 <__utoa_common>:
    14c6:	fb 01       	movw	r30, r22
    14c8:	55 27       	eor	r21, r21
    14ca:	aa 27       	eor	r26, r26
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	aa 1f       	adc	r26, r26
    14d2:	a4 17       	cp	r26, r20
    14d4:	10 f0       	brcs	.+4      	; 0x14da <__utoa_common+0x14>
    14d6:	a4 1b       	sub	r26, r20
    14d8:	83 95       	inc	r24
    14da:	50 51       	subi	r21, 0x10	; 16
    14dc:	b9 f7       	brne	.-18     	; 0x14cc <__utoa_common+0x6>
    14de:	a0 5d       	subi	r26, 0xD0	; 208
    14e0:	aa 33       	cpi	r26, 0x3A	; 58
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <__utoa_common+0x20>
    14e4:	a9 5d       	subi	r26, 0xD9	; 217
    14e6:	a1 93       	st	Z+, r26
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	79 f7       	brne	.-34     	; 0x14ca <__utoa_common+0x4>
    14ec:	b1 11       	cpse	r27, r1
    14ee:	b1 93       	st	Z+, r27
    14f0:	11 92       	st	Z+, r1
    14f2:	cb 01       	movw	r24, r22
    14f4:	00 c0       	rjmp	.+0      	; 0x14f6 <strrev>

000014f6 <strrev>:
    14f6:	dc 01       	movw	r26, r24
    14f8:	fc 01       	movw	r30, r24
    14fa:	67 2f       	mov	r22, r23
    14fc:	71 91       	ld	r23, Z+
    14fe:	77 23       	and	r23, r23
    1500:	e1 f7       	brne	.-8      	; 0x14fa <strrev+0x4>
    1502:	32 97       	sbiw	r30, 0x02	; 2
    1504:	04 c0       	rjmp	.+8      	; 0x150e <strrev+0x18>
    1506:	7c 91       	ld	r23, X
    1508:	6d 93       	st	X+, r22
    150a:	70 83       	st	Z, r23
    150c:	62 91       	ld	r22, -Z
    150e:	ae 17       	cp	r26, r30
    1510:	bf 07       	cpc	r27, r31
    1512:	c8 f3       	brcs	.-14     	; 0x1506 <strrev+0x10>
    1514:	08 95       	ret

00001516 <_exit>:
    1516:	f8 94       	cli

00001518 <__stop_program>:
    1518:	ff cf       	rjmp	.-2      	; 0x1518 <__stop_program>
