
Farm_01062019_v6.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000178  00800200  0000145e  000014f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000145e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019e  00800378  00800378  0000166a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000166a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003da2  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001854  00000000  00000000  0000567e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b37  00000000  00000000  00006ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00008a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9f  00000000  00000000  00008f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000219b  00000000  00000000  000099db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000bb76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
       6:	00 00       	nop
       8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
       a:	00 00       	nop
       c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
       e:	00 00       	nop
      10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
      12:	00 00       	nop
      14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
      16:	00 00       	nop
      18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
      1e:	00 00       	nop
      20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
      22:	00 00       	nop
      24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
      26:	00 00       	nop
      28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
      2e:	00 00       	nop
      30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
      32:	00 00       	nop
      34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
      36:	00 00       	nop
      38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	83 c0       	rjmp	.+262    	; 0x144 <__bad_interrupt>
      3e:	00 00       	nop
      40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c7       	rjmp	.+3882   	; 0xf70 <__vector_17>
      46:	00 00       	nop
      48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
      4e:	00 00       	nop
      50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
      52:	00 00       	nop
      54:	9e c7       	rjmp	.+3900   	; 0xf92 <__vector_21>
      56:	00 00       	nop
      58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
      5e:	00 00       	nop
      60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__vector_25>
      68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
      6e:	00 00       	nop
      70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
      72:	00 00       	nop
      74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
      76:	00 00       	nop
      78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
      7e:	00 00       	nop
      80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
      82:	00 00       	nop
      84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
      86:	00 00       	nop
      88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
      8e:	00 00       	nop
      90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
      92:	00 00       	nop
      94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
      96:	00 00       	nop
      98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
      be:	00 00       	nop
      c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3b c0       	rjmp	.+118    	; 0x144 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	39 c0       	rjmp	.+114    	; 0x144 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
      da:	00 00       	nop
      dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
      de:	00 00       	nop
      e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	61 02       	muls	r22, r17
      e6:	6f 02       	muls	r22, r31
      e8:	7d 02       	muls	r23, r29
      ea:	8b 02       	muls	r24, r27
      ec:	99 02       	muls	r25, r25
      ee:	a7 02       	muls	r26, r23
      f0:	b5 02       	muls	r27, r21
      f2:	c3 02       	muls	r28, r19
      f4:	31 04       	cpc	r3, r1
      f6:	35 04       	cpc	r3, r5
      f8:	39 04       	cpc	r3, r9
      fa:	3d 04       	cpc	r3, r13
      fc:	41 04       	cpc	r4, r1
      fe:	45 04       	cpc	r4, r5
     100:	49 04       	cpc	r4, r9
     102:	4d 04       	cpc	r4, r13

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d1 e2       	ldi	r29, 0x21	; 33
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
     114:	13 e0       	ldi	r17, 0x03	; 3
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	ee e5       	ldi	r30, 0x5E	; 94
     11c:	f4 e1       	ldi	r31, 0x14	; 20
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	a8 37       	cpi	r26, 0x78	; 120
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	25 e0       	ldi	r18, 0x05	; 5
     130:	a8 e7       	ldi	r26, 0x78	; 120
     132:	b3 e0       	ldi	r27, 0x03	; 3
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a6 31       	cpi	r26, 0x16	; 22
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	4f d5       	rcall	.+2718   	; 0xbde <main>
     140:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <_exit>

00000144 <__bad_interrupt>:
     144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <circularQueue_isEmpty>:
	
	head = head +1;
	
	return ret;
	
}
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <head>
     14c:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <__data_end>
     150:	29 13       	cpse	r18, r25
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	08 95       	ret

00000156 <circularQueue_enqueue>:
     156:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <__data_end>
     15a:	e9 2f       	mov	r30, r25
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	eb 57       	subi	r30, 0x7B	; 123
     160:	fc 4f       	sbci	r31, 0xFC	; 252
     162:	80 83       	st	Z, r24
     164:	9f 5f       	subi	r25, 0xFF	; 255
     166:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <__data_end>
     16a:	08 95       	ret

0000016c <circularQueue_clearBuffer>:

void circularQueue_clearBuffer()
{
     16c:	e5 e8       	ldi	r30, 0x85	; 133
     16e:	f3 e0       	ldi	r31, 0x03	; 3
     170:	85 e1       	ldi	r24, 0x15	; 21
     172:	95 e0       	ldi	r25, 0x05	; 5
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
	{
		gBuffer[i]=0;
     174:	11 92       	st	Z+, r1
}

void circularQueue_clearBuffer()
{
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
     176:	e8 17       	cp	r30, r24
     178:	f9 07       	cpc	r31, r25
     17a:	e1 f7       	brne	.-8      	; 0x174 <circularQueue_clearBuffer+0x8>
	{
		gBuffer[i]=0;
	}
	tail = 0;
     17c:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <__data_end>
	head = 0;
     180:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <head>
     184:	08 95       	ret

00000186 <circularQueue_searchSubStringInQueue>:
	
}
uint8_t circularQueue_searchSubStringInQueue(uint8_t* data)
{
	uint8_t ret = FALSE;
	if( strstr(gBuffer,data) == NULL)
     186:	bc 01       	movw	r22, r24
     188:	85 e8       	ldi	r24, 0x85	; 133
     18a:	93 e0       	ldi	r25, 0x03	; 3
     18c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <strstr>
	else
	{
		ret = TRUE;
	}
	
	return ret;
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	89 2b       	or	r24, r25
     194:	09 f4       	brne	.+2      	; 0x198 <circularQueue_searchSubStringInQueue+0x12>
     196:	20 e0       	ldi	r18, 0x00	; 0
}
     198:	82 2f       	mov	r24, r18
     19a:	08 95       	ret

0000019c <circularQueue_bufferPointer>:

uint8_t *circularQueue_bufferPointer()
{
	return gBuffer;
     19c:	85 e8       	ldi	r24, 0x85	; 133
     19e:	93 e0       	ldi	r25, 0x03	; 3
     1a0:	08 95       	ret

000001a2 <dht_getdata_dht_11>:
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
     1a2:	2f 92       	push	r2
     1a4:	3f 92       	push	r3
     1a6:	4f 92       	push	r4
     1a8:	5f 92       	push	r5
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <dht_getdata_dht_11+0x24>
     1c6:	1f 92       	push	r1
     1c8:	1f 92       	push	r1
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	5c 01       	movw	r10, r24
     1d0:	4b 01       	movw	r8, r22

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     1d2:	fe 01       	movw	r30, r28
     1d4:	31 96       	adiw	r30, 0x01	; 1
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	df 01       	movw	r26, r30
     1da:	1d 92       	st	X+, r1
     1dc:	8a 95       	dec	r24
     1de:	e9 f7       	brne	.-6      	; 0x1da <dht_getdata_dht_11+0x38>

	//reset port
	DDR(DDR_data) |= (1<<channel); //output
     1e0:	fa 01       	movw	r30, r20
     1e2:	80 a1       	ldd	r24, Z+32	; 0x20
     1e4:	e1 e0       	ldi	r30, 0x01	; 1
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	0e 2c       	mov	r0, r14
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <dht_getdata_dht_11+0x4e>
     1ec:	ee 0f       	add	r30, r30
     1ee:	ff 1f       	adc	r31, r31
     1f0:	0a 94       	dec	r0
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <dht_getdata_dht_11+0x4a>
     1f4:	8e 2b       	or	r24, r30
     1f6:	da 01       	movw	r26, r20
     1f8:	90 96       	adiw	r26, 0x20	; 32
     1fa:	8c 93       	st	X, r24
	PORT(PORT_data) |= (1<<channel); //high
     1fc:	d9 01       	movw	r26, r18
     1fe:	90 96       	adiw	r26, 0x20	; 32
     200:	8c 91       	ld	r24, X
     202:	90 97       	sbiw	r26, 0x20	; 32
     204:	8e 2b       	or	r24, r30
     206:	90 96       	adiw	r26, 0x20	; 32
     208:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	bf ef       	ldi	r27, 0xFF	; 255
     20c:	61 ee       	ldi	r22, 0xE1	; 225
     20e:	74 e0       	ldi	r23, 0x04	; 4
     210:	b1 50       	subi	r27, 0x01	; 1
     212:	60 40       	sbci	r22, 0x00	; 0
     214:	70 40       	sbci	r23, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <dht_getdata_dht_11+0x6e>
     218:	00 c0       	rjmp	.+0      	; 0x21a <dht_getdata_dht_11+0x78>
     21a:	00 00       	nop
	_delay_ms(100);

	//send request
	PORT(PORT_data) &= ~(1<<channel); //low
     21c:	d9 01       	movw	r26, r18
     21e:	90 96       	adiw	r26, 0x20	; 32
     220:	9c 91       	ld	r25, X
     222:	90 97       	sbiw	r26, 0x20	; 32
     224:	8e 2f       	mov	r24, r30
     226:	80 95       	com	r24
     228:	98 23       	and	r25, r24
     22a:	90 96       	adiw	r26, 0x20	; 32
     22c:	9c 93       	st	X, r25
     22e:	bf ef       	ldi	r27, 0xFF	; 255
     230:	60 ee       	ldi	r22, 0xE0	; 224
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	b1 50       	subi	r27, 0x01	; 1
     236:	60 40       	sbci	r22, 0x00	; 0
     238:	70 40       	sbci	r23, 0x00	; 0
     23a:	e1 f7       	brne	.-8      	; 0x234 <dht_getdata_dht_11+0x92>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <dht_getdata_dht_11+0x9c>
     23e:	00 00       	nop
	
	_delay_ms(18);
	
	
	
	PORT(PORT_data) |= (1<<channel); //high
     240:	d9 01       	movw	r26, r18
     242:	90 96       	adiw	r26, 0x20	; 32
     244:	9c 91       	ld	r25, X
     246:	90 97       	sbiw	r26, 0x20	; 32
     248:	9e 2b       	or	r25, r30
     24a:	90 96       	adiw	r26, 0x20	; 32
     24c:	9c 93       	st	X, r25
	DDR(DDR_data) &= ~(1<<channel); //input
     24e:	da 01       	movw	r26, r20
     250:	90 96       	adiw	r26, 0x20	; 32
     252:	9c 91       	ld	r25, X
     254:	90 97       	sbiw	r26, 0x20	; 32
     256:	89 23       	and	r24, r25
     258:	90 96       	adiw	r26, 0x20	; 32
     25a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25c:	b5 ed       	ldi	r27, 0xD5	; 213
     25e:	ba 95       	dec	r27
     260:	f1 f7       	brne	.-4      	; 0x25e <dht_getdata_dht_11+0xbc>
     262:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((PIN(PIN_data) & (1<<channel))) {
     264:	18 01       	movw	r2, r16
     266:	60 e2       	ldi	r22, 0x20	; 32
     268:	26 0e       	add	r2, r22
     26a:	31 1c       	adc	r3, r1
     26c:	d8 01       	movw	r26, r16
     26e:	90 96       	adiw	r26, 0x20	; 32
     270:	8c 91       	ld	r24, X
     272:	90 97       	sbiw	r26, 0x20	; 32
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 2c       	mov	r0, r14
     278:	02 c0       	rjmp	.+4      	; 0x27e <dht_getdata_dht_11+0xdc>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	0a 94       	dec	r0
     280:	e2 f7       	brpl	.-8      	; 0x27a <dht_getdata_dht_11+0xd8>
     282:	80 fd       	sbrc	r24, 0
     284:	82 c0       	rjmp	.+260    	; 0x38a <dht_getdata_dht_11+0x1e8>
     286:	8f e3       	ldi	r24, 0x3F	; 63
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <dht_getdata_dht_11+0xe8>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <dht_getdata_dht_11+0xee>
     290:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIN(PIN_data) & (1<<channel))) {
     292:	90 96       	adiw	r26, 0x20	; 32
     294:	8c 91       	ld	r24, X
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <dht_getdata_dht_11+0xfc>
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	ea 94       	dec	r14
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <dht_getdata_dht_11+0xf8>
     2a2:	80 ff       	sbrs	r24, 0
     2a4:	74 c0       	rjmp	.+232    	; 0x38e <dht_getdata_dht_11+0x1ec>
     2a6:	8f e3       	ldi	r24, 0x3F	; 63
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <dht_getdata_dht_11+0x108>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <dht_getdata_dht_11+0x10e>
     2b0:	00 00       	nop
     2b2:	de 01       	movw	r26, r28
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	6d 01       	movw	r12, r26
     2b8:	2e 01       	movw	r4, r28
     2ba:	b6 e0       	ldi	r27, 0x06	; 6
     2bc:	4b 0e       	add	r4, r27
     2be:	51 1c       	adc	r5, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
     2c0:	ee 24       	eor	r14, r14
     2c2:	e3 94       	inc	r14
     2c4:	f1 2c       	mov	r15, r1
     2c6:	36 c0       	rjmp	.+108    	; 0x334 <dht_getdata_dht_11+0x192>
     2c8:	61 50       	subi	r22, 0x01	; 1
     2ca:	71 09       	sbc	r23, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     2cc:	19 f4       	brne	.+6      	; 0x2d4 <dht_getdata_dht_11+0x132>
     2ce:	61 c0       	rjmp	.+194    	; 0x392 <dht_getdata_dht_11+0x1f0>
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
     2d0:	69 ec       	ldi	r22, 0xC9	; 201
     2d2:	70 e0       	ldi	r23, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
     2d4:	d1 01       	movw	r26, r2
     2d6:	8c 91       	ld	r24, X
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	8e 23       	and	r24, r30
     2dc:	9f 23       	and	r25, r31
     2de:	89 2b       	or	r24, r25
     2e0:	99 f3       	breq	.-26     	; 0x2c8 <dht_getdata_dht_11+0x126>
     2e2:	b0 ea       	ldi	r27, 0xA0	; 160
     2e4:	ba 95       	dec	r27
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <dht_getdata_dht_11+0x142>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
     2e8:	d1 01       	movw	r26, r2
     2ea:	8c 91       	ld	r24, X
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	8e 23       	and	r24, r30
     2f0:	9f 23       	and	r25, r31
     2f2:	89 2b       	or	r24, r25
     2f4:	41 f0       	breq	.+16     	; 0x306 <dht_getdata_dht_11+0x164>
			result |= (1<<(7-i));
     2f6:	c7 01       	movw	r24, r14
     2f8:	00 2e       	mov	r0, r16
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <dht_getdata_dht_11+0x15e>
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <dht_getdata_dht_11+0x15a>
     304:	78 2a       	or	r7, r24
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
     306:	69 ec       	ldi	r22, 0xC9	; 201
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	04 c0       	rjmp	.+8      	; 0x314 <dht_getdata_dht_11+0x172>
     30c:	61 50       	subi	r22, 0x01	; 1
     30e:	71 09       	sbc	r23, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     310:	09 f4       	brne	.+2      	; 0x314 <dht_getdata_dht_11+0x172>
     312:	41 c0       	rjmp	.+130    	; 0x396 <dht_getdata_dht_11+0x1f4>
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
     314:	d1 01       	movw	r26, r2
     316:	8c 91       	ld	r24, X
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	8e 23       	and	r24, r30
     31c:	9f 23       	and	r25, r31
     31e:	89 2b       	or	r24, r25
     320:	a9 f7       	brne	.-22     	; 0x30c <dht_getdata_dht_11+0x16a>
     322:	01 50       	subi	r16, 0x01	; 1
     324:	11 09       	sbc	r17, r1
     326:	a0 f6       	brcc	.-88     	; 0x2d0 <dht_getdata_dht_11+0x12e>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     328:	d6 01       	movw	r26, r12
     32a:	7d 92       	st	X+, r7
     32c:	6d 01       	movw	r12, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     32e:	4a 16       	cp	r4, r26
     330:	5b 06       	cpc	r5, r27
     332:	21 f0       	breq	.+8      	; 0x33c <dht_getdata_dht_11+0x19a>
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
     334:	07 e0       	ldi	r16, 0x07	; 7
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	71 2c       	mov	r7, r1
     33a:	ca cf       	rjmp	.-108    	; 0x2d0 <dht_getdata_dht_11+0x12e>
		}
		bits[j] = result;
	}

	//reset port
	DDR(DDR_data) |= (1<<channel); //output
     33c:	da 01       	movw	r26, r20
     33e:	90 96       	adiw	r26, 0x20	; 32
     340:	8c 91       	ld	r24, X
     342:	90 97       	sbiw	r26, 0x20	; 32
     344:	8e 2b       	or	r24, r30
     346:	90 96       	adiw	r26, 0x20	; 32
     348:	8c 93       	st	X, r24
	PORT(PORT_data) |= (1<<channel); //low
     34a:	d9 01       	movw	r26, r18
     34c:	90 96       	adiw	r26, 0x20	; 32
     34e:	8c 91       	ld	r24, X
     350:	90 97       	sbiw	r26, 0x20	; 32
     352:	e8 2b       	or	r30, r24
     354:	90 96       	adiw	r26, 0x20	; 32
     356:	ec 93       	st	X, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     358:	bf ef       	ldi	r27, 0xFF	; 255
     35a:	e1 ee       	ldi	r30, 0xE1	; 225
     35c:	f4 e0       	ldi	r31, 0x04	; 4
     35e:	b1 50       	subi	r27, 0x01	; 1
     360:	e0 40       	sbci	r30, 0x00	; 0
     362:	f0 40       	sbci	r31, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <dht_getdata_dht_11+0x1bc>
     366:	00 c0       	rjmp	.+0      	; 0x368 <dht_getdata_dht_11+0x1c6>
     368:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     36a:	29 81       	ldd	r18, Y+1	; 0x01
     36c:	3b 81       	ldd	r19, Y+3	; 0x03
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	82 0f       	add	r24, r18
     372:	83 0f       	add	r24, r19
     374:	9c 81       	ldd	r25, Y+4	; 0x04
     376:	89 0f       	add	r24, r25
     378:	9d 81       	ldd	r25, Y+5	; 0x05
     37a:	89 13       	cpse	r24, r25
     37c:	0e c0       	rjmp	.+28     	; 0x39a <dht_getdata_dht_11+0x1f8>
		//return temperature and humidity
		
		*temperature = bits[2];
     37e:	d5 01       	movw	r26, r10
     380:	3c 93       	st	X, r19
		*humidity = bits[0];
     382:	f4 01       	movw	r30, r8
     384:	20 83       	st	Z, r18
		



		
		return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	09 c0       	rjmp	.+18     	; 0x39c <dht_getdata_dht_11+0x1fa>
	DDR(DDR_data) &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((PIN(PIN_data) & (1<<channel))) {
		return -1;
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	07 c0       	rjmp	.+14     	; 0x39c <dht_getdata_dht_11+0x1fa>
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIN(PIN_data) & (1<<channel))) {
		return -1;
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	05 c0       	rjmp	.+10     	; 0x39c <dht_getdata_dht_11+0x1fa>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	03 c0       	rjmp	.+6      	; 0x39c <dht_getdata_dht_11+0x1fa>
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	01 c0       	rjmp	.+2      	; 0x39c <dht_getdata_dht_11+0x1fa>

		
		return 0;
	}

	return -1;
     39a:	8f ef       	ldi	r24, 0xFF	; 255

}
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	9f 90       	pop	r9
     3bc:	8f 90       	pop	r8
     3be:	7f 90       	pop	r7
     3c0:	5f 90       	pop	r5
     3c2:	4f 90       	pop	r4
     3c4:	3f 90       	pop	r3
     3c6:	2f 90       	pop	r2
     3c8:	08 95       	ret

000003ca <ESP_close_TCP>:
            UART_string_tx(command);
        }

    circularQueue_clearBuffer();
    _delay_ms(1000);
}
     3ca:	d0 de       	rcall	.-608    	; 0x16c <circularQueue_clearBuffer>
     3cc:	8b e1       	ldi	r24, 0x1B	; 27
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	3e d6       	rcall	.+3196   	; 0x104e <UART_string_tx>
     3d2:	b9 de       	rcall	.-654    	; 0x146 <circularQueue_isEmpty>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	e9 f3       	breq	.-6      	; 0x3d2 <ESP_close_TCP+0x8>
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	80 e7       	ldi	r24, 0x70	; 112
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <ESP_close_TCP+0x14>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <ESP_close_TCP+0x1e>
     3e8:	00 00       	nop
     3ea:	c0 ce       	rjmp	.-640    	; 0x16c <circularQueue_clearBuffer>
     3ec:	08 95       	ret

000003ee <ESP_write_Fields>:


void ESP_write_Fields(struct Json *data,uint8_t* api_key,uint8_t fieldStart,uint8_t fieldEnd)
{
     3ee:	8f 92       	push	r8
     3f0:	9f 92       	push	r9
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	cf 54       	subi	r28, 0x4F	; 79
     40c:	d1 40       	sbci	r29, 0x01	; 1
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	4c 01       	movw	r8, r24
     41a:	7b 01       	movw	r14, r22
     41c:	14 2f       	mov	r17, r20
     41e:	02 2f       	mov	r16, r18
    uint8_t command[300];
    uint8_t command_length[30];
    uint8_t buffer[5];
    uint8_t i;
   
    ESP_close_TCP();// CLOSE ANY TCP CONNECTION
     420:	d4 df       	rcall	.-88     	; 0x3ca <ESP_close_TCP>

    strcpy(command,"GET https://api.thingspeak.com/update?api_key=");
     422:	8f e2       	ldi	r24, 0x2F	; 47
     424:	e9 e2       	ldi	r30, 0x29	; 41
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	de 01       	movw	r26, r28
     42a:	11 96       	adiw	r26, 0x01	; 1
     42c:	01 90       	ld	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	8a 95       	dec	r24
     432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
    strcat(command,api_key);
     434:	b7 01       	movw	r22, r14
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	af d7       	rcall	.+3934   	; 0x139a <strcat>
	 
    for(i=fieldStart; i<=fieldEnd; i++)
     43c:	01 17       	cp	r16, r17
     43e:	08 f4       	brcc	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	b3 c0       	rjmp	.+358    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
        {
            strcat(command,"&");
     442:	ce 01       	movw	r24, r28
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	7c 01       	movw	r14, r24
     448:	0f 2e       	mov	r0, r31
     44a:	f6 e2       	ldi	r31, 0x26	; 38
     44c:	af 2e       	mov	r10, r31
     44e:	b1 2c       	mov	r11, r1
     450:	f0 2d       	mov	r31, r0
            strcat(command,"field");
            itoa(i,buffer,10);
            strcat(command,buffer);
            strcat(command,"=");
     452:	0f 2e       	mov	r0, r31
     454:	fd e3       	ldi	r31, 0x3D	; 61
     456:	cf 2e       	mov	r12, r31
     458:	d1 2c       	mov	r13, r1
     45a:	f0 2d       	mov	r31, r0
    strcpy(command,"GET https://api.thingspeak.com/update?api_key=");
    strcat(command,api_key);
	 
    for(i=fieldStart; i<=fieldEnd; i++)
        {
            strcat(command,"&");
     45c:	f7 01       	movw	r30, r14
     45e:	01 90       	ld	r0, Z+
     460:	00 20       	and	r0, r0
     462:	e9 f7       	brne	.-6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	b1 82       	std	Z+1, r11	; 0x01
     468:	a0 82       	st	Z, r10
            strcat(command,"field");
     46a:	d7 01       	movw	r26, r14
     46c:	0d 90       	ld	r0, X+
     46e:	00 20       	and	r0, r0
     470:	e9 f7       	brne	.-6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     472:	11 97       	sbiw	r26, 0x01	; 1
     474:	86 e0       	ldi	r24, 0x06	; 6
     476:	e2 eb       	ldi	r30, 0xB2	; 178
     478:	f2 e0       	ldi	r31, 0x02	; 2
     47a:	01 90       	ld	r0, Z+
     47c:	0d 92       	st	X+, r0
     47e:	8a 95       	dec	r24
     480:	e1 f7       	brne	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     482:	4a e0       	ldi	r20, 0x0A	; 10
     484:	be 01       	movw	r22, r28
     486:	65 5b       	subi	r22, 0xB5	; 181
     488:	7e 4f       	sbci	r23, 0xFE	; 254
     48a:	81 2f       	mov	r24, r17
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	aa d7       	rcall	.+3924   	; 0x13e4 <__itoa_ncheck>
            itoa(i,buffer,10);
            strcat(command,buffer);
     490:	be 01       	movw	r22, r28
     492:	65 5b       	subi	r22, 0xB5	; 181
     494:	7e 4f       	sbci	r23, 0xFE	; 254
     496:	c7 01       	movw	r24, r14
     498:	80 d7       	rcall	.+3840   	; 0x139a <strcat>
            strcat(command,"=");
     49a:	f7 01       	movw	r30, r14
     49c:	01 90       	ld	r0, Z+
     49e:	00 20       	and	r0, r0
     4a0:	e9 f7       	brne	.-6      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	d1 82       	std	Z+1, r13	; 0x01
     4a6:	c0 82       	st	Z, r12
            switch(i)
     4a8:	81 2f       	mov	r24, r17
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	e8 30       	cpi	r30, 0x08	; 8
     4b2:	f1 05       	cpc	r31, r1
     4b4:	08 f0       	brcs	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b6:	74 c0       	rjmp	.+232    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     4b8:	88 27       	eor	r24, r24
     4ba:	ee 58       	subi	r30, 0x8E	; 142
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	8f 4f       	sbci	r24, 0xFF	; 255
     4c0:	47 c7       	rjmp	.+3726   	; 0x1350 <__tablejump2__>
     4c2:	f4 01       	movw	r30, r8
     4c4:	81 81       	ldd	r24, Z+1	; 0x01
     4c6:	4a e0       	ldi	r20, 0x0A	; 10
     4c8:	be 01       	movw	r22, r28
     4ca:	65 5b       	subi	r22, 0xB5	; 181
     4cc:	7e 4f       	sbci	r23, 0xFE	; 254
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	89 d7       	rcall	.+3858   	; 0x13e4 <__itoa_ncheck>
                {
                    case 1:
                        itoa(data->field1,buffer,10);
                        strcat(command,buffer);
     4d2:	be 01       	movw	r22, r28
     4d4:	65 5b       	subi	r22, 0xB5	; 181
     4d6:	7e 4f       	sbci	r23, 0xFE	; 254
     4d8:	c7 01       	movw	r24, r14
     4da:	5f d7       	rcall	.+3774   	; 0x139a <strcat>
                        break;
     4dc:	61 c0       	rjmp	.+194    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     4de:	f4 01       	movw	r30, r8
     4e0:	82 81       	ldd	r24, Z+2	; 0x02
     4e2:	4a e0       	ldi	r20, 0x0A	; 10
     4e4:	be 01       	movw	r22, r28
     4e6:	65 5b       	subi	r22, 0xB5	; 181
     4e8:	7e 4f       	sbci	r23, 0xFE	; 254
     4ea:	90 e0       	ldi	r25, 0x00	; 0
                    case 2:
                        itoa(data->field2,buffer,10);
                        strcat(command,buffer);
     4ec:	7b d7       	rcall	.+3830   	; 0x13e4 <__itoa_ncheck>
     4ee:	be 01       	movw	r22, r28
     4f0:	65 5b       	subi	r22, 0xB5	; 181
     4f2:	7e 4f       	sbci	r23, 0xFE	; 254
     4f4:	c7 01       	movw	r24, r14
     4f6:	51 d7       	rcall	.+3746   	; 0x139a <strcat>
                        break;
     4f8:	53 c0       	rjmp	.+166    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     4fa:	f4 01       	movw	r30, r8
     4fc:	83 81       	ldd	r24, Z+3	; 0x03
     4fe:	4a e0       	ldi	r20, 0x0A	; 10
     500:	be 01       	movw	r22, r28
     502:	65 5b       	subi	r22, 0xB5	; 181
     504:	7e 4f       	sbci	r23, 0xFE	; 254
     506:	90 e0       	ldi	r25, 0x00	; 0
                    case 3:
                        itoa(data->field3,buffer,10);
                        strcat(command,buffer);
     508:	6d d7       	rcall	.+3802   	; 0x13e4 <__itoa_ncheck>
     50a:	be 01       	movw	r22, r28
     50c:	65 5b       	subi	r22, 0xB5	; 181
     50e:	7e 4f       	sbci	r23, 0xFE	; 254
     510:	c7 01       	movw	r24, r14
                        break;
     512:	43 d7       	rcall	.+3718   	; 0x139a <strcat>
     514:	45 c0       	rjmp	.+138    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     516:	f4 01       	movw	r30, r8
     518:	84 81       	ldd	r24, Z+4	; 0x04
     51a:	4a e0       	ldi	r20, 0x0A	; 10
     51c:	be 01       	movw	r22, r28
     51e:	65 5b       	subi	r22, 0xB5	; 181
     520:	7e 4f       	sbci	r23, 0xFE	; 254
     522:	90 e0       	ldi	r25, 0x00	; 0
                    case 4:
                        itoa(data->field4,buffer,10);
                        strcat(command,buffer);
     524:	5f d7       	rcall	.+3774   	; 0x13e4 <__itoa_ncheck>
     526:	be 01       	movw	r22, r28
     528:	65 5b       	subi	r22, 0xB5	; 181
     52a:	7e 4f       	sbci	r23, 0xFE	; 254
     52c:	c7 01       	movw	r24, r14
                        break;
     52e:	35 d7       	rcall	.+3690   	; 0x139a <strcat>
     530:	37 c0       	rjmp	.+110    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     532:	f4 01       	movw	r30, r8
     534:	85 81       	ldd	r24, Z+5	; 0x05
     536:	4a e0       	ldi	r20, 0x0A	; 10
     538:	be 01       	movw	r22, r28
     53a:	65 5b       	subi	r22, 0xB5	; 181
     53c:	7e 4f       	sbci	r23, 0xFE	; 254
     53e:	90 e0       	ldi	r25, 0x00	; 0
                    case 5:
                        itoa(data->field5,buffer,10);
                        strcat(command,buffer);
     540:	51 d7       	rcall	.+3746   	; 0x13e4 <__itoa_ncheck>
     542:	be 01       	movw	r22, r28
     544:	65 5b       	subi	r22, 0xB5	; 181
     546:	7e 4f       	sbci	r23, 0xFE	; 254
     548:	c7 01       	movw	r24, r14
     54a:	27 d7       	rcall	.+3662   	; 0x139a <strcat>
     54c:	29 c0       	rjmp	.+82     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     54e:	f4 01       	movw	r30, r8
     550:	86 81       	ldd	r24, Z+6	; 0x06
     552:	4a e0       	ldi	r20, 0x0A	; 10
     554:	be 01       	movw	r22, r28
     556:	65 5b       	subi	r22, 0xB5	; 181
     558:	7e 4f       	sbci	r23, 0xFE	; 254
                        break;
                    case 6:
                        itoa(data->field6,buffer,10);
                        strcat(command,buffer);
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	43 d7       	rcall	.+3718   	; 0x13e4 <__itoa_ncheck>
     55e:	be 01       	movw	r22, r28
     560:	65 5b       	subi	r22, 0xB5	; 181
     562:	7e 4f       	sbci	r23, 0xFE	; 254
                        break;
     564:	c7 01       	movw	r24, r14
     566:	19 d7       	rcall	.+3634   	; 0x139a <strcat>
     568:	1b c0       	rjmp	.+54     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     56a:	f4 01       	movw	r30, r8
     56c:	87 81       	ldd	r24, Z+7	; 0x07
     56e:	4a e0       	ldi	r20, 0x0A	; 10
     570:	be 01       	movw	r22, r28
     572:	65 5b       	subi	r22, 0xB5	; 181
     574:	7e 4f       	sbci	r23, 0xFE	; 254
                    case 7:
                        itoa(data->field7,buffer,10);
                        strcat(command,buffer);
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	35 d7       	rcall	.+3690   	; 0x13e4 <__itoa_ncheck>
     57a:	be 01       	movw	r22, r28
     57c:	65 5b       	subi	r22, 0xB5	; 181
     57e:	7e 4f       	sbci	r23, 0xFE	; 254
                        break;
     580:	c7 01       	movw	r24, r14
     582:	0b d7       	rcall	.+3606   	; 0x139a <strcat>
     584:	0d c0       	rjmp	.+26     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     586:	f4 01       	movw	r30, r8
     588:	80 85       	ldd	r24, Z+8	; 0x08
     58a:	4a e0       	ldi	r20, 0x0A	; 10
     58c:	be 01       	movw	r22, r28
     58e:	65 5b       	subi	r22, 0xB5	; 181
     590:	7e 4f       	sbci	r23, 0xFE	; 254
     592:	90 e0       	ldi	r25, 0x00	; 0
                    case 8:
                        itoa(data->field8,buffer,10);
                        strcat(command,buffer);
     594:	27 d7       	rcall	.+3662   	; 0x13e4 <__itoa_ncheck>
     596:	be 01       	movw	r22, r28
     598:	65 5b       	subi	r22, 0xB5	; 181
     59a:	7e 4f       	sbci	r23, 0xFE	; 254
     59c:	c7 01       	movw	r24, r14
     59e:	fd d6       	rcall	.+3578   	; 0x139a <strcat>
    ESP_close_TCP();// CLOSE ANY TCP CONNECTION

    strcpy(command,"GET https://api.thingspeak.com/update?api_key=");
    strcat(command,api_key);
	 
    for(i=fieldStart; i<=fieldEnd; i++)
     5a0:	1f 5f       	subi	r17, 0xFF	; 255
     5a2:	01 17       	cp	r16, r17
     5a4:	08 f0       	brcs	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a6:	5a cf       	rjmp	.-332    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
                }

        }


    strcat(command,"\r\n");
     5a8:	de 01       	movw	r26, r28
     5aa:	11 96       	adiw	r26, 0x01	; 1
     5ac:	fd 01       	movw	r30, r26
     5ae:	01 90       	ld	r0, Z+
     5b0:	00 20       	and	r0, r0
     5b2:	e9 f7       	brne	.-6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	0f 2e       	mov	r0, r31
     5b8:	fd e0       	ldi	r31, 0x0D	; 13
     5ba:	ef 2e       	mov	r14, r31
     5bc:	fa e0       	ldi	r31, 0x0A	; 10
     5be:	ff 2e       	mov	r15, r31
     5c0:	f0 2d       	mov	r31, r0
     5c2:	f1 82       	std	Z+1, r15	; 0x01
     5c4:	e0 82       	st	Z, r14
    itoa(strlen(command),buffer,10);
     5c6:	12 82       	std	Z+2, r1	; 0x02
     5c8:	fd 01       	movw	r30, r26
     5ca:	01 90       	ld	r0, Z+
     5cc:	00 20       	and	r0, r0
     5ce:	e9 f7       	brne	.-6      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5d0:	cf 01       	movw	r24, r30
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	4a e0       	ldi	r20, 0x0A	; 10
     5d6:	be 01       	movw	r22, r28
     5d8:	65 5b       	subi	r22, 0xB5	; 181
     5da:	7e 4f       	sbci	r23, 0xFE	; 254
     5dc:	8a 1b       	sub	r24, r26
     5de:	9b 0b       	sbc	r25, r27
    strcpy(command_length,MESSAGE_LENGTH);
     5e0:	01 d7       	rcall	.+3586   	; 0x13e4 <__itoa_ncheck>
     5e2:	8e 01       	movw	r16, r28
     5e4:	03 5d       	subi	r16, 0xD3	; 211
     5e6:	1e 4f       	sbci	r17, 0xFE	; 254
     5e8:	8c e0       	ldi	r24, 0x0C	; 12
     5ea:	e8 e5       	ldi	r30, 0x58	; 88
     5ec:	f2 e0       	ldi	r31, 0x02	; 2
     5ee:	d8 01       	movw	r26, r16
    strcat(command_length,buffer);
     5f0:	01 90       	ld	r0, Z+
     5f2:	0d 92       	st	X+, r0
     5f4:	8a 95       	dec	r24
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5f8:	be 01       	movw	r22, r28
    strcat(command_length,"\r\n");
     5fa:	65 5b       	subi	r22, 0xB5	; 181
     5fc:	7e 4f       	sbci	r23, 0xFE	; 254
     5fe:	c8 01       	movw	r24, r16
     600:	cc d6       	rcall	.+3480   	; 0x139a <strcat>
     602:	f8 01       	movw	r30, r16
     604:	01 90       	ld	r0, Z+

    circularQueue_clearBuffer();
     606:	00 20       	and	r0, r0
    UART_string_tx(TCP_THINGSPEAK);
     608:	e9 f7       	brne	.-6      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	f1 82       	std	Z+1, r15	; 0x01
     60e:	e0 82       	st	Z, r14
    while(circularQueue_isEmpty() == TRUE);
     610:	12 82       	std	Z+2, r1	; 0x02
     612:	ac dd       	rcall	.-1192   	; 0x16c <circularQueue_clearBuffer>
     614:	84 e6       	ldi	r24, 0x64	; 100
     616:	92 e0       	ldi	r25, 0x02	; 2
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE  && circularQueue_searchSubStringInQueue("OK") == FALSE);
     618:	1a d5       	rcall	.+2612   	; 0x104e <UART_string_tx>
     61a:	95 dd       	rcall	.-1238   	; 0x146 <circularQueue_isEmpty>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	e9 f3       	breq	.-6      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     620:	8d e8       	ldi	r24, 0x8D	; 141
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	b0 dd       	rcall	.-1184   	; 0x186 <circularQueue_searchSubStringInQueue>
     626:	81 11       	cpse	r24, r1
     628:	05 c0       	rjmp	.+10     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     62a:	83 e9       	ldi	r24, 0x93	; 147
     62c:	92 e0       	ldi	r25, 0x02	; 2
    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     62e:	ab dd       	rcall	.-1194   	; 0x186 <circularQueue_searchSubStringInQueue>
     630:	88 23       	and	r24, r24
     632:	b1 f3       	breq	.-20     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     634:	8d e8       	ldi	r24, 0x8D	; 141
        {
            circularQueue_clearBuffer();
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	a6 dd       	rcall	.-1204   	; 0x186 <circularQueue_searchSubStringInQueue>
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	59 f4       	brne	.+22     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     63e:	96 dd       	rcall	.-1236   	; 0x16c <circularQueue_clearBuffer>
     640:	ff ef       	ldi	r31, 0xFF	; 255
     642:	23 ed       	ldi	r18, 0xD3	; 211
     644:	80 e3       	ldi	r24, 0x30	; 48
     646:	f1 50       	subi	r31, 0x01	; 1
     648:	20 40       	sbci	r18, 0x00	; 0
     64a:	80 40       	sbci	r24, 0x00	; 0
     64c:	e1 f7       	brne	.-8      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     650:	00 00       	nop
     652:	5a c0       	rjmp	.+180    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     654:	9f ef       	ldi	r25, 0xFF	; 255
     656:	e9 ef       	ldi	r30, 0xF9	; 249
     658:	f0 e0       	ldi	r31, 0x00	; 0
            return;

        }

    _delay_ms(20);
    circularQueue_clearBuffer();
     65a:	91 50       	subi	r25, 0x01	; 1
    UART_string_tx(command_length);
     65c:	e0 40       	sbci	r30, 0x00	; 0
     65e:	f0 40       	sbci	r31, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     662:	00 c0       	rjmp	.+0      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     664:	00 00       	nop
    while(circularQueue_isEmpty() == TRUE);
     666:	82 dd       	rcall	.-1276   	; 0x16c <circularQueue_clearBuffer>
     668:	ce 01       	movw	r24, r28
     66a:	83 5d       	subi	r24, 0xD3	; 211
     66c:	9e 4f       	sbci	r25, 0xFE	; 254
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE && circularQueue_searchSubStringInQueue("OK") == FALSE && circularQueue_searchSubStringInQueue("FAIL") == FALSE);
     66e:	ef d4       	rcall	.+2526   	; 0x104e <UART_string_tx>
     670:	6a dd       	rcall	.-1324   	; 0x146 <circularQueue_isEmpty>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	e9 f3       	breq	.-6      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     676:	8d e8       	ldi	r24, 0x8D	; 141
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	85 dd       	rcall	.-1270   	; 0x186 <circularQueue_searchSubStringInQueue>
     67c:	81 11       	cpse	r24, r1
     67e:	0a c0       	rjmp	.+20     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     680:	83 e9       	ldi	r24, 0x93	; 147
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	80 dd       	rcall	.-1280   	; 0x186 <circularQueue_searchSubStringInQueue>
     686:	81 11       	cpse	r24, r1
     688:	05 c0       	rjmp	.+10     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     68a:	86 e9       	ldi	r24, 0x96	; 150
     68c:	92 e0       	ldi	r25, 0x02	; 2

    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     68e:	7b dd       	rcall	.-1290   	; 0x186 <circularQueue_searchSubStringInQueue>
     690:	88 23       	and	r24, r24
     692:	89 f3       	breq	.-30     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     694:	8d e8       	ldi	r24, 0x8D	; 141
     696:	92 e0       	ldi	r25, 0x02	; 2
        {
            circularQueue_clearBuffer();
     698:	76 dd       	rcall	.-1300   	; 0x186 <circularQueue_searchSubStringInQueue>
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	59 f4       	brne	.+22     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     69e:	66 dd       	rcall	.-1332   	; 0x16c <circularQueue_clearBuffer>
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	83 ed       	ldi	r24, 0xD3	; 211
     6a4:	90 e3       	ldi	r25, 0x30	; 48
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
     6b0:	00 00       	nop
     6b2:	2a c0       	rjmp	.+84     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     6b4:	ef ef       	ldi	r30, 0xFF	; 255
     6b6:	f9 ef       	ldi	r31, 0xF9	; 249
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	e1 50       	subi	r30, 0x01	; 1
     6bc:	f0 40       	sbci	r31, 0x00	; 0
            return;

        }
	 
    _delay_ms(20);
    if (circularQueue_searchSubStringInQueue("OK") == TRUE)
     6be:	20 40       	sbci	r18, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     6c4:	00 00       	nop
     6c6:	83 e9       	ldi	r24, 0x93	; 147
     6c8:	92 e0       	ldi	r25, 0x02	; 2
        {
            while(circularQueue_searchSubStringInQueue(">") == FALSE);
     6ca:	5d dd       	rcall	.-1350   	; 0x186 <circularQueue_searchSubStringInQueue>
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	91 f4       	brne	.+36     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6d0:	8b e9       	ldi	r24, 0x9B	; 155
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	58 dd       	rcall	.-1360   	; 0x186 <circularQueue_searchSubStringInQueue>
            circularQueue_clearBuffer();
     6d6:	88 23       	and	r24, r24
     6d8:	d9 f3       	breq	.-10     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6da:	48 dd       	rcall	.-1392   	; 0x16c <circularQueue_clearBuffer>
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	90 e7       	ldi	r25, 0x70	; 112
     6e0:	e2 e0       	ldi	r30, 0x02	; 2
     6e2:	81 50       	subi	r24, 0x01	; 1
     6e4:	90 40       	sbci	r25, 0x00	; 0
     6e6:	e0 40       	sbci	r30, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
			 
            _delay_ms(50);
            UART_string_tx(command);
     6ec:	00 00       	nop
     6ee:	ce 01       	movw	r24, r28
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	ad d4       	rcall	.+2394   	; 0x104e <UART_string_tx>
        }

    circularQueue_clearBuffer();
     6f4:	3b dd       	rcall	.-1418   	; 0x16c <circularQueue_clearBuffer>
     6f6:	ff ef       	ldi	r31, 0xFF	; 255
     6f8:	23 ed       	ldi	r18, 0xD3	; 211
     6fa:	80 e3       	ldi	r24, 0x30	; 48
     6fc:	f1 50       	subi	r31, 0x01	; 1
     6fe:	20 40       	sbci	r18, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
     704:	00 c0       	rjmp	.+0      	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
     706:	00 00       	nop
     708:	c1 5b       	subi	r28, 0xB1	; 177
	 
    _delay_ms(1000);
}
     70a:	de 4f       	sbci	r29, 0xFE	; 254
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <readFieldValue>:
     730:	cf 93       	push	r28


}

uint8_t readFieldValue(uint8_t* data)
{
     732:	df 93       	push	r29
     734:	00 d0       	rcall	.+0      	; 0x736 <readFieldValue+0x6>
     736:	1f 92       	push	r1
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	dc 01       	movw	r26, r24
    int i = 0;
    uint8_t count=0;
    uint8_t buffer[5]= {'1','5','\0'};
     740:	9e 01       	movw	r18, r28
     742:	2f 5f       	subi	r18, 0xFF	; 255
     744:	3f 4f       	sbci	r19, 0xFF	; 255
     746:	85 e0       	ldi	r24, 0x05	; 5
     748:	f9 01       	movw	r30, r18
     74a:	11 92       	st	Z+, r1
     74c:	8a 95       	dec	r24
     74e:	e9 f7       	brne	.-6      	; 0x74a <readFieldValue+0x1a>
     750:	81 e3       	ldi	r24, 0x31	; 49
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	85 e3       	ldi	r24, 0x35	; 53
     756:	8a 83       	std	Y+2, r24	; 0x02
     758:	bd 01       	movw	r22, r26
     75a:	69 5f       	subi	r22, 0xF9	; 249
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t readFieldValue(uint8_t* data)
{
    int i = 0;
    uint8_t count=0;
     75e:	40 e0       	ldi	r20, 0x00	; 0
    uint8_t buffer[5]= {'1','5','\0'};
    uint8_t ret;
    for(i=7; i<strlen(data); i++)
     760:	27 e0       	ldi	r18, 0x07	; 7
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	1d c0       	rjmp	.+58     	; 0x7a0 <readFieldValue+0x70>
        {
            if(  (data[i]>='0' && data[i]<='9') || data[i]=='-')
     766:	fb 01       	movw	r30, r22
     768:	91 91       	ld	r25, Z+
     76a:	bf 01       	movw	r22, r30
     76c:	80 ed       	ldi	r24, 0xD0	; 208
     76e:	89 0f       	add	r24, r25
     770:	8a 30       	cpi	r24, 0x0A	; 10
     772:	10 f0       	brcs	.+4      	; 0x778 <readFieldValue+0x48>
     774:	9d 32       	cpi	r25, 0x2D	; 45
     776:	81 f4       	brne	.+32     	; 0x798 <readFieldValue+0x68>
                {

                    buffer[count] = data[i];
     778:	e1 e0       	ldi	r30, 0x01	; 1
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ec 0f       	add	r30, r28
     77e:	fd 1f       	adc	r31, r29
     780:	e4 0f       	add	r30, r20
     782:	f1 1d       	adc	r31, r1
     784:	90 83       	st	Z, r25
                    count++;
     786:	4f 5f       	subi	r20, 0xFF	; 255
                    buffer[count]='\0';
     788:	e1 e0       	ldi	r30, 0x01	; 1
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	ec 0f       	add	r30, r28
     78e:	fd 1f       	adc	r31, r29
     790:	e4 0f       	add	r30, r20
     792:	f1 1d       	adc	r31, r1
     794:	10 82       	st	Z, r1
     796:	02 c0       	rjmp	.+4      	; 0x79c <readFieldValue+0x6c>
                }

            else if (data[i]==',')
     798:	9c 32       	cpi	r25, 0x2C	; 44
     79a:	61 f0       	breq	.+24     	; 0x7b4 <readFieldValue+0x84>
{
    int i = 0;
    uint8_t count=0;
    uint8_t buffer[5]= {'1','5','\0'};
    uint8_t ret;
    for(i=7; i<strlen(data); i++)
     79c:	2f 5f       	subi	r18, 0xFF	; 255
     79e:	3f 4f       	sbci	r19, 0xFF	; 255
     7a0:	fd 01       	movw	r30, r26
     7a2:	01 90       	ld	r0, Z+
     7a4:	00 20       	and	r0, r0
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <readFieldValue+0x72>
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	ea 1b       	sub	r30, r26
     7ac:	fb 0b       	sbc	r31, r27
     7ae:	2e 17       	cp	r18, r30
     7b0:	3f 07       	cpc	r19, r31
     7b2:	c8 f2       	brcs	.-78     	; 0x766 <readFieldValue+0x36>
                {
                    break;
                }
        }

    ret = atoi(buffer);
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	d3 d5       	rcall	.+2982   	; 0x1360 <atoi>

    return ret;

     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <jasonParser>:
    _delay_ms(1000);
}


uint8_t jasonParser(uint8_t* data, uint8_t numberOfFields, Json * Jdata)
{
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2a 97       	sbiw	r28, 0x0a	; 10
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	7c 01       	movw	r14, r24
     7ee:	b6 2e       	mov	r11, r22
     7f0:	6a 01       	movw	r12, r20
    uint8_t ret=0;
    uint8_t i=0;
    uint8_t Field[10];
    uint8_t *splitedata;
    uint8_t splitRet;
    strcpy(Field,"field0");
     7f2:	87 e0       	ldi	r24, 0x07	; 7
     7f4:	e8 eb       	ldi	r30, 0xB8	; 184
     7f6:	f2 e0       	ldi	r31, 0x02	; 2
     7f8:	de 01       	movw	r26, r28
     7fa:	11 96       	adiw	r26, 0x01	; 1
     7fc:	01 90       	ld	r0, Z+
     7fe:	0d 92       	st	X+, r0
     800:	8a 95       	dec	r24
     802:	e1 f7       	brne	.-8      	; 0x7fc <jasonParser+0x32>
    Field[5]='0'+i;
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	8e 83       	std	Y+6, r24	; 0x06

    if(strstr(data,"IPD") == 0)
     808:	6f eb       	ldi	r22, 0xBF	; 191
     80a:	72 e0       	ldi	r23, 0x02	; 2
     80c:	c7 01       	movw	r24, r14
     80e:	d0 d5       	rcall	.+2976   	; 0x13b0 <strstr>
     810:	89 2b       	or	r24, r25
     812:	09 f4       	brne	.+2      	; 0x816 <jasonParser+0x4c>
     814:	4a c0       	rjmp	.+148    	; 0x8aa <jasonParser+0xe0>

        }

    else
        {
            for(i=1; i<= numberOfFields; i++)
     816:	bb 20       	and	r11, r11
     818:	09 f4       	brne	.+2      	; 0x81c <jasonParser+0x52>
     81a:	49 c0       	rjmp	.+146    	; 0x8ae <jasonParser+0xe4>
     81c:	11 e0       	ldi	r17, 0x01	; 1
     81e:	00 e0       	ldi	r16, 0x00	; 0
                {
                    strcpy(Field,"field");
     820:	86 e0       	ldi	r24, 0x06	; 6
     822:	e2 eb       	ldi	r30, 0xB2	; 178
     824:	f2 e0       	ldi	r31, 0x02	; 2
     826:	de 01       	movw	r26, r28
     828:	11 96       	adiw	r26, 0x01	; 1
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <jasonParser+0x60>
                    Field[5]='0'+i;
     832:	80 e3       	ldi	r24, 0x30	; 48
     834:	81 0f       	add	r24, r17
     836:	8e 83       	std	Y+6, r24	; 0x06
                    splitedata = strstr(data,Field);
     838:	be 01       	movw	r22, r28
     83a:	6f 5f       	subi	r22, 0xFF	; 255
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	c7 01       	movw	r24, r14
     840:	b7 d5       	rcall	.+2926   	; 0x13b0 <strstr>

                    if(splitedata!=0 )
     842:	00 97       	sbiw	r24, 0x00	; 0
                        {
                            splitRet = readFieldValue(splitedata);
     844:	69 f1       	breq	.+90     	; 0x8a0 <jasonParser+0xd6>
     846:	74 df       	rcall	.-280    	; 0x730 <readFieldValue>
     848:	28 2f       	mov	r18, r24

                            switch(i)
     84a:	81 2f       	mov	r24, r17
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	fc 01       	movw	r30, r24
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	e8 30       	cpi	r30, 0x08	; 8
     854:	f1 05       	cpc	r31, r1
     856:	20 f5       	brcc	.+72     	; 0x8a0 <jasonParser+0xd6>
     858:	88 27       	eor	r24, r24
     85a:	e6 58       	subi	r30, 0x86	; 134
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	8f 4f       	sbci	r24, 0xFF	; 255
     860:	77 c5       	rjmp	.+2798   	; 0x1350 <__tablejump2__>
                                {
                                    case 1:
                                        Jdata->field1=splitRet;
     862:	f6 01       	movw	r30, r12
     864:	21 83       	std	Z+1, r18	; 0x01
                                        ret++;
     866:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     868:	1b c0       	rjmp	.+54     	; 0x8a0 <jasonParser+0xd6>
                                    case 2:
                                        Jdata->field2=splitRet;
     86a:	f6 01       	movw	r30, r12
     86c:	22 83       	std	Z+2, r18	; 0x02
                                        ret++;
     86e:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     870:	17 c0       	rjmp	.+46     	; 0x8a0 <jasonParser+0xd6>
                                    case 3:
                                        Jdata->field3=splitRet;
     872:	f6 01       	movw	r30, r12
     874:	23 83       	std	Z+3, r18	; 0x03
                                        ret++;
     876:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     878:	13 c0       	rjmp	.+38     	; 0x8a0 <jasonParser+0xd6>
                                    case 4:
                                        Jdata->field4=splitRet;
     87a:	f6 01       	movw	r30, r12
     87c:	24 83       	std	Z+4, r18	; 0x04
                                        ret++;
     87e:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     880:	0f c0       	rjmp	.+30     	; 0x8a0 <jasonParser+0xd6>
                                    case 5:
                                        Jdata->field5=splitRet;
     882:	f6 01       	movw	r30, r12
     884:	25 83       	std	Z+5, r18	; 0x05
                                        ret++;
     886:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     888:	0b c0       	rjmp	.+22     	; 0x8a0 <jasonParser+0xd6>
                                    case 6:
                                        Jdata->field6=splitRet;
     88a:	f6 01       	movw	r30, r12
     88c:	26 83       	std	Z+6, r18	; 0x06
                                        ret++;
     88e:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <jasonParser+0xd6>
                                    case 7:
                                        Jdata->field7=splitRet;
     892:	f6 01       	movw	r30, r12
     894:	27 83       	std	Z+7, r18	; 0x07
                                        ret++;
     896:	0f 5f       	subi	r16, 0xFF	; 255
                                        break;
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <jasonParser+0xd6>
                                    case 8:
                                        Jdata->field8=splitRet;
     89a:	f6 01       	movw	r30, r12
     89c:	20 87       	std	Z+8, r18	; 0x08
                                        ret++;
     89e:	0f 5f       	subi	r16, 0xFF	; 255

        }

    else
        {
            for(i=1; i<= numberOfFields; i++)
     8a0:	1f 5f       	subi	r17, 0xFF	; 255
     8a2:	b1 16       	cp	r11, r17
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <jasonParser+0xde>
     8a6:	bc cf       	rjmp	.-136    	; 0x820 <jasonParser+0x56>
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <jasonParser+0xe6>
    Field[5]='0'+i;

    if(strstr(data,"IPD") == 0)
        {

            ret = 0;
     8aa:	00 e0       	ldi	r16, 0x00	; 0
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <jasonParser+0xe6>

        }

    else
        {
            for(i=1; i<= numberOfFields; i++)
     8ae:	00 e0       	ldi	r16, 0x00	; 0


    return ret;


}
     8b0:	80 2f       	mov	r24, r16
     8b2:	2a 96       	adiw	r28, 0x0a	; 10
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	08 95       	ret

000008d2 <ESP_Read>:
}


//https://api.thingspeak.com/channels/872668/feeds/last.json?api_key=HFCKEVJ6RK7YOMS3
void ESP_Read(Json* Jdata, uint8_t* channelID,uint8_t* api_key,uint8_t numberOfFields)
{
     8d2:	8f 92       	push	r8
     8d4:	9f 92       	push	r9
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	cb 5e       	subi	r28, 0xEB	; 235
     8ee:	d1 09       	sbc	r29, r1
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	6c 01       	movw	r12, r24
     8fc:	4b 01       	movw	r8, r22
     8fe:	7a 01       	movw	r14, r20
     900:	b2 2e       	mov	r11, r18
    uint8_t command[200];
    uint8_t command_length[30];
    uint8_t buffer[5];
    uint8_t *data;

    ESP_close_TCP();// CLOSE ANY TCP CONNECTION
     902:	63 dd       	rcall	.-1338   	; 0x3ca <ESP_close_TCP>
	 wdt_reset();
     904:	a8 95       	wdr
    strcpy(command,"GET https://api.thingspeak.com/channels/");
     906:	89 e2       	ldi	r24, 0x29	; 41
     908:	e3 ec       	ldi	r30, 0xC3	; 195
     90a:	f2 e0       	ldi	r31, 0x02	; 2
     90c:	8e 01       	movw	r16, r28
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	d8 01       	movw	r26, r16
     914:	01 90       	ld	r0, Z+
     916:	0d 92       	st	X+, r0
     918:	8a 95       	dec	r24
     91a:	e1 f7       	brne	.-8      	; 0x914 <ESP_Read+0x42>
    strcat(command,channelID);
     91c:	b4 01       	movw	r22, r8
     91e:	c8 01       	movw	r24, r16
     920:	3c d5       	rcall	.+2680   	; 0x139a <strcat>
    strcat(command,"/feeds/last.json?api_key=");
     922:	d8 01       	movw	r26, r16
     924:	0d 90       	ld	r0, X+
     926:	00 20       	and	r0, r0
     928:	e9 f7       	brne	.-6      	; 0x924 <ESP_Read+0x52>
     92a:	11 97       	sbiw	r26, 0x01	; 1
     92c:	8a e1       	ldi	r24, 0x1A	; 26
     92e:	ec ee       	ldi	r30, 0xEC	; 236
     930:	f2 e0       	ldi	r31, 0x02	; 2
     932:	01 90       	ld	r0, Z+
     934:	0d 92       	st	X+, r0
     936:	8a 95       	dec	r24
     938:	e1 f7       	brne	.-8      	; 0x932 <ESP_Read+0x60>
    strcat(command,api_key);
     93a:	b7 01       	movw	r22, r14
     93c:	c8 01       	movw	r24, r16
     93e:	2d d5       	rcall	.+2650   	; 0x139a <strcat>
    strcat(command,"\r\n");
     940:	f8 01       	movw	r30, r16
     942:	01 90       	ld	r0, Z+
     944:	00 20       	and	r0, r0
     946:	e9 f7       	brne	.-6      	; 0x942 <ESP_Read+0x70>
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	0f 2e       	mov	r0, r31
     94c:	fd e0       	ldi	r31, 0x0D	; 13
     94e:	ef 2e       	mov	r14, r31
     950:	fa e0       	ldi	r31, 0x0A	; 10
     952:	ff 2e       	mov	r15, r31
     954:	f0 2d       	mov	r31, r0
     956:	f1 82       	std	Z+1, r15	; 0x01
     958:	e0 82       	st	Z, r14
     95a:	12 82       	std	Z+2, r1	; 0x02
    itoa(strlen(command),buffer,10);
     95c:	f8 01       	movw	r30, r16
     95e:	01 90       	ld	r0, Z+
     960:	00 20       	and	r0, r0
     962:	e9 f7       	brne	.-6      	; 0x95e <ESP_Read+0x8c>
     964:	cf 01       	movw	r24, r30
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	4a e0       	ldi	r20, 0x0A	; 10
     96a:	be 01       	movw	r22, r28
     96c:	69 51       	subi	r22, 0x19	; 25
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	80 1b       	sub	r24, r16
     972:	91 0b       	sbc	r25, r17
     974:	37 d5       	rcall	.+2670   	; 0x13e4 <__itoa_ncheck>
    strcpy(command_length,MESSAGE_LENGTH);
     976:	08 53       	subi	r16, 0x38	; 56
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	8c e0       	ldi	r24, 0x0C	; 12
     97c:	e8 e5       	ldi	r30, 0x58	; 88
     97e:	f2 e0       	ldi	r31, 0x02	; 2
     980:	d8 01       	movw	r26, r16
     982:	01 90       	ld	r0, Z+
     984:	0d 92       	st	X+, r0
     986:	8a 95       	dec	r24
     988:	e1 f7       	brne	.-8      	; 0x982 <ESP_Read+0xb0>
    strcat(command_length,buffer);
     98a:	be 01       	movw	r22, r28
     98c:	69 51       	subi	r22, 0x19	; 25
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	c8 01       	movw	r24, r16
     992:	03 d5       	rcall	.+2566   	; 0x139a <strcat>
    strcat(command_length,"\r\n");
     994:	f8 01       	movw	r30, r16
     996:	01 90       	ld	r0, Z+
     998:	00 20       	and	r0, r0
     99a:	e9 f7       	brne	.-6      	; 0x996 <ESP_Read+0xc4>
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	f1 82       	std	Z+1, r15	; 0x01

    circularQueue_clearBuffer();
     9a0:	e0 82       	st	Z, r14
     9a2:	12 82       	std	Z+2, r1	; 0x02
    UART_string_tx(TCP_THINGSPEAK);
     9a4:	e3 db       	rcall	.-2106   	; 0x16c <circularQueue_clearBuffer>
     9a6:	84 e6       	ldi	r24, 0x64	; 100
     9a8:	92 e0       	ldi	r25, 0x02	; 2
    while(circularQueue_isEmpty() == TRUE);
     9aa:	51 d3       	rcall	.+1698   	; 0x104e <UART_string_tx>
     9ac:	cc db       	rcall	.-2152   	; 0x146 <circularQueue_isEmpty>
     9ae:	81 30       	cpi	r24, 0x01	; 1
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE  && circularQueue_searchSubStringInQueue("OK") == FALSE);
     9b0:	e9 f3       	breq	.-6      	; 0x9ac <ESP_Read+0xda>
     9b2:	8d e8       	ldi	r24, 0x8D	; 141
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	e7 db       	rcall	.-2098   	; 0x186 <circularQueue_searchSubStringInQueue>
     9b8:	81 11       	cpse	r24, r1
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <ESP_Read+0xf4>
     9bc:	83 e9       	ldi	r24, 0x93	; 147
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	e2 db       	rcall	.-2108   	; 0x186 <circularQueue_searchSubStringInQueue>
     9c2:	88 23       	and	r24, r24
    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     9c4:	b1 f3       	breq	.-20     	; 0x9b2 <ESP_Read+0xe0>
     9c6:	8d e8       	ldi	r24, 0x8D	; 141
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	dd db       	rcall	.-2118   	; 0x186 <circularQueue_searchSubStringInQueue>
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	59 f4       	brne	.+22     	; 0x9e6 <ESP_Read+0x114>
        {
            circularQueue_clearBuffer();
     9d0:	cd db       	rcall	.-2150   	; 0x16c <circularQueue_clearBuffer>
     9d2:	ff ef       	ldi	r31, 0xFF	; 255
     9d4:	23 ed       	ldi	r18, 0xD3	; 211
     9d6:	80 e3       	ldi	r24, 0x30	; 48
     9d8:	f1 50       	subi	r31, 0x01	; 1
     9da:	20 40       	sbci	r18, 0x00	; 0
     9dc:	80 40       	sbci	r24, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <ESP_Read+0x106>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <ESP_Read+0x110>
     9e2:	00 00       	nop
     9e4:	71 c0       	rjmp	.+226    	; 0xac8 <ESP_Read+0x1f6>
     9e6:	9f ef       	ldi	r25, 0xFF	; 255
     9e8:	e9 ef       	ldi	r30, 0xF9	; 249
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	91 50       	subi	r25, 0x01	; 1
     9ee:	e0 40       	sbci	r30, 0x00	; 0
     9f0:	f0 40       	sbci	r31, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <ESP_Read+0x11a>
            return;

        }

    _delay_ms(20);
    circularQueue_clearBuffer();
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <ESP_Read+0x124>
     9f6:	00 00       	nop
    UART_string_tx(command_length);
     9f8:	b9 db       	rcall	.-2190   	; 0x16c <circularQueue_clearBuffer>
     9fa:	ce 01       	movw	r24, r28
     9fc:	87 53       	subi	r24, 0x37	; 55
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
    while(circularQueue_isEmpty() == TRUE);
     a00:	26 d3       	rcall	.+1612   	; 0x104e <UART_string_tx>
     a02:	a1 db       	rcall	.-2238   	; 0x146 <circularQueue_isEmpty>
     a04:	81 30       	cpi	r24, 0x01	; 1
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE && circularQueue_searchSubStringInQueue("OK") == FALSE && circularQueue_searchSubStringInQueue("FAIL") == FALSE);
     a06:	e9 f3       	breq	.-6      	; 0xa02 <ESP_Read+0x130>
     a08:	8d e8       	ldi	r24, 0x8D	; 141
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	bc db       	rcall	.-2184   	; 0x186 <circularQueue_searchSubStringInQueue>
     a0e:	81 11       	cpse	r24, r1
     a10:	0a c0       	rjmp	.+20     	; 0xa26 <ESP_Read+0x154>
     a12:	83 e9       	ldi	r24, 0x93	; 147
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	b7 db       	rcall	.-2194   	; 0x186 <circularQueue_searchSubStringInQueue>
     a18:	81 11       	cpse	r24, r1
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <ESP_Read+0x154>
     a1c:	86 e9       	ldi	r24, 0x96	; 150
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	b2 db       	rcall	.-2204   	; 0x186 <circularQueue_searchSubStringInQueue>
     a22:	88 23       	and	r24, r24
     a24:	89 f3       	breq	.-30     	; 0xa08 <ESP_Read+0x136>
	 wdt_reset();
     a26:	a8 95       	wdr
    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE || circularQueue_searchSubStringInQueue("FAIL") == TRUE)
     a28:	8d e8       	ldi	r24, 0x8D	; 141
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	ac db       	rcall	.-2216   	; 0x186 <circularQueue_searchSubStringInQueue>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	29 f0       	breq	.+10     	; 0xa3c <ESP_Read+0x16a>
     a32:	86 e9       	ldi	r24, 0x96	; 150
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	a7 db       	rcall	.-2226   	; 0x186 <circularQueue_searchSubStringInQueue>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	59 f4       	brne	.+22     	; 0xa52 <ESP_Read+0x180>
     a3c:	97 db       	rcall	.-2258   	; 0x16c <circularQueue_clearBuffer>
     a3e:	2f ef       	ldi	r18, 0xFF	; 255
        {
            circularQueue_clearBuffer();
     a40:	83 ed       	ldi	r24, 0xD3	; 211
     a42:	90 e3       	ldi	r25, 0x30	; 48
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	90 40       	sbci	r25, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <ESP_Read+0x172>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <ESP_Read+0x17c>
     a4e:	00 00       	nop
     a50:	3b c0       	rjmp	.+118    	; 0xac8 <ESP_Read+0x1f6>
     a52:	ef ef       	ldi	r30, 0xFF	; 255
     a54:	f9 ef       	ldi	r31, 0xF9	; 249
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	e1 50       	subi	r30, 0x01	; 1
     a5a:	f0 40       	sbci	r31, 0x00	; 0
     a5c:	20 40       	sbci	r18, 0x00	; 0
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <ESP_Read+0x186>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <ESP_Read+0x190>
     a62:	00 00       	nop
            return;

        }

    _delay_ms(20);
	 wdt_reset();
     a64:	a8 95       	wdr
    if (circularQueue_searchSubStringInQueue("OK") == TRUE)
     a66:	83 e9       	ldi	r24, 0x93	; 147
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	8d db       	rcall	.-2278   	; 0x186 <circularQueue_searchSubStringInQueue>
     a6c:	81 30       	cpi	r24, 0x01	; 1
        {
            while(circularQueue_searchSubStringInQueue(">") == FALSE);
     a6e:	11 f5       	brne	.+68     	; 0xab4 <ESP_Read+0x1e2>
     a70:	8b e9       	ldi	r24, 0x9B	; 155
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	88 db       	rcall	.-2288   	; 0x186 <circularQueue_searchSubStringInQueue>
     a76:	88 23       	and	r24, r24
     a78:	d9 f3       	breq	.-10     	; 0xa70 <ESP_Read+0x19e>
            circularQueue_clearBuffer();
     a7a:	78 db       	rcall	.-2320   	; 0x16c <circularQueue_clearBuffer>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	90 e7       	ldi	r25, 0x70	; 112
     a80:	e2 e0       	ldi	r30, 0x02	; 2
     a82:	81 50       	subi	r24, 0x01	; 1
     a84:	90 40       	sbci	r25, 0x00	; 0
     a86:	e0 40       	sbci	r30, 0x00	; 0
            _delay_ms(50);

            UART_string_tx(command);
     a88:	e1 f7       	brne	.-8      	; 0xa82 <ESP_Read+0x1b0>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <ESP_Read+0x1ba>
     a8c:	00 00       	nop
     a8e:	ce 01       	movw	r24, r28
            while(circularQueue_searchSubStringInQueue("CLOSED") == FALSE);
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	dd d2       	rcall	.+1466   	; 0x104e <UART_string_tx>
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	76 db       	rcall	.-2324   	; 0x186 <circularQueue_searchSubStringInQueue>
     a9a:	88 23       	and	r24, r24
     a9c:	d9 f3       	breq	.-10     	; 0xa94 <ESP_Read+0x1c2>
     a9e:	8f e1       	ldi	r24, 0x1F	; 31
     aa0:	9e e4       	ldi	r25, 0x4E	; 78
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <ESP_Read+0x1d0>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <ESP_Read+0x1d6>
            _delay_ms(5);
            data=circularQueue_bufferPointer();
     aa8:	00 00       	nop
     aaa:	78 db       	rcall	.-2320   	; 0x19c <circularQueue_bufferPointer>
            jasonParser(data,numberOfFields,Jdata);
     aac:	a6 01       	movw	r20, r12
     aae:	6b 2d       	mov	r22, r11
     ab0:	8c de       	rcall	.-744    	; 0x7ca <jasonParser>
     ab2:	5c db       	rcall	.-2376   	; 0x16c <circularQueue_clearBuffer>
            circularQueue_clearBuffer();
     ab4:	5b db       	rcall	.-2378   	; 0x16c <circularQueue_clearBuffer>
     ab6:	9f ef       	ldi	r25, 0xFF	; 255
        }

    circularQueue_clearBuffer();
     ab8:	e3 ed       	ldi	r30, 0xD3	; 211
     aba:	f0 e3       	ldi	r31, 0x30	; 48
     abc:	91 50       	subi	r25, 0x01	; 1
     abe:	e0 40       	sbci	r30, 0x00	; 0
     ac0:	f0 40       	sbci	r31, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <ESP_Read+0x1ea>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <ESP_Read+0x1f4>
     ac6:	00 00       	nop
     ac8:	c5 51       	subi	r28, 0x15	; 21
     aca:	df 4f       	sbci	r29, 0xFF	; 255
     acc:	0f b6       	in	r0, 0x3f	; 63
    _delay_ms(1000);
}
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	bf 90       	pop	r11
     ae8:	9f 90       	pop	r9
     aea:	8f 90       	pop	r8
     aec:	08 95       	ret

00000aee <relayModuleControl_Sol>:
        }

}
#endif
void relayModuleControl_Sol(Json * Jdata)
{
     aee:	fc 01       	movw	r30, r24
    if(Jdata->field1 == 0)
     af0:	81 81       	ldd	r24, Z+1	; 0x01
     af2:	81 11       	cpse	r24, r1
     af4:	02 c0       	rjmp	.+4      	; 0xafa <relayModuleControl_Sol+0xc>
        {
            SOL_1_OFF;
     af6:	a2 9a       	sbi	0x14, 2	; 20
     af8:	01 c0       	rjmp	.+2      	; 0xafc <relayModuleControl_Sol+0xe>
        }
    else
        {
            SOL_1_ON
     afa:	a2 98       	cbi	0x14, 2	; 20
        }


    if(Jdata->field2 == 0)
     afc:	82 81       	ldd	r24, Z+2	; 0x02
     afe:	81 11       	cpse	r24, r1
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <relayModuleControl_Sol+0x18>
        {
            SOL_2_OFF;
     b02:	a0 9a       	sbi	0x14, 0	; 20
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <relayModuleControl_Sol+0x1a>
        }
    else
        {
            SOL_2_ON
     b06:	a0 98       	cbi	0x14, 0	; 20
        }
    if(Jdata->field3 == 0)
     b08:	83 81       	ldd	r24, Z+3	; 0x03
     b0a:	81 11       	cpse	r24, r1
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <relayModuleControl_Sol+0x2c>
        {
            SOL_3_OFF;
     b0e:	ab e0       	ldi	r26, 0x0B	; 11
     b10:	b1 e0       	ldi	r27, 0x01	; 1
     b12:	8c 91       	ld	r24, X
     b14:	80 64       	ori	r24, 0x40	; 64
     b16:	8c 93       	st	X, r24
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <relayModuleControl_Sol+0x36>
        }
    else
        {
            SOL_3_ON
     b1a:	ab e0       	ldi	r26, 0x0B	; 11
     b1c:	b1 e0       	ldi	r27, 0x01	; 1
     b1e:	8c 91       	ld	r24, X
     b20:	8f 7b       	andi	r24, 0xBF	; 191
     b22:	8c 93       	st	X, r24
        }
    if(Jdata->field4 == 0)
     b24:	84 81       	ldd	r24, Z+4	; 0x04
     b26:	81 11       	cpse	r24, r1
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <relayModuleControl_Sol+0x48>
        {
            SOL_4_OFF;
     b2a:	eb e0       	ldi	r30, 0x0B	; 11
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	80 61       	ori	r24, 0x10	; 16
     b32:	80 83       	st	Z, r24
     b34:	08 95       	ret
        }
    else
        {
            SOL_4_ON
     b36:	eb e0       	ldi	r30, 0x0B	; 11
     b38:	f1 e0       	ldi	r31, 0x01	; 1
     b3a:	80 81       	ld	r24, Z
     b3c:	8f 7e       	andi	r24, 0xEF	; 239
     b3e:	80 83       	st	Z, r24
     b40:	08 95       	ret

00000b42 <GPOIcontrol_FVLM>:

}

/*Fan Ventilation Light Med*/
void GPOIcontrol_FVLM(struct Json * Jdata)
{
     b42:	fc 01       	movw	r30, r24
	if(Jdata->field1 == 0)
     b44:	81 81       	ldd	r24, Z+1	; 0x01
     b46:	81 11       	cpse	r24, r1
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <GPOIcontrol_FVLM+0x14>
	{
		FLYMED_OFF;
     b4a:	ab e0       	ldi	r26, 0x0B	; 11
     b4c:	b1 e0       	ldi	r27, 0x01	; 1
     b4e:	8c 91       	ld	r24, X
     b50:	84 60       	ori	r24, 0x04	; 4
     b52:	8c 93       	st	X, r24
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <GPOIcontrol_FVLM+0x1e>
	}
	else
	{
		FLYMED_ON;
     b56:	ab e0       	ldi	r26, 0x0B	; 11
     b58:	b1 e0       	ldi	r27, 0x01	; 1
     b5a:	8c 91       	ld	r24, X
     b5c:	8b 7f       	andi	r24, 0xFB	; 251
     b5e:	8c 93       	st	X, r24
	}


	if(Jdata->field2 == 0)
     b60:	82 81       	ldd	r24, Z+2	; 0x02
     b62:	81 11       	cpse	r24, r1
     b64:	06 c0       	rjmp	.+12     	; 0xb72 <GPOIcontrol_FVLM+0x30>
	{
		VENTILATION_OFF;
     b66:	ab e0       	ldi	r26, 0x0B	; 11
     b68:	b1 e0       	ldi	r27, 0x01	; 1
     b6a:	8c 91       	ld	r24, X
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	8c 93       	st	X, r24
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <GPOIcontrol_FVLM+0x3a>
	}
	else
	{
		VENTILATION_ON;
     b72:	ab e0       	ldi	r26, 0x0B	; 11
     b74:	b1 e0       	ldi	r27, 0x01	; 1
     b76:	8c 91       	ld	r24, X
     b78:	8e 7f       	andi	r24, 0xFE	; 254
     b7a:	8c 93       	st	X, r24
	}
	if(Jdata->field3 == 0)
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	81 11       	cpse	r24, r1
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <GPOIcontrol_FVLM+0x44>
	{
		LIGHT_1_OFF;
     b82:	2a 9a       	sbi	0x05, 2	; 5
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <GPOIcontrol_FVLM+0x46>
	}
	else
	{
		LIGHT_1_ON;
     b86:	2a 98       	cbi	0x05, 2	; 5
	}
	if(Jdata->field4 == 0)
     b88:	84 81       	ldd	r24, Z+4	; 0x04
     b8a:	81 11       	cpse	r24, r1
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <GPOIcontrol_FVLM+0x50>
	{
		LIGHT_2_OFF;
     b8e:	28 9a       	sbi	0x05, 0	; 5
     b90:	08 95       	ret
	}
	else
	{
		LIGHT_2_ON;
     b92:	28 98       	cbi	0x05, 0	; 5
     b94:	08 95       	ret

00000b96 <GPIO_init>:

}

void GPIO_init(void)
{
	 DDR_FLYMED_CONFIG;
     b96:	ea e0       	ldi	r30, 0x0A	; 10
     b98:	f1 e0       	ldi	r31, 0x01	; 1
     b9a:	80 81       	ld	r24, Z
     b9c:	84 60       	ori	r24, 0x04	; 4
     b9e:	80 83       	st	Z, r24
	 DDR_LIGHT_1_CONFIG;
     ba0:	22 9a       	sbi	0x04, 2	; 4
	 DDR_VENTILATION_CONFIG;
     ba2:	80 81       	ld	r24, Z
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 83       	st	Z, r24
	 
	 DDR_SOL_1_CONFIG;
     ba8:	9a 9a       	sbi	0x13, 2	; 19
	 DDR_SOL_2_CONFIG;
     baa:	98 9a       	sbi	0x13, 0	; 19
	 DDR_SOL_3_CONFIG;
     bac:	80 81       	ld	r24, Z
     bae:	80 64       	ori	r24, 0x40	; 64
     bb0:	80 83       	st	Z, r24
	 DDR_SOL_4_CONFIG;
     bb2:	80 81       	ld	r24, Z
     bb4:	80 61       	ori	r24, 0x10	; 16
     bb6:	80 83       	st	Z, r24
	 
	 SOL_1_OFF;
     bb8:	a2 9a       	sbi	0x14, 2	; 20
	 SOL_2_OFF;
     bba:	a0 9a       	sbi	0x14, 0	; 20
	 SOL_3_OFF;
     bbc:	eb e0       	ldi	r30, 0x0B	; 11
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	80 81       	ld	r24, Z
     bc2:	80 64       	ori	r24, 0x40	; 64
     bc4:	80 83       	st	Z, r24
	 SOL_4_OFF;
     bc6:	80 81       	ld	r24, Z
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	80 83       	st	Z, r24
	 
	 FLYMED_OFF;
     bcc:	80 81       	ld	r24, Z
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	80 83       	st	Z, r24
	 LIGHT_1_ON;
     bd2:	2a 98       	cbi	0x05, 2	; 5
	 VENTILATION_OFF;
     bd4:	80 81       	ld	r24, Z
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	80 83       	st	Z, r24
	 LIGHT_2_OFF;
     bda:	28 9a       	sbi	0x05, 0	; 5
     bdc:	08 95       	ret

00000bde <main>:


extern volatile unsigned char oneSec;

int main(void)
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	29 97       	sbiw	r28, 0x09	; 9
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
	unsigned char sec_3 = 0u;
	uint8_t sec_4 = 0u;
	uint8_t sec_10 = 0u;
	Json Jdata;
	
	motorDriver_Config();
     bf2:	0c d1       	rcall	.+536    	; 0xe0c <motorDriver_Config>
	GPIO_init();
     bf4:	d0 df       	rcall	.-96     	; 0xb96 <GPIO_init>
	
	timer1_init();
     bf6:	a3 d1       	rcall	.+838    	; 0xf3e <timer1_init>
	timer0_init();
     bf8:	b3 d1       	rcall	.+870    	; 0xf60 <timer0_init>
     bfa:	11 d2       	rcall	.+1058   	; 0x101e <UART_int>
	UART_int();
     bfc:	68 d2       	rcall	.+1232   	; 0x10ce <usound_init>
     bfe:	8f e1       	ldi	r24, 0x1F	; 31
	usound_init();
     c00:	9e e4       	ldi	r25, 0x4E	; 78
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <main+0x24>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <main+0x2a>
     c08:	00 00       	nop
     c0a:	f8 94       	cli
     c0c:	9f ef       	ldi	r25, 0xFF	; 255
     c0e:	23 ed       	ldi	r18, 0xD3	; 211

	
	_delay_ms(5);

	cli();
     c10:	80 e3       	ldi	r24, 0x30	; 48
     c12:	91 50       	subi	r25, 0x01	; 1
     c14:	20 40       	sbci	r18, 0x00	; 0
     c16:	80 40       	sbci	r24, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <main+0x34>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <main+0x3e>
     c1c:	00 00       	nop
     c1e:	9f ef       	ldi	r25, 0xFF	; 255
     c20:	23 ed       	ldi	r18, 0xD3	; 211
     c22:	80 e3       	ldi	r24, 0x30	; 48
     c24:	91 50       	subi	r25, 0x01	; 1
     c26:	20 40       	sbci	r18, 0x00	; 0
     c28:	80 40       	sbci	r24, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <main+0x46>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <main+0x50>
     c2e:	00 00       	nop
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	23 ed       	ldi	r18, 0xD3	; 211
     c34:	80 e3       	ldi	r24, 0x30	; 48
     c36:	91 50       	subi	r25, 0x01	; 1
     c38:	20 40       	sbci	r18, 0x00	; 0
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <main+0x58>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <main+0x62>
     c40:	00 00       	nop
     c42:	9f ef       	ldi	r25, 0xFF	; 255
     c44:	23 ed       	ldi	r18, 0xD3	; 211
     c46:	80 e3       	ldi	r24, 0x30	; 48
     c48:	91 50       	subi	r25, 0x01	; 1
     c4a:	20 40       	sbci	r18, 0x00	; 0
     c4c:	80 40       	sbci	r24, 0x00	; 0
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <main+0x6a>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <main+0x74>
     c52:	00 00       	nop
     c54:	9f ef       	ldi	r25, 0xFF	; 255
     c56:	23 ed       	ldi	r18, 0xD3	; 211
     c58:	80 e3       	ldi	r24, 0x30	; 48
     c5a:	91 50       	subi	r25, 0x01	; 1
     c5c:	20 40       	sbci	r18, 0x00	; 0
     c5e:	80 40       	sbci	r24, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <main+0x7c>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <main+0x86>
     c64:	00 00       	nop
     c66:	10 91 84 03 	lds	r17, 0x0384	; 0x800384 <oneSec>
     c6a:	78 94       	sei
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	oldTime = oneSec;
     c6c:	99 e2       	ldi	r25, 0x29	; 41
     c6e:	88 e1       	ldi	r24, 0x18	; 24
	
	
	sei();
     c70:	0f b6       	in	r0, 0x3f	; 63
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     c72:	f8 94       	cli
     c74:	a8 95       	wdr
     c76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c80:	a8 95       	wdr
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	8a 83       	std	Y+2, r24	; 0x02
	wdt_enable(WDTO_8S);
	wdt_reset();
     c86:	1b 82       	std	Y+3, r1	; 0x03
	/*Set Injection channel: */
	Jdata.field1=1;
     c88:	8c 83       	std	Y+4, r24	; 0x04
     c8a:	1d 82       	std	Y+5, r1	; 0x05
	Jdata.field2=0;
     c8c:	8e 83       	std	Y+6, r24	; 0x06
	Jdata.field3=1;
     c8e:	1f 82       	std	Y+7, r1	; 0x07
	Jdata.field4=0;
     c90:	88 87       	std	Y+8, r24	; 0x08
	Jdata.field5=1;
     c92:	19 86       	std	Y+9, r1	; 0x09
	Jdata.field6=0;
     c94:	28 e0       	ldi	r18, 0x08	; 8
	Jdata.field7=1;
     c96:	41 e0       	ldi	r20, 0x01	; 1
	Jdata.field8=0;
     c98:	6d e0       	ldi	r22, 0x0D	; 13
	ESP_write_Fields(&Jdata,INJECTION_WRITE_APIKEY,1,8);
     c9a:	73 e0       	ldi	r23, 0x03	; 3
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	a6 db       	rcall	.-2228   	; 0x3ee <ESP_write_Fields>
     ca2:	e1 2c       	mov	r14, r1
     ca4:	f1 2c       	mov	r15, r1
     ca6:	00 e0       	ldi	r16, 0x00	; 0
	
	unsigned char oldTime = 0;
	unsigned char sec_5 = 0;
	unsigned char sec_3 = 0u;
	uint8_t sec_4 = 0u;
	uint8_t sec_10 = 0u;
     ca8:	a8 95       	wdr
{
	
	unsigned char oldTime = 0;
	unsigned char sec_5 = 0;
	unsigned char sec_3 = 0u;
	uint8_t sec_4 = 0u;
     caa:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <oneSec>
		

		


		wdt_reset();
     cae:	81 17       	cp	r24, r17
		

		if(oneSec != oldTime)
     cb0:	d9 f3       	breq	.-10     	; 0xca8 <main+0xca>
     cb2:	10 91 84 03 	lds	r17, 0x0384	; 0x800384 <oneSec>
		{
			oldTime = oneSec;
     cb6:	05 30       	cpi	r16, 0x05	; 5
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <main+0xe2>
			
			
			
			

			if(sec_5 == 5u)
     cba:	ce d0       	rcall	.+412    	; 0xe58 <task_5sec>
     cbc:	00 e0       	ldi	r16, 0x00	; 0
			{
				  task_5sec();
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <main+0xe4>
				sec_5 = 0;
     cc0:	0f 5f       	subi	r16, 0xFF	; 255
     cc2:	9a e0       	ldi	r25, 0x0A	; 10
			}
			else
			{
				sec_5++;
     cc4:	e9 12       	cpse	r14, r25
			}

			if(sec_10 == 10u)
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <main+0xf0>
     cc8:	39 d1       	rcall	.+626    	; 0xf3c <task_10sec>

			{
				 task_10sec();
     cca:	e1 2c       	mov	r14, r1
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <main+0xf2>
				sec_10=0u;
     cce:	e3 94       	inc	r14
     cd0:	24 e0       	ldi	r18, 0x04	; 4
			}

			else
			{

				sec_10++;
     cd2:	f2 12       	cpse	r15, r18

			}



			if(sec_4 == 4u)
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <main+0xfe>
     cd6:	0b d1       	rcall	.+534    	; 0xeee <task_4Sec>
     cd8:	f1 2c       	mov	r15, r1
			{
				task_4Sec();
     cda:	e6 cf       	rjmp	.-52     	; 0xca8 <main+0xca>
     cdc:	f3 94       	inc	r15
				sec_4 = 0;
     cde:	e4 cf       	rjmp	.-56     	; 0xca8 <main+0xca>

00000ce0 <motorDriver_Med>:
     ce0:	fc 01       	movw	r30, r24
			}
			else
			{
				sec_4++;
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <Med_1_State.2134>
{
	static uint8_t Med_1_State=0;
	static uint8_t Med_2_State=0;
	int8_t data;

	if(Jdata->field2 != Med_1_State)
     ce8:	89 17       	cp	r24, r25
     cea:	09 f4       	brne	.+2      	; 0xcee <motorDriver_Med+0xe>
     cec:	48 c0       	rjmp	.+144    	; 0xd7e <motorDriver_Med+0x9e>
	{
		Med_1_State = Jdata->field2;
     cee:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <Med_1_State.2134>
		data = (int8_t)(Jdata->field1);
     cf2:	21 81       	ldd	r18, Z+1	; 0x01
		if(data < 0)
     cf4:	22 23       	and	r18, r18
     cf6:	14 f5       	brge	.+68     	; 0xd3c <motorDriver_Med+0x5c>
		{
			MED_1_ACW;
     cf8:	a2 e0       	ldi	r26, 0x02	; 2
     cfa:	b1 e0       	ldi	r27, 0x01	; 1
     cfc:	8c 91       	ld	r24, X
     cfe:	80 62       	ori	r24, 0x20	; 32
     d00:	8c 93       	st	X, r24
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     d02:	02 2e       	mov	r0, r18
     d04:	00 0c       	add	r0, r0
     d06:	33 0b       	sbc	r19, r19
     d08:	33 23       	and	r19, r19
     d0a:	1c f4       	brge	.+6      	; 0xd12 <motorDriver_Med+0x32>
     d0c:	31 95       	neg	r19
     d0e:	21 95       	neg	r18
     d10:	31 09       	sbc	r19, r1
     d12:	40 e9       	ldi	r20, 0x90	; 144
     d14:	51 e0       	ldi	r21, 0x01	; 1
     d16:	24 9f       	mul	r18, r20
     d18:	c0 01       	movw	r24, r0
     d1a:	25 9f       	mul	r18, r21
     d1c:	90 0d       	add	r25, r0
     d1e:	11 24       	eor	r1, r1
     d20:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <number_of_rotation+0x1>
     d24:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <number_of_rotation>
			Medicine=1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <Medicine>
			A4899_EN;
     d2e:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     d30:	ae e6       	ldi	r26, 0x6E	; 110
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	8c 91       	ld	r24, X
     d36:	82 60       	ori	r24, 0x02	; 2
     d38:	8c 93       	st	X, r24
     d3a:	21 c0       	rjmp	.+66     	; 0xd7e <motorDriver_Med+0x9e>
		}

		else
		{
			MED_1_CW;
     d3c:	a2 e0       	ldi	r26, 0x02	; 2
     d3e:	b1 e0       	ldi	r27, 0x01	; 1
     d40:	8c 91       	ld	r24, X
     d42:	8f 7d       	andi	r24, 0xDF	; 223
     d44:	8c 93       	st	X, r24
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     d46:	02 2e       	mov	r0, r18
     d48:	00 0c       	add	r0, r0
     d4a:	33 0b       	sbc	r19, r19
     d4c:	33 23       	and	r19, r19
     d4e:	1c f4       	brge	.+6      	; 0xd56 <motorDriver_Med+0x76>
     d50:	31 95       	neg	r19
     d52:	21 95       	neg	r18
     d54:	31 09       	sbc	r19, r1
     d56:	40 e9       	ldi	r20, 0x90	; 144
     d58:	51 e0       	ldi	r21, 0x01	; 1
     d5a:	24 9f       	mul	r18, r20
     d5c:	c0 01       	movw	r24, r0
     d5e:	25 9f       	mul	r18, r21
     d60:	90 0d       	add	r25, r0
     d62:	11 24       	eor	r1, r1
     d64:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <number_of_rotation+0x1>
     d68:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <number_of_rotation>
			Medicine=1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <Medicine>
			A4899_EN;
     d72:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     d74:	ae e6       	ldi	r26, 0x6E	; 110
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	8c 91       	ld	r24, X
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	8c 93       	st	X, r24
	{

	}


	if(Jdata->field4 != Med_2_State)
     d7e:	84 81       	ldd	r24, Z+4	; 0x04
     d80:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <Med_2_State.2135>
     d84:	89 17       	cp	r24, r25
     d86:	09 f4       	brne	.+2      	; 0xd8a <motorDriver_Med+0xaa>
     d88:	40 c0       	rjmp	.+128    	; 0xe0a <motorDriver_Med+0x12a>
	{
		Med_2_State = Jdata->field4;
     d8a:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <Med_2_State.2135>
		data = (int8_t)(Jdata->field3);
     d8e:	83 81       	ldd	r24, Z+3	; 0x03
		if(data < 0)
     d90:	88 23       	and	r24, r24
     d92:	f4 f4       	brge	.+60     	; 0xdd0 <motorDriver_Med+0xf0>
		{
			MED_2_ACW;
     d94:	74 9a       	sbi	0x0e, 4	; 14
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     d96:	08 2e       	mov	r0, r24
     d98:	00 0c       	add	r0, r0
     d9a:	99 0b       	sbc	r25, r25
     d9c:	99 23       	and	r25, r25
     d9e:	1c f4       	brge	.+6      	; 0xda6 <motorDriver_Med+0xc6>
     da0:	91 95       	neg	r25
     da2:	81 95       	neg	r24
     da4:	91 09       	sbc	r25, r1
     da6:	40 e9       	ldi	r20, 0x90	; 144
     da8:	51 e0       	ldi	r21, 0x01	; 1
     daa:	84 9f       	mul	r24, r20
     dac:	90 01       	movw	r18, r0
     dae:	85 9f       	mul	r24, r21
     db0:	30 0d       	add	r19, r0
     db2:	11 24       	eor	r1, r1
     db4:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <number_of_rotation+0x1>
     db8:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <number_of_rotation>
			Medicine=2;
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <Medicine>
			A4899_EN;
     dc2:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     dc4:	ee e6       	ldi	r30, 0x6E	; 110
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	82 60       	ori	r24, 0x02	; 2
     dcc:	80 83       	st	Z, r24
     dce:	08 95       	ret
		}

		else
		{
			MED_2_CW;
     dd0:	74 98       	cbi	0x0e, 4	; 14
			number_of_rotation = (uint16_t)(((DEGREE_360)*(uint8_t)abs(data))*2);
     dd2:	08 2e       	mov	r0, r24
     dd4:	00 0c       	add	r0, r0
     dd6:	99 0b       	sbc	r25, r25
     dd8:	99 23       	and	r25, r25
     dda:	1c f4       	brge	.+6      	; 0xde2 <motorDriver_Med+0x102>
     ddc:	91 95       	neg	r25
     dde:	81 95       	neg	r24
     de0:	91 09       	sbc	r25, r1
     de2:	40 e9       	ldi	r20, 0x90	; 144
     de4:	51 e0       	ldi	r21, 0x01	; 1
     de6:	84 9f       	mul	r24, r20
     de8:	90 01       	movw	r18, r0
     dea:	85 9f       	mul	r24, r21
     dec:	30 0d       	add	r19, r0
     dee:	11 24       	eor	r1, r1
     df0:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <number_of_rotation+0x1>
     df4:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <number_of_rotation>
			Medicine=2;
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <Medicine>
			A4899_EN;
     dfe:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
     e00:	ee e6       	ldi	r30, 0x6E	; 110
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	80 83       	st	Z, r24
     e0a:	08 95       	ret

00000e0c <motorDriver_Config>:
}


void motorDriver_Config(void)
{
	DDR_MED_1_DIR_CONFIG;
     e0c:	e1 e0       	ldi	r30, 0x01	; 1
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	80 81       	ld	r24, Z
     e12:	80 62       	ori	r24, 0x20	; 32
     e14:	80 83       	st	Z, r24
	DDR_MED_1_STEP_CONFIG;
     e16:	80 81       	ld	r24, Z
     e18:	80 64       	ori	r24, 0x40	; 64
     e1a:	80 83       	st	Z, r24
	DDR_MED_2_DIR_CONFIG;
     e1c:	6c 9a       	sbi	0x0d, 4	; 13
	DDR_MED_2_STEP_CONFIG;
     e1e:	6d 9a       	sbi	0x0d, 5	; 13
	DDR_MED_3_DIR_CONFIG;
     e20:	9d 9a       	sbi	0x13, 5	; 19
	DDR_MED_3_STEP_CONFIG;
     e22:	6b 9a       	sbi	0x0d, 3	; 13
	DDR_MED_4_DIR_CONFIG;
     e24:	80 81       	ld	r24, Z
     e26:	88 60       	ori	r24, 0x08	; 8
     e28:	80 83       	st	Z, r24
	DDR_MED_4_STEP_CONFIG;
     e2a:	80 81       	ld	r24, Z
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	80 83       	st	Z, r24
	
	PORT_MED_1_DIR_CONFIG;
     e30:	80 81       	ld	r24, Z
     e32:	8f 7d       	andi	r24, 0xDF	; 223
     e34:	80 83       	st	Z, r24
	PORT_MED_1_STEP_CONFIG;
     e36:	80 81       	ld	r24, Z
     e38:	8f 7b       	andi	r24, 0xBF	; 191
     e3a:	80 83       	st	Z, r24
	PORT_MED_2_DIR_CONFIG;
     e3c:	6c 98       	cbi	0x0d, 4	; 13
	PORT_MED_2_STEP_CONFIG;
     e3e:	6d 98       	cbi	0x0d, 5	; 13
	PORT_MED_3_DIR_CONFIG;
     e40:	9d 98       	cbi	0x13, 5	; 19
	PORT_MED_3_STEP_CONFIG;
     e42:	6b 98       	cbi	0x0d, 3	; 13
	PORT_MED_4_DIR_CONFIG;
     e44:	80 81       	ld	r24, Z
     e46:	87 7f       	andi	r24, 0xF7	; 247
     e48:	80 83       	st	Z, r24
	PORT_MED_4_STEP_CONFIG;
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7e       	andi	r24, 0xEF	; 239
     e4e:	80 83       	st	Z, r24
	
	DDR_A4899_CINFIG;
     e50:	08 9a       	sbi	0x01, 0	; 1
	PORT_A4899_CINFIG;
     e52:	10 9a       	sbi	0x02, 0	; 2
	A4899_DIS;
     e54:	10 9a       	sbi	0x02, 0	; 2
     e56:	08 95       	ret

00000e58 <task_5sec>:
*/
#include "OS.h"
uint8_t manualflag = 0;

void task_5sec  (void)
{
     e58:	ef 92       	push	r14
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	29 97       	sbiw	r28, 0x09	; 9
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61

	Json Jdata = {0};
     e72:	fe 01       	movw	r30, r28
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	89 e0       	ldi	r24, 0x09	; 9
     e78:	df 01       	movw	r26, r30
     e7a:	1d 92       	st	X+, r1
     e7c:	8a 95       	dec	r24
     e7e:	e9 f7       	brne	.-6      	; 0xe7a <task_5sec+0x22>
	int8_t flag=0;
	wdt_reset();
     e80:	a8 95       	wdr
	cli();
     e82:	f8 94       	cli
	flag=dht_getdata_dht_11(&temperature,&humidity,dht_2_DDRG,dht_2_PORTG,dht_2_PING,1);
     e84:	ee 24       	eor	r14, r14
     e86:	e3 94       	inc	r14
     e88:	02 e1       	ldi	r16, 0x12	; 18
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	24 e1       	ldi	r18, 0x14	; 20
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	43 e1       	ldi	r20, 0x13	; 19
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	6e e7       	ldi	r22, 0x7E	; 126
     e96:	73 e0       	ldi	r23, 0x03	; 3
     e98:	8f e7       	ldi	r24, 0x7F	; 127
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	82 d9       	rcall	.-3324   	; 0x1a2 <dht_getdata_dht_11>
	if(flag==0)
     e9e:	81 11       	cpse	r24, r1
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <task_5sec+0x56>
	{
		Jdata.field2=temperature;
     ea2:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <temperature>
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		Jdata.field3=humidity;
     ea8:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <humidity>
	}
	
	
	waterLevel=readDistance();
     eac:	8c 83       	std	Y+4, r24	; 0x04
     eae:	12 d1       	rcall	.+548    	; 0x10d4 <readDistance>
     eb0:	60 93 7a 03 	sts	0x037A, r22	; 0x80037a <waterLevel>
     eb4:	70 93 7b 03 	sts	0x037B, r23	; 0x80037b <waterLevel+0x1>
     eb8:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <waterLevel+0x2>
     ebc:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <waterLevel+0x3>
	Jdata.field1=waterLevel;
     ec0:	6a 83       	std	Y+2, r22	; 0x02
	sei();
     ec2:	78 94       	sei
	wdt_reset();
     ec4:	a8 95       	wdr
	ESP_write_Fields(&Jdata,SENORS_WRITE_APIKEY,1,3);
     ec6:	23 e0       	ldi	r18, 0x03	; 3
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	6e e1       	ldi	r22, 0x1E	; 30
     ecc:	73 e0       	ldi	r23, 0x03	; 3
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	8d da       	rcall	.-2790   	; 0x3ee <ESP_write_Fields>
	wdt_reset();
     ed4:	a8 95       	wdr
	
}
     ed6:	29 96       	adiw	r28, 0x09	; 9
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ef 90       	pop	r14
     eec:	08 95       	ret

00000eee <task_4Sec>:
	static Json Jdata_Med={1,0,1,0,1,0,1,0};
	static Json Jdata_Sol={1,1,1,1,1,1,1,1};
	static Json Jdata_FVLM={1,1,1,1,1,1,1,1};	/*Fan_Ventilation_Light_Med*/
	
	
	wdt_reset();
     eee:	a8 95       	wdr
	
	
	/*Read data Solenoid valves data from thingspeak*/
	ESP_Read(&Jdata_Sol,SELONOID_CHANNEL_ID,SELONOID_READ_APIKEY,4);
     ef0:	24 e0       	ldi	r18, 0x04	; 4
     ef2:	4f e2       	ldi	r20, 0x2F	; 47
     ef4:	53 e0       	ldi	r21, 0x03	; 3
     ef6:	60 e4       	ldi	r22, 0x40	; 64
     ef8:	73 e0       	ldi	r23, 0x03	; 3
     efa:	82 e1       	ldi	r24, 0x12	; 18
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	e9 dc       	rcall	.-1582   	; 0x8d2 <ESP_Read>
	relayModuleControl_Sol(&Jdata_Sol);
     f00:	82 e1       	ldi	r24, 0x12	; 18
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	f4 dd       	rcall	.-1048   	; 0xaee <relayModuleControl_Sol>
	wdt_reset();
     f06:	a8 95       	wdr
	/*Read data Injection data from thingspeak*/
	ESP_Read(&Jdata_Med,INJECTION_CHANNEL_ID,INJECTION_READ_APIKEY,8);
     f08:	28 e0       	ldi	r18, 0x08	; 8
     f0a:	47 e4       	ldi	r20, 0x47	; 71
     f0c:	53 e0       	ldi	r21, 0x03	; 3
     f0e:	68 e5       	ldi	r22, 0x58	; 88
     f10:	73 e0       	ldi	r23, 0x03	; 3
     f12:	89 e0       	ldi	r24, 0x09	; 9
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	dd dc       	rcall	.-1606   	; 0x8d2 <ESP_Read>
	motorDriver_Med(&Jdata_Med);
     f18:	89 e0       	ldi	r24, 0x09	; 9
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	e1 de       	rcall	.-574    	; 0xce0 <motorDriver_Med>
     f1e:	a8 95       	wdr
	wdt_reset();
     f20:	24 e0       	ldi	r18, 0x04	; 4
	/*Read data FVLM data from thingspeak*/
	ESP_Read(&Jdata_FVLM,FAN_VENTILATION_CHANNEL_ID,FAN_VENTILATION_READ_APIKEY,4);
     f22:	4f e5       	ldi	r20, 0x5F	; 95
     f24:	53 e0       	ldi	r21, 0x03	; 3
     f26:	60 e7       	ldi	r22, 0x70	; 112
     f28:	73 e0       	ldi	r23, 0x03	; 3
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	d1 dc       	rcall	.-1630   	; 0x8d2 <ESP_Read>
	GPOIcontrol_FVLM(&Jdata_FVLM);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	06 de       	rcall	.-1012   	; 0xb42 <GPOIcontrol_FVLM>
     f36:	a8 95       	wdr
	
	wdt_reset();
     f38:	78 94       	sei
	sei();
     f3a:	08 95       	ret

00000f3c <task_10sec>:
     f3c:	08 95       	ret

00000f3e <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
     f3e:	e1 e8       	ldi	r30, 0x81	; 129
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8d 60       	ori	r24, 0x0D	; 13
     f46:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
     f48:	ef e6       	ldi	r30, 0x6F	; 111
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	83 60       	ori	r24, 0x03	; 3
     f50:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
     f52:	8d e3       	ldi	r24, 0x3D	; 61
     f54:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
     f58:	89 e0       	ldi	r24, 0x09	; 9
     f5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     f5e:	08 95       	ret

00000f60 <timer0_init>:
}

void timer0_init(void)
{

	TCCR0A |= (1<<WGM01);
     f60:	84 b5       	in	r24, 0x24	; 36
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);// no Prescaler
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	85 bd       	out	0x25, r24	; 37
	OCR0A = 125;
     f6a:	8d e7       	ldi	r24, 0x7D	; 125
     f6c:	87 bd       	out	0x27, r24	; 39
     f6e:	08 95       	ret

00000f70 <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	8f 93       	push	r24
	
	
	oneSec ++;
     f7c:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <oneSec>
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <oneSec>
	
	
}
     f86:	8f 91       	pop	r24
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <__vector_21>:

ISR (TIMER0_COMPA_vect)    // Timer0 ISR
{
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	0b b6       	in	r0, 0x3b	; 59
     f9e:	0f 92       	push	r0
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31


	switch(Medicine)
     fa8:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <Medicine>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	19 f0       	breq	.+6      	; 0xfb6 <__vector_21+0x24>
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	89 f0       	breq	.+34     	; 0xfd6 <__vector_21+0x44>
     fb4:	1d c0       	rjmp	.+58     	; 0xff0 <__vector_21+0x5e>
	{
		case 1: MED_1_TOGGLE;number_of_rotation--;break;
     fb6:	e2 e0       	ldi	r30, 0x02	; 2
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	90 81       	ld	r25, Z
     fbc:	80 e4       	ldi	r24, 0x40	; 64
     fbe:	89 27       	eor	r24, r25
     fc0:	80 83       	st	Z, r24
     fc2:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <number_of_rotation>
     fc6:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <number_of_rotation+0x1>
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <number_of_rotation+0x1>
     fd0:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <number_of_rotation>
     fd4:	0d c0       	rjmp	.+26     	; 0xff0 <__vector_21+0x5e>
		case 2: MED_2_TOGGLE;number_of_rotation--;break;
     fd6:	9e b1       	in	r25, 0x0e	; 14
     fd8:	80 e2       	ldi	r24, 0x20	; 32
     fda:	89 27       	eor	r24, r25
     fdc:	8e b9       	out	0x0e, r24	; 14
     fde:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <number_of_rotation>
     fe2:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <number_of_rotation+0x1>
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <number_of_rotation+0x1>
     fec:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <number_of_rotation>
		default: break;
	}
	if(number_of_rotation == 0u)
     ff0:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <number_of_rotation>
     ff4:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <number_of_rotation+0x1>
     ff8:	89 2b       	or	r24, r25
     ffa:	31 f4       	brne	.+12     	; 0x1008 <__vector_21+0x76>
	{
		
		A4899_DIS;
     ffc:	10 9a       	sbi	0x02, 0	; 2
		TIMER0_INTER_DISABLE;
     ffe:	ee e6       	ldi	r30, 0x6E	; 110
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8d 7f       	andi	r24, 0xFD	; 253
    1006:	80 83       	st	Z, r24
	}
	
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	9f 91       	pop	r25
    100e:	8f 91       	pop	r24
    1010:	0f 90       	pop	r0
    1012:	0b be       	out	0x3b, r0	; 59
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <UART_int>:
                    newData = TRUE;
                }
        }
    else if (rc == startMarker)
        {
            recvInProgress = TRUE;
    101e:	88 e9       	ldi	r24, 0x98	; 152
    1020:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1024:	86 e0       	ldi	r24, 0x06	; 6
    1026:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    102a:	85 e3       	ldi	r24, 0x35	; 53
    102c:	8a 95       	dec	r24
    102e:	f1 f7       	brne	.-4      	; 0x102c <UART_int+0xe>
    1030:	00 00       	nop
    1032:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    103c:	08 95       	ret

0000103e <UART_tx>:
    103e:	e0 ec       	ldi	r30, 0xC0	; 192
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	90 81       	ld	r25, Z
    1044:	95 ff       	sbrs	r25, 5
    1046:	fd cf       	rjmp	.-6      	; 0x1042 <UART_tx+0x4>
    1048:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    104c:	08 95       	ret

0000104e <UART_string_tx>:
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	fc 01       	movw	r30, r24
    1056:	80 81       	ld	r24, Z
    1058:	88 23       	and	r24, r24
    105a:	51 f0       	breq	.+20     	; 0x1070 <UART_string_tx+0x22>
    105c:	8f 01       	movw	r16, r30
    105e:	c0 e0       	ldi	r28, 0x00	; 0
    1060:	ee df       	rcall	.-36     	; 0x103e <UART_tx>
    1062:	cf 5f       	subi	r28, 0xFF	; 255
    1064:	f8 01       	movw	r30, r16
    1066:	ec 0f       	add	r30, r28
    1068:	f1 1d       	adc	r31, r1
    106a:	80 81       	ld	r24, Z
    106c:	81 11       	cpse	r24, r1
    106e:	f8 cf       	rjmp	.-16     	; 0x1060 <UART_string_tx+0x12>
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <__vector_25>:
}



ISR(USART0_RX_vect)
{
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	0b b6       	in	r0, 0x3b	; 59
    1084:	0f 92       	push	r0
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
    cli();
    109e:	f8 94       	cli



    circularQueue_enqueue((uint8_t)(UDR0));
    10a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    10a4:	58 d8       	rcall	.-3920   	; 0x156 <circularQueue_enqueue>
    //recvWithStartEndMarkers(UDR0);


    sei();
    10a6:	78 94       	sei

}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0b be       	out	0x3b, r0	; 59
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <usound_init>:
#include "usound.h"

void usound_init(void)
{
	US_DDR |= (1 << US_TRIGER)|(0 << US_ECHO);
    10ce:	3d 9a       	sbi	0x07, 5	; 7
	US_PIN |= (1<<US_ECHO);
    10d0:	37 9a       	sbi	0x06, 7	; 6
    10d2:	08 95       	ret

000010d4 <readDistance>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d4:	8a e0       	ldi	r24, 0x0A	; 10
    10d6:	8a 95       	dec	r24
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <readDistance+0x2>
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <readDistance+0x8>
{
	uint8_t readStatus=0;
	uint32_t disTime=0;

	_delay_us(2);
	US_PORT |= (1 << US_TRIGER);
    10dc:	45 9a       	sbi	0x08, 5	; 8
    10de:	85 e3       	ldi	r24, 0x35	; 53
    10e0:	8a 95       	dec	r24
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <readDistance+0xc>
    10e4:	00 00       	nop
	_delay_us(10);
	US_PORT &= ~(1 << US_TRIGER);
    10e6:	45 98       	cbi	0x08, 5	; 8
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <readDistance+0x28>

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	dc 01       	movw	r26, r24
		{
			disTime++;
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	a1 1d       	adc	r26, r1
    10f4:	b1 1d       	adc	r27, r1
	US_PORT &= ~(1 << US_TRIGER);

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
    10f6:	37 99       	sbic	0x06, 7	; 6
    10f8:	fb cf       	rjmp	.-10     	; 0x10f0 <readDistance+0x1c>
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <readDistance+0x2e>
    10fc:	37 99       	sbic	0x06, 7	; 6
    10fe:	f5 cf       	rjmp	.-22     	; 0x10ea <readDistance+0x16>
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <readDistance+0x28>
			disTime++;
			readStatus = 1;
		}
	}	

	return disTime * 0.00862;	//return data in cm	
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	33 d0       	rcall	.+102    	; 0x116e <__floatunsisf>
    1108:	27 ee       	ldi	r18, 0xE7	; 231
    110a:	3a e3       	ldi	r19, 0x3A	; 58
    110c:	4d e0       	ldi	r20, 0x0D	; 13
    110e:	5c e3       	ldi	r21, 0x3C	; 60
    1110:	94 d0       	rcall	.+296    	; 0x123a <__mulsf3>
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <__fixunssfsi>
}
    1114:	08 95       	ret

00001116 <__fixunssfsi>:
    1116:	70 d0       	rcall	.+224    	; 0x11f8 <__fp_splitA>
    1118:	88 f0       	brcs	.+34     	; 0x113c <__fixunssfsi+0x26>
    111a:	9f 57       	subi	r25, 0x7F	; 127
    111c:	90 f0       	brcs	.+36     	; 0x1142 <__fixunssfsi+0x2c>
    111e:	b9 2f       	mov	r27, r25
    1120:	99 27       	eor	r25, r25
    1122:	b7 51       	subi	r27, 0x17	; 23
    1124:	a0 f0       	brcs	.+40     	; 0x114e <__fixunssfsi+0x38>
    1126:	d1 f0       	breq	.+52     	; 0x115c <__fixunssfsi+0x46>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	1a f0       	brmi	.+6      	; 0x1138 <__fixunssfsi+0x22>
    1132:	ba 95       	dec	r27
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__fixunssfsi+0x12>
    1136:	12 c0       	rjmp	.+36     	; 0x115c <__fixunssfsi+0x46>
    1138:	b1 30       	cpi	r27, 0x01	; 1
    113a:	81 f0       	breq	.+32     	; 0x115c <__fixunssfsi+0x46>
    113c:	77 d0       	rcall	.+238    	; 0x122c <__fp_zero>
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	08 95       	ret
    1142:	74 c0       	rjmp	.+232    	; 0x122c <__fp_zero>
    1144:	67 2f       	mov	r22, r23
    1146:	78 2f       	mov	r23, r24
    1148:	88 27       	eor	r24, r24
    114a:	b8 5f       	subi	r27, 0xF8	; 248
    114c:	39 f0       	breq	.+14     	; 0x115c <__fixunssfsi+0x46>
    114e:	b9 3f       	cpi	r27, 0xF9	; 249
    1150:	cc f3       	brlt	.-14     	; 0x1144 <__fixunssfsi+0x2e>
    1152:	86 95       	lsr	r24
    1154:	77 95       	ror	r23
    1156:	67 95       	ror	r22
    1158:	b3 95       	inc	r27
    115a:	d9 f7       	brne	.-10     	; 0x1152 <__fixunssfsi+0x3c>
    115c:	3e f4       	brtc	.+14     	; 0x116c <__fixunssfsi+0x56>
    115e:	90 95       	com	r25
    1160:	80 95       	com	r24
    1162:	70 95       	com	r23
    1164:	61 95       	neg	r22
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	8f 4f       	sbci	r24, 0xFF	; 255
    116a:	9f 4f       	sbci	r25, 0xFF	; 255
    116c:	08 95       	ret

0000116e <__floatunsisf>:
    116e:	e8 94       	clt
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <__floatsisf+0x12>

00001172 <__floatsisf>:
    1172:	97 fb       	bst	r25, 7
    1174:	3e f4       	brtc	.+14     	; 0x1184 <__floatsisf+0x12>
    1176:	90 95       	com	r25
    1178:	80 95       	com	r24
    117a:	70 95       	com	r23
    117c:	61 95       	neg	r22
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	99 23       	and	r25, r25
    1186:	a9 f0       	breq	.+42     	; 0x11b2 <__floatsisf+0x40>
    1188:	f9 2f       	mov	r31, r25
    118a:	96 e9       	ldi	r25, 0x96	; 150
    118c:	bb 27       	eor	r27, r27
    118e:	93 95       	inc	r25
    1190:	f6 95       	lsr	r31
    1192:	87 95       	ror	r24
    1194:	77 95       	ror	r23
    1196:	67 95       	ror	r22
    1198:	b7 95       	ror	r27
    119a:	f1 11       	cpse	r31, r1
    119c:	f8 cf       	rjmp	.-16     	; 0x118e <__floatsisf+0x1c>
    119e:	fa f4       	brpl	.+62     	; 0x11de <__floatsisf+0x6c>
    11a0:	bb 0f       	add	r27, r27
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <__floatsisf+0x36>
    11a4:	60 ff       	sbrs	r22, 0
    11a6:	1b c0       	rjmp	.+54     	; 0x11de <__floatsisf+0x6c>
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	8f 4f       	sbci	r24, 0xFF	; 255
    11ae:	9f 4f       	sbci	r25, 0xFF	; 255
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <__floatsisf+0x6c>
    11b2:	88 23       	and	r24, r24
    11b4:	11 f0       	breq	.+4      	; 0x11ba <__floatsisf+0x48>
    11b6:	96 e9       	ldi	r25, 0x96	; 150
    11b8:	11 c0       	rjmp	.+34     	; 0x11dc <__floatsisf+0x6a>
    11ba:	77 23       	and	r23, r23
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <__floatsisf+0x54>
    11be:	9e e8       	ldi	r25, 0x8E	; 142
    11c0:	87 2f       	mov	r24, r23
    11c2:	76 2f       	mov	r23, r22
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <__floatsisf+0x5e>
    11c6:	66 23       	and	r22, r22
    11c8:	71 f0       	breq	.+28     	; 0x11e6 <__floatsisf+0x74>
    11ca:	96 e8       	ldi	r25, 0x86	; 134
    11cc:	86 2f       	mov	r24, r22
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	2a f0       	brmi	.+10     	; 0x11de <__floatsisf+0x6c>
    11d4:	9a 95       	dec	r25
    11d6:	66 0f       	add	r22, r22
    11d8:	77 1f       	adc	r23, r23
    11da:	88 1f       	adc	r24, r24
    11dc:	da f7       	brpl	.-10     	; 0x11d4 <__floatsisf+0x62>
    11de:	88 0f       	add	r24, r24
    11e0:	96 95       	lsr	r25
    11e2:	87 95       	ror	r24
    11e4:	97 f9       	bld	r25, 7
    11e6:	08 95       	ret

000011e8 <__fp_split3>:
    11e8:	57 fd       	sbrc	r21, 7
    11ea:	90 58       	subi	r25, 0x80	; 128
    11ec:	44 0f       	add	r20, r20
    11ee:	55 1f       	adc	r21, r21
    11f0:	59 f0       	breq	.+22     	; 0x1208 <__fp_splitA+0x10>
    11f2:	5f 3f       	cpi	r21, 0xFF	; 255
    11f4:	71 f0       	breq	.+28     	; 0x1212 <__fp_splitA+0x1a>
    11f6:	47 95       	ror	r20

000011f8 <__fp_splitA>:
    11f8:	88 0f       	add	r24, r24
    11fa:	97 fb       	bst	r25, 7
    11fc:	99 1f       	adc	r25, r25
    11fe:	61 f0       	breq	.+24     	; 0x1218 <__fp_splitA+0x20>
    1200:	9f 3f       	cpi	r25, 0xFF	; 255
    1202:	79 f0       	breq	.+30     	; 0x1222 <__fp_splitA+0x2a>
    1204:	87 95       	ror	r24
    1206:	08 95       	ret
    1208:	12 16       	cp	r1, r18
    120a:	13 06       	cpc	r1, r19
    120c:	14 06       	cpc	r1, r20
    120e:	55 1f       	adc	r21, r21
    1210:	f2 cf       	rjmp	.-28     	; 0x11f6 <__fp_split3+0xe>
    1212:	46 95       	lsr	r20
    1214:	f1 df       	rcall	.-30     	; 0x11f8 <__fp_splitA>
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <__fp_splitA+0x30>
    1218:	16 16       	cp	r1, r22
    121a:	17 06       	cpc	r1, r23
    121c:	18 06       	cpc	r1, r24
    121e:	99 1f       	adc	r25, r25
    1220:	f1 cf       	rjmp	.-30     	; 0x1204 <__fp_splitA+0xc>
    1222:	86 95       	lsr	r24
    1224:	71 05       	cpc	r23, r1
    1226:	61 05       	cpc	r22, r1
    1228:	08 94       	sec
    122a:	08 95       	ret

0000122c <__fp_zero>:
    122c:	e8 94       	clt

0000122e <__fp_szero>:
    122e:	bb 27       	eor	r27, r27
    1230:	66 27       	eor	r22, r22
    1232:	77 27       	eor	r23, r23
    1234:	cb 01       	movw	r24, r22
    1236:	97 f9       	bld	r25, 7
    1238:	08 95       	ret

0000123a <__mulsf3>:
    123a:	0b d0       	rcall	.+22     	; 0x1252 <__mulsf3x>
    123c:	78 c0       	rjmp	.+240    	; 0x132e <__fp_round>
    123e:	69 d0       	rcall	.+210    	; 0x1312 <__fp_pscA>
    1240:	28 f0       	brcs	.+10     	; 0x124c <__mulsf3+0x12>
    1242:	6e d0       	rcall	.+220    	; 0x1320 <__fp_pscB>
    1244:	18 f0       	brcs	.+6      	; 0x124c <__mulsf3+0x12>
    1246:	95 23       	and	r25, r21
    1248:	09 f0       	breq	.+2      	; 0x124c <__mulsf3+0x12>
    124a:	5a c0       	rjmp	.+180    	; 0x1300 <__fp_inf>
    124c:	5f c0       	rjmp	.+190    	; 0x130c <__fp_nan>
    124e:	11 24       	eor	r1, r1
    1250:	ee cf       	rjmp	.-36     	; 0x122e <__fp_szero>

00001252 <__mulsf3x>:
    1252:	ca df       	rcall	.-108    	; 0x11e8 <__fp_split3>
    1254:	a0 f3       	brcs	.-24     	; 0x123e <__mulsf3+0x4>

00001256 <__mulsf3_pse>:
    1256:	95 9f       	mul	r25, r21
    1258:	d1 f3       	breq	.-12     	; 0x124e <__mulsf3+0x14>
    125a:	95 0f       	add	r25, r21
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	55 1f       	adc	r21, r21
    1260:	62 9f       	mul	r22, r18
    1262:	f0 01       	movw	r30, r0
    1264:	72 9f       	mul	r23, r18
    1266:	bb 27       	eor	r27, r27
    1268:	f0 0d       	add	r31, r0
    126a:	b1 1d       	adc	r27, r1
    126c:	63 9f       	mul	r22, r19
    126e:	aa 27       	eor	r26, r26
    1270:	f0 0d       	add	r31, r0
    1272:	b1 1d       	adc	r27, r1
    1274:	aa 1f       	adc	r26, r26
    1276:	64 9f       	mul	r22, r20
    1278:	66 27       	eor	r22, r22
    127a:	b0 0d       	add	r27, r0
    127c:	a1 1d       	adc	r26, r1
    127e:	66 1f       	adc	r22, r22
    1280:	82 9f       	mul	r24, r18
    1282:	22 27       	eor	r18, r18
    1284:	b0 0d       	add	r27, r0
    1286:	a1 1d       	adc	r26, r1
    1288:	62 1f       	adc	r22, r18
    128a:	73 9f       	mul	r23, r19
    128c:	b0 0d       	add	r27, r0
    128e:	a1 1d       	adc	r26, r1
    1290:	62 1f       	adc	r22, r18
    1292:	83 9f       	mul	r24, r19
    1294:	a0 0d       	add	r26, r0
    1296:	61 1d       	adc	r22, r1
    1298:	22 1f       	adc	r18, r18
    129a:	74 9f       	mul	r23, r20
    129c:	33 27       	eor	r19, r19
    129e:	a0 0d       	add	r26, r0
    12a0:	61 1d       	adc	r22, r1
    12a2:	23 1f       	adc	r18, r19
    12a4:	84 9f       	mul	r24, r20
    12a6:	60 0d       	add	r22, r0
    12a8:	21 1d       	adc	r18, r1
    12aa:	82 2f       	mov	r24, r18
    12ac:	76 2f       	mov	r23, r22
    12ae:	6a 2f       	mov	r22, r26
    12b0:	11 24       	eor	r1, r1
    12b2:	9f 57       	subi	r25, 0x7F	; 127
    12b4:	50 40       	sbci	r21, 0x00	; 0
    12b6:	8a f0       	brmi	.+34     	; 0x12da <__mulsf3_pse+0x84>
    12b8:	e1 f0       	breq	.+56     	; 0x12f2 <__mulsf3_pse+0x9c>
    12ba:	88 23       	and	r24, r24
    12bc:	4a f0       	brmi	.+18     	; 0x12d0 <__mulsf3_pse+0x7a>
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	bb 1f       	adc	r27, r27
    12c4:	66 1f       	adc	r22, r22
    12c6:	77 1f       	adc	r23, r23
    12c8:	88 1f       	adc	r24, r24
    12ca:	91 50       	subi	r25, 0x01	; 1
    12cc:	50 40       	sbci	r21, 0x00	; 0
    12ce:	a9 f7       	brne	.-22     	; 0x12ba <__mulsf3_pse+0x64>
    12d0:	9e 3f       	cpi	r25, 0xFE	; 254
    12d2:	51 05       	cpc	r21, r1
    12d4:	70 f0       	brcs	.+28     	; 0x12f2 <__mulsf3_pse+0x9c>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <__fp_inf>
    12d8:	aa cf       	rjmp	.-172    	; 0x122e <__fp_szero>
    12da:	5f 3f       	cpi	r21, 0xFF	; 255
    12dc:	ec f3       	brlt	.-6      	; 0x12d8 <__mulsf3_pse+0x82>
    12de:	98 3e       	cpi	r25, 0xE8	; 232
    12e0:	dc f3       	brlt	.-10     	; 0x12d8 <__mulsf3_pse+0x82>
    12e2:	86 95       	lsr	r24
    12e4:	77 95       	ror	r23
    12e6:	67 95       	ror	r22
    12e8:	b7 95       	ror	r27
    12ea:	f7 95       	ror	r31
    12ec:	e7 95       	ror	r30
    12ee:	9f 5f       	subi	r25, 0xFF	; 255
    12f0:	c1 f7       	brne	.-16     	; 0x12e2 <__mulsf3_pse+0x8c>
    12f2:	fe 2b       	or	r31, r30
    12f4:	88 0f       	add	r24, r24
    12f6:	91 1d       	adc	r25, r1
    12f8:	96 95       	lsr	r25
    12fa:	87 95       	ror	r24
    12fc:	97 f9       	bld	r25, 7
    12fe:	08 95       	ret

00001300 <__fp_inf>:
    1300:	97 f9       	bld	r25, 7
    1302:	9f 67       	ori	r25, 0x7F	; 127
    1304:	80 e8       	ldi	r24, 0x80	; 128
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	08 95       	ret

0000130c <__fp_nan>:
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	80 ec       	ldi	r24, 0xC0	; 192
    1310:	08 95       	ret

00001312 <__fp_pscA>:
    1312:	00 24       	eor	r0, r0
    1314:	0a 94       	dec	r0
    1316:	16 16       	cp	r1, r22
    1318:	17 06       	cpc	r1, r23
    131a:	18 06       	cpc	r1, r24
    131c:	09 06       	cpc	r0, r25
    131e:	08 95       	ret

00001320 <__fp_pscB>:
    1320:	00 24       	eor	r0, r0
    1322:	0a 94       	dec	r0
    1324:	12 16       	cp	r1, r18
    1326:	13 06       	cpc	r1, r19
    1328:	14 06       	cpc	r1, r20
    132a:	05 06       	cpc	r0, r21
    132c:	08 95       	ret

0000132e <__fp_round>:
    132e:	09 2e       	mov	r0, r25
    1330:	03 94       	inc	r0
    1332:	00 0c       	add	r0, r0
    1334:	11 f4       	brne	.+4      	; 0x133a <__fp_round+0xc>
    1336:	88 23       	and	r24, r24
    1338:	52 f0       	brmi	.+20     	; 0x134e <__fp_round+0x20>
    133a:	bb 0f       	add	r27, r27
    133c:	40 f4       	brcc	.+16     	; 0x134e <__fp_round+0x20>
    133e:	bf 2b       	or	r27, r31
    1340:	11 f4       	brne	.+4      	; 0x1346 <__fp_round+0x18>
    1342:	60 ff       	sbrs	r22, 0
    1344:	04 c0       	rjmp	.+8      	; 0x134e <__fp_round+0x20>
    1346:	6f 5f       	subi	r22, 0xFF	; 255
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	8f 4f       	sbci	r24, 0xFF	; 255
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	08 95       	ret

00001350 <__tablejump2__>:
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	88 1f       	adc	r24, r24
    1356:	8b bf       	out	0x3b, r24	; 59
    1358:	07 90       	elpm	r0, Z+
    135a:	f6 91       	elpm	r31, Z
    135c:	e0 2d       	mov	r30, r0
    135e:	19 94       	eijmp

00001360 <atoi>:
    1360:	fc 01       	movw	r30, r24
    1362:	88 27       	eor	r24, r24
    1364:	99 27       	eor	r25, r25
    1366:	e8 94       	clt
    1368:	21 91       	ld	r18, Z+
    136a:	20 32       	cpi	r18, 0x20	; 32
    136c:	e9 f3       	breq	.-6      	; 0x1368 <atoi+0x8>
    136e:	29 30       	cpi	r18, 0x09	; 9
    1370:	10 f0       	brcs	.+4      	; 0x1376 <atoi+0x16>
    1372:	2e 30       	cpi	r18, 0x0E	; 14
    1374:	c8 f3       	brcs	.-14     	; 0x1368 <atoi+0x8>
    1376:	2b 32       	cpi	r18, 0x2B	; 43
    1378:	39 f0       	breq	.+14     	; 0x1388 <atoi+0x28>
    137a:	2d 32       	cpi	r18, 0x2D	; 45
    137c:	31 f4       	brne	.+12     	; 0x138a <atoi+0x2a>
    137e:	68 94       	set
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <atoi+0x28>
    1382:	3a d0       	rcall	.+116    	; 0x13f8 <__mulhi_const_10>
    1384:	82 0f       	add	r24, r18
    1386:	91 1d       	adc	r25, r1
    1388:	21 91       	ld	r18, Z+
    138a:	20 53       	subi	r18, 0x30	; 48
    138c:	2a 30       	cpi	r18, 0x0A	; 10
    138e:	c8 f3       	brcs	.-14     	; 0x1382 <atoi+0x22>
    1390:	1e f4       	brtc	.+6      	; 0x1398 <atoi+0x38>
    1392:	90 95       	com	r25
    1394:	81 95       	neg	r24
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	08 95       	ret

0000139a <strcat>:
    139a:	fb 01       	movw	r30, r22
    139c:	dc 01       	movw	r26, r24
    139e:	0d 90       	ld	r0, X+
    13a0:	00 20       	and	r0, r0
    13a2:	e9 f7       	brne	.-6      	; 0x139e <strcat+0x4>
    13a4:	11 97       	sbiw	r26, 0x01	; 1
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	00 20       	and	r0, r0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <strcat+0xc>
    13ae:	08 95       	ret

000013b0 <strstr>:
    13b0:	fb 01       	movw	r30, r22
    13b2:	51 91       	ld	r21, Z+
    13b4:	55 23       	and	r21, r21
    13b6:	a9 f0       	breq	.+42     	; 0x13e2 <strstr+0x32>
    13b8:	bf 01       	movw	r22, r30
    13ba:	dc 01       	movw	r26, r24
    13bc:	4d 91       	ld	r20, X+
    13be:	45 17       	cp	r20, r21
    13c0:	41 11       	cpse	r20, r1
    13c2:	e1 f7       	brne	.-8      	; 0x13bc <strstr+0xc>
    13c4:	59 f4       	brne	.+22     	; 0x13dc <strstr+0x2c>
    13c6:	cd 01       	movw	r24, r26
    13c8:	01 90       	ld	r0, Z+
    13ca:	00 20       	and	r0, r0
    13cc:	49 f0       	breq	.+18     	; 0x13e0 <strstr+0x30>
    13ce:	4d 91       	ld	r20, X+
    13d0:	40 15       	cp	r20, r0
    13d2:	41 11       	cpse	r20, r1
    13d4:	c9 f3       	breq	.-14     	; 0x13c8 <strstr+0x18>
    13d6:	fb 01       	movw	r30, r22
    13d8:	41 11       	cpse	r20, r1
    13da:	ef cf       	rjmp	.-34     	; 0x13ba <strstr+0xa>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	08 95       	ret

000013e4 <__itoa_ncheck>:
    13e4:	bb 27       	eor	r27, r27
    13e6:	4a 30       	cpi	r20, 0x0A	; 10
    13e8:	31 f4       	brne	.+12     	; 0x13f6 <__itoa_ncheck+0x12>
    13ea:	99 23       	and	r25, r25
    13ec:	22 f4       	brpl	.+8      	; 0x13f6 <__itoa_ncheck+0x12>
    13ee:	bd e2       	ldi	r27, 0x2D	; 45
    13f0:	90 95       	com	r25
    13f2:	81 95       	neg	r24
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <__utoa_common>

000013f8 <__mulhi_const_10>:
    13f8:	7a e0       	ldi	r23, 0x0A	; 10
    13fa:	97 9f       	mul	r25, r23
    13fc:	90 2d       	mov	r25, r0
    13fe:	87 9f       	mul	r24, r23
    1400:	80 2d       	mov	r24, r0
    1402:	91 0d       	add	r25, r1
    1404:	11 24       	eor	r1, r1
    1406:	08 95       	ret

00001408 <__utoa_ncheck>:
    1408:	bb 27       	eor	r27, r27

0000140a <__utoa_common>:
    140a:	fb 01       	movw	r30, r22
    140c:	55 27       	eor	r21, r21
    140e:	aa 27       	eor	r26, r26
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	aa 1f       	adc	r26, r26
    1416:	a4 17       	cp	r26, r20
    1418:	10 f0       	brcs	.+4      	; 0x141e <__utoa_common+0x14>
    141a:	a4 1b       	sub	r26, r20
    141c:	83 95       	inc	r24
    141e:	50 51       	subi	r21, 0x10	; 16
    1420:	b9 f7       	brne	.-18     	; 0x1410 <__utoa_common+0x6>
    1422:	a0 5d       	subi	r26, 0xD0	; 208
    1424:	aa 33       	cpi	r26, 0x3A	; 58
    1426:	08 f0       	brcs	.+2      	; 0x142a <__utoa_common+0x20>
    1428:	a9 5d       	subi	r26, 0xD9	; 217
    142a:	a1 93       	st	Z+, r26
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	79 f7       	brne	.-34     	; 0x140e <__utoa_common+0x4>
    1430:	b1 11       	cpse	r27, r1
    1432:	b1 93       	st	Z+, r27
    1434:	11 92       	st	Z+, r1
    1436:	cb 01       	movw	r24, r22
    1438:	00 c0       	rjmp	.+0      	; 0x143a <strrev>

0000143a <strrev>:
    143a:	dc 01       	movw	r26, r24
    143c:	fc 01       	movw	r30, r24
    143e:	67 2f       	mov	r22, r23
    1440:	71 91       	ld	r23, Z+
    1442:	77 23       	and	r23, r23
    1444:	e1 f7       	brne	.-8      	; 0x143e <strrev+0x4>
    1446:	32 97       	sbiw	r30, 0x02	; 2
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <strrev+0x18>
    144a:	7c 91       	ld	r23, X
    144c:	6d 93       	st	X+, r22
    144e:	70 83       	st	Z, r23
    1450:	62 91       	ld	r22, -Z
    1452:	ae 17       	cp	r26, r30
    1454:	bf 07       	cpc	r27, r31
    1456:	c8 f3       	brcs	.-14     	; 0x144a <strrev+0x10>
    1458:	08 95       	ret

0000145a <_exit>:
    145a:	f8 94       	cli

0000145c <__stop_program>:
    145c:	ff cf       	rjmp	.-2      	; 0x145c <__stop_program>
