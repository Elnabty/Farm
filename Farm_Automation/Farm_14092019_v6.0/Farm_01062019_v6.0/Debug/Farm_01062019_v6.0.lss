
Farm_01062019_v6.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000856  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bd  00800200  00800200  000008ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fcd  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014bb  00000000  00000000  00002a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000108f  00000000  00000000  00003f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093f  00000000  00000000  000052d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0a  00000000  00000000  00005c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	23 c3       	rjmp	.+1606   	; 0x68c <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	2c c3       	rjmp	.+1624   	; 0x6ae <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	95 c3       	rjmp	.+1834   	; 0x790 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e5       	ldi	r30, 0x56	; 86
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 3b       	cpi	r26, 0xBD	; 189
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5a d1       	rcall	.+692    	; 0x3d4 <main>
 120:	98 c3       	rjmp	.+1840   	; 0x852 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <circularQueue_isEmpty>:
	else
	{
		ret = FALSE;
	}
	
	return ret;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <head>
 12a:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_end>
 12e:	29 13       	cpse	r18, r25
 130:	80 e0       	ldi	r24, 0x00	; 0
	
}
 132:	08 95       	ret

00000134 <circularQueue_enqueue>:
	
	if(tail == MAX_BUFFER_LENGTH)
	{
		tail = 0;
	}
	gBuffer[tail] = data;
 134:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_end>
 138:	e9 2f       	mov	r30, r25
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	e7 5f       	subi	r30, 0xF7	; 247
 13e:	fd 4f       	sbci	r31, 0xFD	; 253
 140:	80 83       	st	Z, r24
	tail = tail + 1;
 142:	9f 5f       	subi	r25, 0xFF	; 255
 144:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__data_end>
 148:	08 95       	ret

0000014a <circularQueue_dequeue>:
	if(head == MAX_BUFFER_LENGTH)
	{
		head = 0;
	}
	
	ret = gBuffer[head];
 14a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <head>
 14e:	e9 2f       	mov	r30, r25
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e7 5f       	subi	r30, 0xF7	; 247
 154:	fd 4f       	sbci	r31, 0xFD	; 253
 156:	80 81       	ld	r24, Z
	
	head = head +1;
 158:	9f 5f       	subi	r25, 0xFF	; 255
 15a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <head>
	
	return ret;
	
}
 15e:	08 95       	ret

00000160 <dht_getdata_dht_11>:
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
 160:	2f 92       	push	r2
 162:	3f 92       	push	r3
 164:	4f 92       	push	r4
 166:	5f 92       	push	r5
 168:	7f 92       	push	r7
 16a:	8f 92       	push	r8
 16c:	9f 92       	push	r9
 16e:	af 92       	push	r10
 170:	bf 92       	push	r11
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <dht_getdata_dht_11+0x24>
 184:	1f 92       	push	r1
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	5c 01       	movw	r10, r24
 18e:	4b 01       	movw	r8, r22

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
 190:	fe 01       	movw	r30, r28
 192:	31 96       	adiw	r30, 0x01	; 1
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	df 01       	movw	r26, r30
 198:	1d 92       	st	X+, r1
 19a:	8a 95       	dec	r24
 19c:	e9 f7       	brne	.-6      	; 0x198 <dht_getdata_dht_11+0x38>

	//reset port
	DDR(DDR_data) |= (1<<channel); //output
 19e:	fa 01       	movw	r30, r20
 1a0:	80 a1       	ldd	r24, Z+32	; 0x20
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	0e 2c       	mov	r0, r14
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <dht_getdata_dht_11+0x4e>
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <dht_getdata_dht_11+0x4a>
 1b2:	8e 2b       	or	r24, r30
 1b4:	da 01       	movw	r26, r20
 1b6:	90 96       	adiw	r26, 0x20	; 32
 1b8:	8c 93       	st	X, r24
	PORT(PORT_data) |= (1<<channel); //high
 1ba:	d9 01       	movw	r26, r18
 1bc:	90 96       	adiw	r26, 0x20	; 32
 1be:	8c 91       	ld	r24, X
 1c0:	90 97       	sbiw	r26, 0x20	; 32
 1c2:	8e 2b       	or	r24, r30
 1c4:	90 96       	adiw	r26, 0x20	; 32
 1c6:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	bf ef       	ldi	r27, 0xFF	; 255
 1ca:	61 ee       	ldi	r22, 0xE1	; 225
 1cc:	74 e0       	ldi	r23, 0x04	; 4
 1ce:	b1 50       	subi	r27, 0x01	; 1
 1d0:	60 40       	sbci	r22, 0x00	; 0
 1d2:	70 40       	sbci	r23, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <dht_getdata_dht_11+0x6e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <dht_getdata_dht_11+0x78>
 1d8:	00 00       	nop
	_delay_ms(100);

	//send request
	PORT(PORT_data) &= ~(1<<channel); //low
 1da:	d9 01       	movw	r26, r18
 1dc:	90 96       	adiw	r26, 0x20	; 32
 1de:	9c 91       	ld	r25, X
 1e0:	90 97       	sbiw	r26, 0x20	; 32
 1e2:	8e 2f       	mov	r24, r30
 1e4:	80 95       	com	r24
 1e6:	98 23       	and	r25, r24
 1e8:	90 96       	adiw	r26, 0x20	; 32
 1ea:	9c 93       	st	X, r25
 1ec:	bf ef       	ldi	r27, 0xFF	; 255
 1ee:	60 ee       	ldi	r22, 0xE0	; 224
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	b1 50       	subi	r27, 0x01	; 1
 1f4:	60 40       	sbci	r22, 0x00	; 0
 1f6:	70 40       	sbci	r23, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <dht_getdata_dht_11+0x92>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <dht_getdata_dht_11+0x9c>
 1fc:	00 00       	nop
	
	_delay_ms(18);
	
	
	
	PORT(PORT_data) |= (1<<channel); //high
 1fe:	d9 01       	movw	r26, r18
 200:	90 96       	adiw	r26, 0x20	; 32
 202:	9c 91       	ld	r25, X
 204:	90 97       	sbiw	r26, 0x20	; 32
 206:	9e 2b       	or	r25, r30
 208:	90 96       	adiw	r26, 0x20	; 32
 20a:	9c 93       	st	X, r25
	DDR(DDR_data) &= ~(1<<channel); //input
 20c:	da 01       	movw	r26, r20
 20e:	90 96       	adiw	r26, 0x20	; 32
 210:	9c 91       	ld	r25, X
 212:	90 97       	sbiw	r26, 0x20	; 32
 214:	89 23       	and	r24, r25
 216:	90 96       	adiw	r26, 0x20	; 32
 218:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	b5 ed       	ldi	r27, 0xD5	; 213
 21c:	ba 95       	dec	r27
 21e:	f1 f7       	brne	.-4      	; 0x21c <dht_getdata_dht_11+0xbc>
 220:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((PIN(PIN_data) & (1<<channel))) {
 222:	18 01       	movw	r2, r16
 224:	60 e2       	ldi	r22, 0x20	; 32
 226:	26 0e       	add	r2, r22
 228:	31 1c       	adc	r3, r1
 22a:	d8 01       	movw	r26, r16
 22c:	90 96       	adiw	r26, 0x20	; 32
 22e:	8c 91       	ld	r24, X
 230:	90 97       	sbiw	r26, 0x20	; 32
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 2c       	mov	r0, r14
 236:	02 c0       	rjmp	.+4      	; 0x23c <dht_getdata_dht_11+0xdc>
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <dht_getdata_dht_11+0xd8>
 240:	80 fd       	sbrc	r24, 0
 242:	82 c0       	rjmp	.+260    	; 0x348 <dht_getdata_dht_11+0x1e8>
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <dht_getdata_dht_11+0xe8>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <dht_getdata_dht_11+0xee>
 24e:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIN(PIN_data) & (1<<channel))) {
 250:	90 96       	adiw	r26, 0x20	; 32
 252:	8c 91       	ld	r24, X
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <dht_getdata_dht_11+0xfc>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	ea 94       	dec	r14
 25e:	e2 f7       	brpl	.-8      	; 0x258 <dht_getdata_dht_11+0xf8>
 260:	80 ff       	sbrs	r24, 0
 262:	74 c0       	rjmp	.+232    	; 0x34c <dht_getdata_dht_11+0x1ec>
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <dht_getdata_dht_11+0x108>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <dht_getdata_dht_11+0x10e>
 26e:	00 00       	nop
 270:	de 01       	movw	r26, r28
 272:	11 96       	adiw	r26, 0x01	; 1
 274:	6d 01       	movw	r12, r26
 276:	2e 01       	movw	r4, r28
 278:	b6 e0       	ldi	r27, 0x06	; 6
 27a:	4b 0e       	add	r4, r27
 27c:	51 1c       	adc	r5, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
 27e:	ee 24       	eor	r14, r14
 280:	e3 94       	inc	r14
 282:	f1 2c       	mov	r15, r1
 284:	36 c0       	rjmp	.+108    	; 0x2f2 <dht_getdata_dht_11+0x192>
 286:	61 50       	subi	r22, 0x01	; 1
 288:	71 09       	sbc	r23, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 28a:	19 f4       	brne	.+6      	; 0x292 <dht_getdata_dht_11+0x132>
 28c:	61 c0       	rjmp	.+194    	; 0x350 <dht_getdata_dht_11+0x1f0>
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
 28e:	69 ec       	ldi	r22, 0xC9	; 201
 290:	70 e0       	ldi	r23, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
 292:	d1 01       	movw	r26, r2
 294:	8c 91       	ld	r24, X
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	8e 23       	and	r24, r30
 29a:	9f 23       	and	r25, r31
 29c:	89 2b       	or	r24, r25
 29e:	99 f3       	breq	.-26     	; 0x286 <dht_getdata_dht_11+0x126>
 2a0:	b0 ea       	ldi	r27, 0xA0	; 160
 2a2:	ba 95       	dec	r27
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <dht_getdata_dht_11+0x142>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
 2a6:	d1 01       	movw	r26, r2
 2a8:	8c 91       	ld	r24, X
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	8e 23       	and	r24, r30
 2ae:	9f 23       	and	r25, r31
 2b0:	89 2b       	or	r24, r25
 2b2:	41 f0       	breq	.+16     	; 0x2c4 <dht_getdata_dht_11+0x164>
			result |= (1<<(7-i));
 2b4:	c7 01       	movw	r24, r14
 2b6:	00 2e       	mov	r0, r16
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <dht_getdata_dht_11+0x15e>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <dht_getdata_dht_11+0x15a>
 2c2:	78 2a       	or	r7, r24
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
 2c4:	69 ec       	ldi	r22, 0xC9	; 201
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <dht_getdata_dht_11+0x172>
 2ca:	61 50       	subi	r22, 0x01	; 1
 2cc:	71 09       	sbc	r23, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <dht_getdata_dht_11+0x172>
 2d0:	41 c0       	rjmp	.+130    	; 0x354 <dht_getdata_dht_11+0x1f4>
			}
			_delay_us(30);
			if(PIN(PIN_data) & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
 2d2:	d1 01       	movw	r26, r2
 2d4:	8c 91       	ld	r24, X
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	8e 23       	and	r24, r30
 2da:	9f 23       	and	r25, r31
 2dc:	89 2b       	or	r24, r25
 2de:	a9 f7       	brne	.-22     	; 0x2ca <dht_getdata_dht_11+0x16a>
 2e0:	01 50       	subi	r16, 0x01	; 1
 2e2:	11 09       	sbc	r17, r1
 2e4:	a0 f6       	brcc	.-88     	; 0x28e <dht_getdata_dht_11+0x12e>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
 2e6:	d6 01       	movw	r26, r12
 2e8:	7d 92       	st	X+, r7
 2ea:	6d 01       	movw	r12, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
 2ec:	4a 16       	cp	r4, r26
 2ee:	5b 06       	cpc	r5, r27
 2f0:	21 f0       	breq	.+8      	; 0x2fa <dht_getdata_dht_11+0x19a>
 * get data from sensor
 */


int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint16_t DDR_data,uint16_t PORT_data,uint16_t PIN_data ,uint8_t channel)
{
 2f2:	07 e0       	ldi	r16, 0x07	; 7
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	71 2c       	mov	r7, r1
 2f8:	ca cf       	rjmp	.-108    	; 0x28e <dht_getdata_dht_11+0x12e>
		}
		bits[j] = result;
	}

	//reset port
	DDR(DDR_data) |= (1<<channel); //output
 2fa:	da 01       	movw	r26, r20
 2fc:	90 96       	adiw	r26, 0x20	; 32
 2fe:	8c 91       	ld	r24, X
 300:	90 97       	sbiw	r26, 0x20	; 32
 302:	8e 2b       	or	r24, r30
 304:	90 96       	adiw	r26, 0x20	; 32
 306:	8c 93       	st	X, r24
	PORT(PORT_data) |= (1<<channel); //low
 308:	d9 01       	movw	r26, r18
 30a:	90 96       	adiw	r26, 0x20	; 32
 30c:	8c 91       	ld	r24, X
 30e:	90 97       	sbiw	r26, 0x20	; 32
 310:	e8 2b       	or	r30, r24
 312:	90 96       	adiw	r26, 0x20	; 32
 314:	ec 93       	st	X, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	bf ef       	ldi	r27, 0xFF	; 255
 318:	e1 ee       	ldi	r30, 0xE1	; 225
 31a:	f4 e0       	ldi	r31, 0x04	; 4
 31c:	b1 50       	subi	r27, 0x01	; 1
 31e:	e0 40       	sbci	r30, 0x00	; 0
 320:	f0 40       	sbci	r31, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <dht_getdata_dht_11+0x1bc>
 324:	00 c0       	rjmp	.+0      	; 0x326 <dht_getdata_dht_11+0x1c6>
 326:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
 328:	29 81       	ldd	r18, Y+1	; 0x01
 32a:	3b 81       	ldd	r19, Y+3	; 0x03
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	82 0f       	add	r24, r18
 330:	83 0f       	add	r24, r19
 332:	9c 81       	ldd	r25, Y+4	; 0x04
 334:	89 0f       	add	r24, r25
 336:	9d 81       	ldd	r25, Y+5	; 0x05
 338:	89 13       	cpse	r24, r25
 33a:	0e c0       	rjmp	.+28     	; 0x358 <dht_getdata_dht_11+0x1f8>
		//return temperature and humidity
		
		*temperature = bits[2];
 33c:	d5 01       	movw	r26, r10
 33e:	3c 93       	st	X, r19
		*humidity = bits[0];
 340:	f4 01       	movw	r30, r8
 342:	20 83       	st	Z, r18
		



		
		return 0;
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	09 c0       	rjmp	.+18     	; 0x35a <dht_getdata_dht_11+0x1fa>
	DDR(DDR_data) &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((PIN(PIN_data) & (1<<channel))) {
		return -1;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	07 c0       	rjmp	.+14     	; 0x35a <dht_getdata_dht_11+0x1fa>
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIN(PIN_data) & (1<<channel))) {
		return -1;
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	05 c0       	rjmp	.+10     	; 0x35a <dht_getdata_dht_11+0x1fa>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIN(PIN_data) & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	03 c0       	rjmp	.+6      	; 0x35a <dht_getdata_dht_11+0x1fa>
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIN(PIN_data) & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	01 c0       	rjmp	.+2      	; 0x35a <dht_getdata_dht_11+0x1fa>

		
		return 0;
	}

	return -1;
 358:	8f ef       	ldi	r24, 0xFF	; 255

}
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	bf 90       	pop	r11
 376:	af 90       	pop	r10
 378:	9f 90       	pop	r9
 37a:	8f 90       	pop	r8
 37c:	7f 90       	pop	r7
 37e:	5f 90       	pop	r5
 380:	4f 90       	pop	r4
 382:	3f 90       	pop	r3
 384:	2f 90       	pop	r2
 386:	08 95       	ret

00000388 <GPIO_init>:



void GPIO_init(void)
{
	 DDR_FLYMED_CONFIG;
 388:	ea e0       	ldi	r30, 0x0A	; 10
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	80 81       	ld	r24, Z
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 83       	st	Z, r24
	 DDR_LIGHT_1_CONFIG;
 392:	80 81       	ld	r24, Z
 394:	84 60       	ori	r24, 0x04	; 4
 396:	80 83       	st	Z, r24
	 DDR_VENTILATION_CONFIG;
 398:	80 81       	ld	r24, Z
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	80 83       	st	Z, r24
	 
	 DDR_SOL_1_CONFIG;
 39e:	9a 9a       	sbi	0x13, 2	; 19
	 DDR_SOL_2_CONFIG;
 3a0:	98 9a       	sbi	0x13, 0	; 19
	 DDR_SOL_3_CONFIG;
 3a2:	80 81       	ld	r24, Z
 3a4:	80 64       	ori	r24, 0x40	; 64
 3a6:	80 83       	st	Z, r24
	 DDR_SOL_4_CONFIG;
 3a8:	80 81       	ld	r24, Z
 3aa:	80 61       	ori	r24, 0x10	; 16
 3ac:	80 83       	st	Z, r24
	 
	 SOL_1_OFF;
 3ae:	a2 9a       	sbi	0x14, 2	; 20
	 SOL_2_OFF;
 3b0:	a0 9a       	sbi	0x14, 0	; 20
	 SOL_3_OFF;
 3b2:	eb e0       	ldi	r30, 0x0B	; 11
 3b4:	f1 e0       	ldi	r31, 0x01	; 1
 3b6:	80 81       	ld	r24, Z
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	80 83       	st	Z, r24
	 SOL_4_OFF;
 3bc:	80 81       	ld	r24, Z
 3be:	80 61       	ori	r24, 0x10	; 16
 3c0:	80 83       	st	Z, r24
	 
	 FLYMED_OFF;
 3c2:	80 81       	ld	r24, Z
 3c4:	84 60       	ori	r24, 0x04	; 4
 3c6:	80 83       	st	Z, r24
	 LIGHT_1_ON;
 3c8:	2a 98       	cbi	0x05, 2	; 5
	 VENTILATION_OFF;
 3ca:	80 81       	ld	r24, Z
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	80 83       	st	Z, r24
	 LIGHT_2_OFF;
 3d0:	28 9a       	sbi	0x05, 0	; 5
 3d2:	08 95       	ret

000003d4 <main>:


extern volatile unsigned char oneSec;

int main(void)
{
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	29 97       	sbiw	r28, 0x09	; 9
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61

	GPIO_init();
 3e8:	cf df       	rcall	.-98     	; 0x388 <GPIO_init>
	motorDriver_Config();
 3ea:	19 d1       	rcall	.+562    	; 0x61e <motorDriver_Config>
    timer1_init();
 3ec:	36 d1       	rcall	.+620    	; 0x65a <timer1_init>
    timer0_init();
 3ee:	46 d1       	rcall	.+652    	; 0x67c <timer0_init>
 3f0:	a2 d1       	rcall	.+836    	; 0x736 <UART_int>
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
    uint8_t sec_10 = 0u;
    Json Jdata;

    UART_int();
 3f2:	8f e1       	ldi	r24, 0x1F	; 31
 3f4:	9e e4       	ldi	r25, 0x4E	; 78
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <main+0x22>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0x28>
 3fc:	00 00       	nop
 3fe:	f8 94       	cli




    //sei();
    cli();
 400:	f2 d1       	rcall	.+996    	; 0x7e6 <usound_init>
    
    usound_init();
 402:	9f ef       	ldi	r25, 0xFF	; 255
 404:	23 ed       	ldi	r18, 0xD3	; 211
 406:	80 e3       	ldi	r24, 0x30	; 48
 408:	91 50       	subi	r25, 0x01	; 1
 40a:	20 40       	sbci	r18, 0x00	; 0
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	9f ef       	ldi	r25, 0xFF	; 255
 416:	23 ed       	ldi	r18, 0xD3	; 211
 418:	80 e3       	ldi	r24, 0x30	; 48
 41a:	91 50       	subi	r25, 0x01	; 1
 41c:	20 40       	sbci	r18, 0x00	; 0
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	9f ef       	ldi	r25, 0xFF	; 255
 428:	23 ed       	ldi	r18, 0xD3	; 211
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	91 50       	subi	r25, 0x01	; 1
 42e:	20 40       	sbci	r18, 0x00	; 0
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
 438:	9f ef       	ldi	r25, 0xFF	; 255
 43a:	23 ed       	ldi	r18, 0xD3	; 211
 43c:	80 e3       	ldi	r24, 0x30	; 48
 43e:	91 50       	subi	r25, 0x01	; 1
 440:	20 40       	sbci	r18, 0x00	; 0
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 448:	00 00       	nop
 44a:	9f ef       	ldi	r25, 0xFF	; 255
 44c:	23 ed       	ldi	r18, 0xD3	; 211
 44e:	80 e3       	ldi	r24, 0x30	; 48
 450:	91 50       	subi	r25, 0x01	; 1
 452:	20 40       	sbci	r18, 0x00	; 0
 454:	80 40       	sbci	r24, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	f0 90 08 02 	lds	r15, 0x0208	; 0x800208 <oneSec>
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    oldTime = oneSec;
 460:	78 94       	sei
 462:	99 e2       	ldi	r25, 0x29	; 41
    
     
    sei();
 464:	88 e1       	ldi	r24, 0x18	; 24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	a8 95       	wdr
 46c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
 470:	0f be       	out	0x3f, r0	; 63
 472:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
 476:	a8 95       	wdr
 478:	81 e0       	ldi	r24, 0x01	; 1
	 wdt_enable(WDTO_8S);
	 wdt_reset();
 47a:	8a 83       	std	Y+2, r24	; 0x02
    Jdata.field1=1;
 47c:	8b 83       	std	Y+3, r24	; 0x03
 47e:	8c 83       	std	Y+4, r24	; 0x04
    Jdata.field2=1;
 480:	8d 83       	std	Y+5, r24	; 0x05
    Jdata.field3=1;
 482:	1e 82       	std	Y+6, r1	; 0x06
    Jdata.field4=1;
 484:	1f 82       	std	Y+7, r1	; 0x07
    Jdata.field5=0;
 486:	18 86       	std	Y+8, r1	; 0x08
    Jdata.field6=0;
 488:	19 86       	std	Y+9, r1	; 0x09
    Jdata.field7=0;
 48a:	b1 2c       	mov	r11, r1
    Jdata.field8=0;
 48c:	c1 2c       	mov	r12, r1
    timer0_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
    uint8_t sec_10 = 0u;
 48e:	d1 2c       	mov	r13, r1
    timer1_init();
    timer0_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
 490:	0f 2e       	mov	r0, r31
	GPIO_init();
	motorDriver_Config();
    timer1_init();
    timer0_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
 492:	fa e0       	ldi	r31, 0x0A	; 10
						int8_t temp =0;
						temp = circularQueue_dequeue();
							//itoa(waterLevel,buffer,10);
							
						    Jdata.field5=0;
						    Jdata.field6=10;
 494:	af 2e       	mov	r10, r31
 496:	f0 2d       	mov	r31, r0
 498:	01 c0       	rjmp	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49a:	c1 2c       	mov	r12, r1
 49c:	a8 95       	wdr


                    if(sec_4 == 4u)
                        {
                            //task_4Sec();
                            sec_4 = 0;
 49e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <oneSec>


			 wdt_reset();
            

            if(oneSec != oldTime)
 4a2:	8f 15       	cp	r24, r15
 4a4:	d9 f3       	breq	.-10     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a6:	f0 90 08 02 	lds	r15, 0x0208	; 0x800208 <oneSec>
                {
                    oldTime = oneSec;
 4aa:	3c de       	rcall	.-904    	; 0x124 <circularQueue_isEmpty>
					if(circularQueue_isEmpty()!=TRUE)
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	51 f0       	breq	.+20     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b0:	4c de       	rcall	.-872    	; 0x14a <circularQueue_dequeue>
 4b2:	1e 82       	std	Y+6, r1	; 0x06
					{
						int8_t temp =0;
						temp = circularQueue_dequeue();
 4b4:	af 82       	std	Y+7, r10	; 0x07
 4b6:	18 86       	std	Y+8, r1	; 0x08
							//itoa(waterLevel,buffer,10);
							
						    Jdata.field5=0;
						    Jdata.field6=10;
 4b8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <oneSec>
						    Jdata.field7=0;
						    Jdata.field8=oneSec;
 4bc:	89 87       	std	Y+9, r24	; 0x09
 4be:	ce 01       	movw	r24, r28
 4c0:	01 96       	adiw	r24, 0x01	; 1
						motorDriver_Med(&Jdata);
 4c2:	2d d0       	rcall	.+90     	; 0x51e <motorDriver_Med>
 4c4:	ee 24       	eor	r14, r14
 4c6:	e3 94       	inc	r14
 4c8:	02 e1       	ldi	r16, 0x12	; 18
					}
				 
				dht_getdata_dht_11(&temperature,&humidity,dht_2_DDRG,dht_2_PORTG,dht_2_PING,1);
 4ca:	10 e0       	ldi	r17, 0x00	; 0
 4cc:	24 e1       	ldi	r18, 0x14	; 20
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	43 e1       	ldi	r20, 0x13	; 19
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	72 e0       	ldi	r23, 0x02	; 2
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	41 de       	rcall	.-894    	; 0x160 <dht_getdata_dht_11>
 4de:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <temperature>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4e2:	4a 2d       	mov	r20, r10
 4e4:	69 e9       	ldi	r22, 0x99	; 153
 4e6:	73 e0       	ldi	r23, 0x03	; 3
 4e8:	08 2e       	mov	r0, r24
 4ea:	00 0c       	add	r0, r0
 4ec:	99 0b       	sbc	r25, r25
 4ee:	7e d1       	rcall	.+764    	; 0x7ec <__itoa_ncheck>
 4f0:	89 e9       	ldi	r24, 0x99	; 153
				//waterLevel=readDistance();
				
				itoa(temperature,buffer,10);
				UART_string_tx(buffer);
 4f2:	93 e0       	ldi	r25, 0x03	; 3
 4f4:	38 d1       	rcall	.+624    	; 0x766 <UART_string_tx>
 4f6:	8a 2d       	mov	r24, r10
 4f8:	2e d1       	rcall	.+604    	; 0x756 <UART_tx>
				UART_tx('\n');
 4fa:	95 e0       	ldi	r25, 0x05	; 5
 4fc:	d9 16       	cp	r13, r25
 4fe:	11 f0       	breq	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
				

                    if(sec_5 == 5u)
 500:	d3 94       	inc	r13
 502:	01 c0       	rjmp	.+2      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 504:	d1 2c       	mov	r13, r1
                          //  task_5sec();
                            sec_5 = 0;
                        }
                    else
                        {
                            sec_5++;
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	b2 16       	cp	r11, r18
				

                    if(sec_5 == 5u)
                        {
                          //  task_5sec();
                            sec_5 = 0;
 50a:	11 f0       	breq	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
                    else
                        {
                            sec_5++;
                        }

                    if(sec_10 == 10u)
 50c:	b3 94       	inc	r11
 50e:	01 c0       	rjmp	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 510:	b1 2c       	mov	r11, r1
                        }

                    else
                        {

                            sec_10++;
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	c8 16       	cp	r12, r24

                    if(sec_10 == 10u)

                        {
                           // task_10sec();
                            sec_10=0u;
 516:	09 f4       	brne	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>

                        }



                    if(sec_4 == 4u)
 518:	c0 cf       	rjmp	.-128    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 51a:	c3 94       	inc	r12
 51c:	bf cf       	rjmp	.-130    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>

0000051e <motorDriver_Med>:
#include "motorDriver.h"

extern volatile uint16_t number_of_rotation;
volatile uint8_t Medicine;
void motorDriver_Med(struct Json * Jdata)
{
 51e:	fc 01       	movw	r30, r24
	static uint8_t Med_1_State=0;
	static uint8_t Med_2_State=0;
	int8_t data;

	if(Jdata->field7 != Med_1_State)
 520:	87 81       	ldd	r24, Z+7	; 0x07
 522:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <Med_1_State.2132>
 526:	89 17       	cp	r24, r25
 528:	d1 f1       	breq	.+116    	; 0x59e <motorDriver_Med+0x80>
	{
		Med_1_State = Jdata->field7;
 52a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Med_1_State.2132>
		data = (int8_t)(Jdata->field5);
 52e:	25 81       	ldd	r18, Z+5	; 0x05
		if(data < 0)
 530:	22 23       	and	r18, r18
 532:	dc f4       	brge	.+54     	; 0x56a <motorDriver_Med+0x4c>
		{
			MED_1_ACW;
 534:	5a 9a       	sbi	0x0b, 2	; 11
			number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 536:	02 2e       	mov	r0, r18
 538:	00 0c       	add	r0, r0
 53a:	33 0b       	sbc	r19, r19
 53c:	33 23       	and	r19, r19
 53e:	1c f4       	brge	.+6      	; 0x546 <motorDriver_Med+0x28>
 540:	31 95       	neg	r19
 542:	21 95       	neg	r18
 544:	31 09       	sbc	r19, r1
 546:	88 ec       	ldi	r24, 0xC8	; 200
 548:	28 9f       	mul	r18, r24
 54a:	90 01       	movw	r18, r0
 54c:	11 24       	eor	r1, r1
 54e:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <number_of_rotation+0x1>
 552:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <number_of_rotation>
			Medicine=1;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <Medicine>
			A4899_EN;
 55c:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
 55e:	ae e6       	ldi	r26, 0x6E	; 110
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	8c 91       	ld	r24, X
 564:	82 60       	ori	r24, 0x02	; 2
 566:	8c 93       	st	X, r24
 568:	1a c0       	rjmp	.+52     	; 0x59e <motorDriver_Med+0x80>
		}

		else
		{
			MED_1_CW;
 56a:	5a 98       	cbi	0x0b, 2	; 11
			number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 56c:	02 2e       	mov	r0, r18
 56e:	00 0c       	add	r0, r0
 570:	33 0b       	sbc	r19, r19
 572:	33 23       	and	r19, r19
 574:	1c f4       	brge	.+6      	; 0x57c <motorDriver_Med+0x5e>
 576:	31 95       	neg	r19
 578:	21 95       	neg	r18
 57a:	31 09       	sbc	r19, r1
 57c:	88 ec       	ldi	r24, 0xC8	; 200
 57e:	28 9f       	mul	r18, r24
 580:	90 01       	movw	r18, r0
 582:	11 24       	eor	r1, r1
 584:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <number_of_rotation+0x1>
 588:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <number_of_rotation>
			Medicine=1;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <Medicine>
			A4899_EN;
 592:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
 594:	ae e6       	ldi	r26, 0x6E	; 110
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	8c 91       	ld	r24, X
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	8c 93       	st	X, r24
	{

	}


	if(Jdata->field8 != Med_2_State)
 59e:	80 85       	ldd	r24, Z+8	; 0x08
 5a0:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <Med_2_State.2133>
 5a4:	89 17       	cp	r24, r25
 5a6:	d1 f1       	breq	.+116    	; 0x61c <motorDriver_Med+0xfe>
	{
		Med_2_State = Jdata->field8;
 5a8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <Med_2_State.2133>
		data = (int8_t)(Jdata->field6);
 5ac:	86 81       	ldd	r24, Z+6	; 0x06
		if(data < 0)
 5ae:	88 23       	and	r24, r24
 5b0:	dc f4       	brge	.+54     	; 0x5e8 <motorDriver_Med+0xca>
		{
			MED_2_ACW;
 5b2:	74 9a       	sbi	0x0e, 4	; 14
			number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 5b4:	08 2e       	mov	r0, r24
 5b6:	00 0c       	add	r0, r0
 5b8:	99 0b       	sbc	r25, r25
 5ba:	99 23       	and	r25, r25
 5bc:	1c f4       	brge	.+6      	; 0x5c4 <motorDriver_Med+0xa6>
 5be:	91 95       	neg	r25
 5c0:	81 95       	neg	r24
 5c2:	91 09       	sbc	r25, r1
 5c4:	28 ec       	ldi	r18, 0xC8	; 200
 5c6:	82 9f       	mul	r24, r18
 5c8:	c0 01       	movw	r24, r0
 5ca:	11 24       	eor	r1, r1
 5cc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <number_of_rotation+0x1>
 5d0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <number_of_rotation>
			Medicine=2;
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <Medicine>
			A4899_EN;
 5da:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
 5dc:	ee e6       	ldi	r30, 0x6E	; 110
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	82 60       	ori	r24, 0x02	; 2
 5e4:	80 83       	st	Z, r24
 5e6:	08 95       	ret
		}

		else
		{
			MED_2_CW;
 5e8:	74 98       	cbi	0x0e, 4	; 14
			number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 5ea:	08 2e       	mov	r0, r24
 5ec:	00 0c       	add	r0, r0
 5ee:	99 0b       	sbc	r25, r25
 5f0:	99 23       	and	r25, r25
 5f2:	1c f4       	brge	.+6      	; 0x5fa <motorDriver_Med+0xdc>
 5f4:	91 95       	neg	r25
 5f6:	81 95       	neg	r24
 5f8:	91 09       	sbc	r25, r1
 5fa:	28 ec       	ldi	r18, 0xC8	; 200
 5fc:	82 9f       	mul	r24, r18
 5fe:	c0 01       	movw	r24, r0
 600:	11 24       	eor	r1, r1
 602:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <number_of_rotation+0x1>
 606:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <number_of_rotation>
			Medicine=2;
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <Medicine>
			A4899_EN;
 610:	10 98       	cbi	0x02, 0	; 2
			TIMER0_INTER_ENABLE;
 612:	ee e6       	ldi	r30, 0x6E	; 110
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	80 83       	st	Z, r24
 61c:	08 95       	ret

0000061e <motorDriver_Config>:
}


void motorDriver_Config(void)
{
	DDR_MED_1_DIR_CONFIG;
 61e:	52 9a       	sbi	0x0a, 2	; 10
	DDR_MED_1_STEP_CONFIG;
 620:	53 9a       	sbi	0x0a, 3	; 10
	DDR_MED_2_DIR_CONFIG;
 622:	6c 9a       	sbi	0x0d, 4	; 13
	DDR_MED_2_STEP_CONFIG;
 624:	6d 9a       	sbi	0x0d, 5	; 13
	DDR_MED_3_DIR_CONFIG;
 626:	9d 9a       	sbi	0x13, 5	; 19
	DDR_MED_3_STEP_CONFIG;
 628:	6b 9a       	sbi	0x0d, 3	; 13
	DDR_MED_4_DIR_CONFIG;
 62a:	e1 e0       	ldi	r30, 0x01	; 1
 62c:	f1 e0       	ldi	r31, 0x01	; 1
 62e:	80 81       	ld	r24, Z
 630:	88 60       	ori	r24, 0x08	; 8
 632:	80 83       	st	Z, r24
	DDR_MED_4_STEP_CONFIG;
 634:	80 81       	ld	r24, Z
 636:	80 61       	ori	r24, 0x10	; 16
 638:	80 83       	st	Z, r24
	
	PORT_MED_1_DIR_CONFIG;
 63a:	52 98       	cbi	0x0a, 2	; 10
	PORT_MED_1_STEP_CONFIG;
 63c:	53 98       	cbi	0x0a, 3	; 10
	PORT_MED_2_DIR_CONFIG;
 63e:	6c 98       	cbi	0x0d, 4	; 13
	PORT_MED_2_STEP_CONFIG;
 640:	6d 98       	cbi	0x0d, 5	; 13
	PORT_MED_3_DIR_CONFIG;
 642:	9d 98       	cbi	0x13, 5	; 19
	PORT_MED_3_STEP_CONFIG;
 644:	6b 98       	cbi	0x0d, 3	; 13
	PORT_MED_4_DIR_CONFIG;
 646:	80 81       	ld	r24, Z
 648:	87 7f       	andi	r24, 0xF7	; 247
 64a:	80 83       	st	Z, r24
	PORT_MED_4_STEP_CONFIG;
 64c:	80 81       	ld	r24, Z
 64e:	8f 7e       	andi	r24, 0xEF	; 239
 650:	80 83       	st	Z, r24
	
	DDR_A4899_CINFIG;
 652:	08 9a       	sbi	0x01, 0	; 1
	PORT_A4899_CINFIG;
 654:	10 9a       	sbi	0x02, 0	; 2
	A4899_DIS;
 656:	10 9a       	sbi	0x02, 0	; 2
 658:	08 95       	ret

0000065a <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
 65a:	e1 e8       	ldi	r30, 0x81	; 129
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	8d 60       	ori	r24, 0x0D	; 13
 662:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
 664:	ef e6       	ldi	r30, 0x6F	; 111
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	83 60       	ori	r24, 0x03	; 3
 66c:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
 66e:	8d e3       	ldi	r24, 0x3D	; 61
 670:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
 674:	89 e0       	ldi	r24, 0x09	; 9
 676:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 67a:	08 95       	ret

0000067c <timer0_init>:
}

void timer0_init(void)
{

	TCCR0A |= (1<<WGM01);
 67c:	84 b5       	in	r24, 0x24	; 36
 67e:	82 60       	ori	r24, 0x02	; 2
 680:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);// no Prescaler
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	85 bd       	out	0x25, r24	; 37
	OCR0A = 125;
 686:	8d e7       	ldi	r24, 0x7D	; 125
 688:	87 bd       	out	0x27, r24	; 39
 68a:	08 95       	ret

0000068c <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	8f 93       	push	r24
	
	
	oneSec ++;
 698:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <oneSec>
 69c:	8f 5f       	subi	r24, 0xFF	; 255
 69e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <oneSec>
	
	
}
 6a2:	8f 91       	pop	r24
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <__vector_21>:

ISR (TIMER0_COMPA_vect)    // Timer0 ISR
{
 6ae:	1f 92       	push	r1
 6b0:	0f 92       	push	r0
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	0f 92       	push	r0
 6b6:	11 24       	eor	r1, r1
 6b8:	0b b6       	in	r0, 0x3b	; 59
 6ba:	0f 92       	push	r0
 6bc:	8f 93       	push	r24
 6be:	9f 93       	push	r25
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31


	switch(Medicine)
 6c4:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <Medicine>
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <__vector_21+0x24>
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	79 f0       	breq	.+30     	; 0x6ee <__vector_21+0x40>
 6d0:	1b c0       	rjmp	.+54     	; 0x708 <__vector_21+0x5a>
	{
		case 1: MED_1_TOGGLE;number_of_rotation--;break;
 6d2:	9b b1       	in	r25, 0x0b	; 11
 6d4:	88 e0       	ldi	r24, 0x08	; 8
 6d6:	89 27       	eor	r24, r25
 6d8:	8b b9       	out	0x0b, r24	; 11
 6da:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <number_of_rotation>
 6de:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <number_of_rotation+0x1>
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <number_of_rotation+0x1>
 6e8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <number_of_rotation>
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <__vector_21+0x5a>
		case 2: MED_2_TOGGLE;number_of_rotation--;break;
 6ee:	9e b1       	in	r25, 0x0e	; 14
 6f0:	80 e2       	ldi	r24, 0x20	; 32
 6f2:	89 27       	eor	r24, r25
 6f4:	8e b9       	out	0x0e, r24	; 14
 6f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <number_of_rotation>
 6fa:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <number_of_rotation+0x1>
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <number_of_rotation+0x1>
 704:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <number_of_rotation>
		default: break;
	}
	if(number_of_rotation == 0u)
 708:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <number_of_rotation>
 70c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <number_of_rotation+0x1>
 710:	89 2b       	or	r24, r25
 712:	31 f4       	brne	.+12     	; 0x720 <__vector_21+0x72>
	{
		
		A4899_DIS;
 714:	10 9a       	sbi	0x02, 0	; 2
		TIMER0_INTER_DISABLE;
 716:	ee e6       	ldi	r30, 0x6E	; 110
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	8d 7f       	andi	r24, 0xFD	; 253
 71e:	80 83       	st	Z, r24
	}
	
 720:	ff 91       	pop	r31
 722:	ef 91       	pop	r30
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	0f 90       	pop	r0
 72a:	0b be       	out	0x3b, r0	; 59
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <UART_int>:
                    newData = TRUE;
                }
        }
    else if (rc == startMarker)
        {
            recvInProgress = TRUE;
 736:	88 e9       	ldi	r24, 0x98	; 152
 738:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 73c:	86 e0       	ldi	r24, 0x06	; 6
 73e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 742:	85 e3       	ldi	r24, 0x35	; 53
 744:	8a 95       	dec	r24
 746:	f1 f7       	brne	.-4      	; 0x744 <UART_int+0xe>
 748:	00 00       	nop
 74a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 754:	08 95       	ret

00000756 <UART_tx>:
 756:	e0 ec       	ldi	r30, 0xC0	; 192
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	90 81       	ld	r25, Z
 75c:	95 ff       	sbrs	r25, 5
 75e:	fd cf       	rjmp	.-6      	; 0x75a <UART_tx+0x4>
 760:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 764:	08 95       	ret

00000766 <UART_string_tx>:
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	fc 01       	movw	r30, r24
 76e:	80 81       	ld	r24, Z
 770:	88 23       	and	r24, r24
 772:	51 f0       	breq	.+20     	; 0x788 <UART_string_tx+0x22>
 774:	8f 01       	movw	r16, r30
 776:	c0 e0       	ldi	r28, 0x00	; 0
 778:	ee df       	rcall	.-36     	; 0x756 <UART_tx>
 77a:	cf 5f       	subi	r28, 0xFF	; 255
 77c:	f8 01       	movw	r30, r16
 77e:	ec 0f       	add	r30, r28
 780:	f1 1d       	adc	r31, r1
 782:	80 81       	ld	r24, Z
 784:	81 11       	cpse	r24, r1
 786:	f8 cf       	rjmp	.-16     	; 0x778 <UART_string_tx+0x12>
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	08 95       	ret

00000790 <__vector_25>:
}



ISR(USART0_RX_vect)
{
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	0b b6       	in	r0, 0x3b	; 59
 79c:	0f 92       	push	r0
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	4f 93       	push	r20
 7a4:	5f 93       	push	r21
 7a6:	6f 93       	push	r22
 7a8:	7f 93       	push	r23
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	af 93       	push	r26
 7b0:	bf 93       	push	r27
 7b2:	ef 93       	push	r30
 7b4:	ff 93       	push	r31
    cli();
 7b6:	f8 94       	cli



    circularQueue_enqueue((uint8_t)(UDR0));
 7b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 7bc:	bb dc       	rcall	.-1674   	; 0x134 <circularQueue_enqueue>
    //recvWithStartEndMarkers(UDR0);


    sei();
 7be:	78 94       	sei

}
 7c0:	ff 91       	pop	r31
 7c2:	ef 91       	pop	r30
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	7f 91       	pop	r23
 7ce:	6f 91       	pop	r22
 7d0:	5f 91       	pop	r21
 7d2:	4f 91       	pop	r20
 7d4:	3f 91       	pop	r19
 7d6:	2f 91       	pop	r18
 7d8:	0f 90       	pop	r0
 7da:	0b be       	out	0x3b, r0	; 59
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <usound_init>:
#include "usound.h"

void usound_init(void)
{
	US_DDR |= (1 << US_TRIGER)|(0 << US_ECHO);
 7e6:	3d 9a       	sbi	0x07, 5	; 7
	US_PIN |= (1<<US_ECHO);
 7e8:	37 9a       	sbi	0x06, 7	; 6
 7ea:	08 95       	ret

000007ec <__itoa_ncheck>:
 7ec:	bb 27       	eor	r27, r27
 7ee:	4a 30       	cpi	r20, 0x0A	; 10
 7f0:	31 f4       	brne	.+12     	; 0x7fe <__itoa_ncheck+0x12>
 7f2:	99 23       	and	r25, r25
 7f4:	22 f4       	brpl	.+8      	; 0x7fe <__itoa_ncheck+0x12>
 7f6:	bd e2       	ldi	r27, 0x2D	; 45
 7f8:	90 95       	com	r25
 7fa:	81 95       	neg	r24
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <__utoa_common>

00000800 <__utoa_ncheck>:
 800:	bb 27       	eor	r27, r27

00000802 <__utoa_common>:
 802:	fb 01       	movw	r30, r22
 804:	55 27       	eor	r21, r21
 806:	aa 27       	eor	r26, r26
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	aa 1f       	adc	r26, r26
 80e:	a4 17       	cp	r26, r20
 810:	10 f0       	brcs	.+4      	; 0x816 <__utoa_common+0x14>
 812:	a4 1b       	sub	r26, r20
 814:	83 95       	inc	r24
 816:	50 51       	subi	r21, 0x10	; 16
 818:	b9 f7       	brne	.-18     	; 0x808 <__utoa_common+0x6>
 81a:	a0 5d       	subi	r26, 0xD0	; 208
 81c:	aa 33       	cpi	r26, 0x3A	; 58
 81e:	08 f0       	brcs	.+2      	; 0x822 <__utoa_common+0x20>
 820:	a9 5d       	subi	r26, 0xD9	; 217
 822:	a1 93       	st	Z+, r26
 824:	00 97       	sbiw	r24, 0x00	; 0
 826:	79 f7       	brne	.-34     	; 0x806 <__utoa_common+0x4>
 828:	b1 11       	cpse	r27, r1
 82a:	b1 93       	st	Z+, r27
 82c:	11 92       	st	Z+, r1
 82e:	cb 01       	movw	r24, r22
 830:	00 c0       	rjmp	.+0      	; 0x832 <strrev>

00000832 <strrev>:
 832:	dc 01       	movw	r26, r24
 834:	fc 01       	movw	r30, r24
 836:	67 2f       	mov	r22, r23
 838:	71 91       	ld	r23, Z+
 83a:	77 23       	and	r23, r23
 83c:	e1 f7       	brne	.-8      	; 0x836 <strrev+0x4>
 83e:	32 97       	sbiw	r30, 0x02	; 2
 840:	04 c0       	rjmp	.+8      	; 0x84a <strrev+0x18>
 842:	7c 91       	ld	r23, X
 844:	6d 93       	st	X+, r22
 846:	70 83       	st	Z, r23
 848:	62 91       	ld	r22, -Z
 84a:	ae 17       	cp	r26, r30
 84c:	bf 07       	cpc	r27, r31
 84e:	c8 f3       	brcs	.-14     	; 0x842 <strrev+0x10>
 850:	08 95       	ret

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
