
Farm_01062019_v4.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800200  000011bc  00001250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000da  0080031c  0080031c  0000136c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ea  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017ce  00000000  00000000  00004e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001876  00000000  00000000  00006654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00007ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a34  00000000  00000000  0000834c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fdb  00000000  00000000  00008d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000ad5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	20 c6       	rjmp	.+3136   	; 0xc86 <__vector_17>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c6       	rjmp	.+3228   	; 0xd02 <__vector_25>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bd 03       	fmulsu	r19, r21
      e6:	c1 03       	fmuls	r20, r17
      e8:	c5 03       	fmuls	r20, r21
      ea:	c9 03       	fmulsu	r20, r17
      ec:	cd 03       	fmulsu	r20, r21
      ee:	d1 03       	fmuls	r21, r17
      f0:	d5 03       	fmuls	r21, r21
      f2:	d9 03       	fmulsu	r21, r17

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
     104:	13 e0       	ldi	r17, 0x03	; 3
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	ec eb       	ldi	r30, 0xBC	; 188
     10c:	f1 e1       	ldi	r31, 0x11	; 17
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	ac 31       	cpi	r26, 0x1C	; 28
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	23 e0       	ldi	r18, 0x03	; 3
     120:	ac e1       	ldi	r26, 0x1C	; 28
     122:	b3 e0       	ldi	r27, 0x03	; 3
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a6 3f       	cpi	r26, 0xF6	; 246
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	82 d4       	rcall	.+2308   	; 0xa34 <main>
     130:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <circularQueue_isEmpty>:
	
	head = head +1;
	
	return ret;
	
}
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <head>
     13c:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <__data_end>
     140:	29 13       	cpse	r18, r25
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	08 95       	ret

00000146 <circularQueue_enqueue>:
     146:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <__data_end>
     14a:	98 3c       	cpi	r25, 0xC8	; 200
     14c:	11 f4       	brne	.+4      	; 0x152 <circularQueue_enqueue+0xc>
     14e:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <__data_end>
     152:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <__data_end>
     156:	e9 2f       	mov	r30, r25
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	e2 5d       	subi	r30, 0xD2	; 210
     15c:	fc 4f       	sbci	r31, 0xFC	; 252
     15e:	80 83       	st	Z, r24
     160:	9f 5f       	subi	r25, 0xFF	; 255
     162:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <__data_end>
     166:	08 95       	ret

00000168 <circularQueue_clearBuffer>:

void circularQueue_clearBuffer()
{
     168:	ee e2       	ldi	r30, 0x2E	; 46
     16a:	f3 e0       	ldi	r31, 0x03	; 3
     16c:	86 ef       	ldi	r24, 0xF6	; 246
     16e:	93 e0       	ldi	r25, 0x03	; 3
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
	{
		gBuffer[i]=0;
     170:	11 92       	st	Z+, r1
}

void circularQueue_clearBuffer()
{
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
     172:	e8 17       	cp	r30, r24
     174:	f9 07       	cpc	r31, r25
     176:	e1 f7       	brne	.-8      	; 0x170 <circularQueue_clearBuffer+0x8>
	{
		gBuffer[i]=0;
	}
	tail = 0;
     178:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <__data_end>
	head = 0;
     17c:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <head>
     180:	08 95       	ret

00000182 <circularQueue_searchSubStringInQueue>:
	
}
uint8_t circularQueue_searchSubStringInQueue(uint8_t* data)
{
	uint8_t ret = FALSE;
	if( strstr(gBuffer,data) == NULL)
     182:	bc 01       	movw	r22, r24
     184:	8e e2       	ldi	r24, 0x2E	; 46
     186:	93 e0       	ldi	r25, 0x03	; 3
     188:	c2 d7       	rcall	.+3972   	; 0x110e <strstr>
	else
	{
		ret = TRUE;
	}
	
	return ret;
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	89 2b       	or	r24, r25
     18e:	09 f4       	brne	.+2      	; 0x192 <circularQueue_searchSubStringInQueue+0x10>
     190:	20 e0       	ldi	r18, 0x00	; 0
}
     192:	82 2f       	mov	r24, r18
     194:	08 95       	ret

00000196 <circularQueue_bufferPointer>:

uint8_t *circularQueue_bufferPointer()
{
	return gBuffer;
     196:	8e e2       	ldi	r24, 0x2E	; 46
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	08 95       	ret

0000019c <dht_getdata_dht_11>:

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <dht_getdata_dht_11+0x14>
     1b0:	1f 92       	push	r1
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     1b8:	fe 01       	movw	r30, r28
     1ba:	31 96       	adiw	r30, 0x01	; 1
     1bc:	25 e0       	ldi	r18, 0x05	; 5
     1be:	df 01       	movw	r26, r30
     1c0:	1d 92       	st	X+, r1
     1c2:	2a 95       	dec	r18
     1c4:	e9 f7       	brne	.-6      	; 0x1c0 <dht_getdata_dht_11+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
     1c6:	21 b1       	in	r18, 0x01	; 1
     1c8:	e1 e0       	ldi	r30, 0x01	; 1
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	04 2e       	mov	r0, r20
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dht_getdata_dht_11+0x38>
     1d0:	ee 0f       	add	r30, r30
     1d2:	ff 1f       	adc	r31, r31
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dht_getdata_dht_11+0x34>
     1d8:	2e 2b       	or	r18, r30
     1da:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //high
     1dc:	22 b1       	in	r18, 0x02	; 2
     1de:	2e 2b       	or	r18, r30
     1e0:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e2:	bf ef       	ldi	r27, 0xFF	; 255
     1e4:	21 ee       	ldi	r18, 0xE1	; 225
     1e6:	34 e0       	ldi	r19, 0x04	; 4
     1e8:	b1 50       	subi	r27, 0x01	; 1
     1ea:	20 40       	sbci	r18, 0x00	; 0
     1ec:	30 40       	sbci	r19, 0x00	; 0
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <dht_getdata_dht_11+0x4c>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <dht_getdata_dht_11+0x56>
     1f2:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
     1f4:	32 b1       	in	r19, 0x02	; 2
     1f6:	2e 2f       	mov	r18, r30
     1f8:	20 95       	com	r18
     1fa:	32 23       	and	r19, r18
     1fc:	32 b9       	out	0x02, r19	; 2
     1fe:	5f ef       	ldi	r21, 0xFF	; 255
     200:	a0 ee       	ldi	r26, 0xE0	; 224
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	51 50       	subi	r21, 0x01	; 1
     206:	a0 40       	sbci	r26, 0x00	; 0
     208:	b0 40       	sbci	r27, 0x00	; 0
     20a:	e1 f7       	brne	.-8      	; 0x204 <dht_getdata_dht_11+0x68>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <dht_getdata_dht_11+0x72>
     20e:	00 00       	nop
	
		_delay_ms(18);
	
	
	
	DHT_PORT |= (1<<channel); //high
     210:	32 b1       	in	r19, 0x02	; 2
     212:	3e 2b       	or	r19, r30
     214:	32 b9       	out	0x02, r19	; 2
	DHT_DDR &= ~(1<<channel); //input
     216:	31 b1       	in	r19, 0x01	; 1
     218:	23 23       	and	r18, r19
     21a:	21 b9       	out	0x01, r18	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	25 ed       	ldi	r18, 0xD5	; 213
     21e:	2a 95       	dec	r18
     220:	f1 f7       	brne	.-4      	; 0x21e <dht_getdata_dht_11+0x82>
     222:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
     224:	20 b1       	in	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	04 2e       	mov	r0, r20
     22a:	02 c0       	rjmp	.+4      	; 0x230 <dht_getdata_dht_11+0x94>
     22c:	35 95       	asr	r19
     22e:	27 95       	ror	r18
     230:	0a 94       	dec	r0
     232:	e2 f7       	brpl	.-8      	; 0x22c <dht_getdata_dht_11+0x90>
     234:	20 fd       	sbrc	r18, 0
     236:	74 c0       	rjmp	.+232    	; 0x320 <dht_getdata_dht_11+0x184>
     238:	af e3       	ldi	r26, 0x3F	; 63
     23a:	b1 e0       	ldi	r27, 0x01	; 1
     23c:	11 97       	sbiw	r26, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <dht_getdata_dht_11+0xa0>
     240:	00 c0       	rjmp	.+0      	; 0x242 <dht_getdata_dht_11+0xa6>
     242:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
     244:	20 b1       	in	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <dht_getdata_dht_11+0xb2>
     24a:	35 95       	asr	r19
     24c:	27 95       	ror	r18
     24e:	4a 95       	dec	r20
     250:	e2 f7       	brpl	.-8      	; 0x24a <dht_getdata_dht_11+0xae>
     252:	20 ff       	sbrs	r18, 0
     254:	67 c0       	rjmp	.+206    	; 0x324 <dht_getdata_dht_11+0x188>
     256:	af e3       	ldi	r26, 0x3F	; 63
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <dht_getdata_dht_11+0xbe>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <dht_getdata_dht_11+0xc4>
     260:	00 00       	nop
     262:	9e 01       	movw	r18, r28
     264:	2f 5f       	subi	r18, 0xFF	; 255
     266:	3f 4f       	sbci	r19, 0xFF	; 255
     268:	79 01       	movw	r14, r18
     26a:	6e 01       	movw	r12, r28
     26c:	36 e0       	ldi	r19, 0x06	; 6
     26e:	c3 0e       	add	r12, r19
     270:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
     272:	01 e0       	ldi	r16, 0x01	; 1
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	31 c0       	rjmp	.+98     	; 0x2da <dht_getdata_dht_11+0x13e>
     278:	41 50       	subi	r20, 0x01	; 1
     27a:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     27c:	19 f4       	brne	.+6      	; 0x284 <dht_getdata_dht_11+0xe8>
     27e:	54 c0       	rjmp	.+168    	; 0x328 <dht_getdata_dht_11+0x18c>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     280:	49 ec       	ldi	r20, 0xC9	; 201
     282:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
     284:	20 b1       	in	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	2e 23       	and	r18, r30
     28a:	3f 23       	and	r19, r31
     28c:	23 2b       	or	r18, r19
     28e:	a1 f3       	breq	.-24     	; 0x278 <dht_getdata_dht_11+0xdc>
     290:	40 ea       	ldi	r20, 0xA0	; 160
     292:	4a 95       	dec	r20
     294:	f1 f7       	brne	.-4      	; 0x292 <dht_getdata_dht_11+0xf6>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
     296:	20 b1       	in	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	2e 23       	and	r18, r30
     29c:	3f 23       	and	r19, r31
     29e:	23 2b       	or	r18, r19
     2a0:	41 f0       	breq	.+16     	; 0x2b2 <dht_getdata_dht_11+0x116>
				result |= (1<<(7-i));
     2a2:	98 01       	movw	r18, r16
     2a4:	0a 2e       	mov	r0, r26
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <dht_getdata_dht_11+0x110>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <dht_getdata_dht_11+0x10c>
     2b0:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     2b2:	49 ec       	ldi	r20, 0xC9	; 201
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <dht_getdata_dht_11+0x122>
     2b8:	41 50       	subi	r20, 0x01	; 1
     2ba:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     2bc:	b9 f1       	breq	.+110    	; 0x32c <dht_getdata_dht_11+0x190>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     2be:	20 b1       	in	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	2e 23       	and	r18, r30
     2c4:	3f 23       	and	r19, r31
     2c6:	23 2b       	or	r18, r19
     2c8:	b9 f7       	brne	.-18     	; 0x2b8 <dht_getdata_dht_11+0x11c>
     2ca:	11 97       	sbiw	r26, 0x01	; 1
     2cc:	c8 f6       	brcc	.-78     	; 0x280 <dht_getdata_dht_11+0xe4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     2ce:	d7 01       	movw	r26, r14
     2d0:	bd 92       	st	X+, r11
     2d2:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     2d4:	ca 16       	cp	r12, r26
     2d6:	db 06       	cpc	r13, r27
     2d8:	21 f0       	breq	.+8      	; 0x2e2 <dht_getdata_dht_11+0x146>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     2da:	a7 e0       	ldi	r26, 0x07	; 7
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	b1 2c       	mov	r11, r1
     2e0:	cf cf       	rjmp	.-98     	; 0x280 <dht_getdata_dht_11+0xe4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
     2e2:	21 b1       	in	r18, 0x01	; 1
     2e4:	2e 2b       	or	r18, r30
     2e6:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //low
     2e8:	22 b1       	in	r18, 0x02	; 2
     2ea:	e2 2b       	or	r30, r18
     2ec:	e2 b9       	out	0x02, r30	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ee:	bf ef       	ldi	r27, 0xFF	; 255
     2f0:	e1 ee       	ldi	r30, 0xE1	; 225
     2f2:	f4 e0       	ldi	r31, 0x04	; 4
     2f4:	b1 50       	subi	r27, 0x01	; 1
     2f6:	e0 40       	sbci	r30, 0x00	; 0
     2f8:	f0 40       	sbci	r31, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <dht_getdata_dht_11+0x158>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <dht_getdata_dht_11+0x162>
     2fe:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     300:	49 81       	ldd	r20, Y+1	; 0x01
     302:	5b 81       	ldd	r21, Y+3	; 0x03
     304:	2a 81       	ldd	r18, Y+2	; 0x02
     306:	24 0f       	add	r18, r20
     308:	25 0f       	add	r18, r21
     30a:	3c 81       	ldd	r19, Y+4	; 0x04
     30c:	23 0f       	add	r18, r19
     30e:	3d 81       	ldd	r19, Y+5	; 0x05
     310:	23 13       	cpse	r18, r19
     312:	0e c0       	rjmp	.+28     	; 0x330 <dht_getdata_dht_11+0x194>
		//return temperature and humidity
		
			*temperature = bits[2];
     314:	dc 01       	movw	r26, r24
     316:	5c 93       	st	X, r21
			*humidity = bits[0];
     318:	fb 01       	movw	r30, r22
     31a:	40 83       	st	Z, r20
		



		
		return 0;
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	09 c0       	rjmp	.+18     	; 0x332 <dht_getdata_dht_11+0x196>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	07 c0       	rjmp	.+14     	; 0x332 <dht_getdata_dht_11+0x196>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
     324:	8f ef       	ldi	r24, 0xFF	; 255
     326:	05 c0       	rjmp	.+10     	; 0x332 <dht_getdata_dht_11+0x196>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	03 c0       	rjmp	.+6      	; 0x332 <dht_getdata_dht_11+0x196>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	01 c0       	rjmp	.+2      	; 0x332 <dht_getdata_dht_11+0x196>

		
		return 0;
	}

	return -1;
     330:	8f ef       	ldi	r24, 0xFF	; 255
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	df 90       	pop	r13
     34a:	cf 90       	pop	r12
     34c:	bf 90       	pop	r11
     34e:	08 95       	ret

00000350 <ESP_close_TCP>:
            UART_string_tx(command);
        }

    circularQueue_clearBuffer();
    _delay_ms(1000);
}
     350:	0b df       	rcall	.-490    	; 0x168 <circularQueue_clearBuffer>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	c0 d4       	rcall	.+2432   	; 0xcd8 <UART_string_tx>
     358:	ee de       	rcall	.-548    	; 0x136 <circularQueue_isEmpty>
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	e9 f3       	breq	.-6      	; 0x358 <ESP_close_TCP+0x8>
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	80 e7       	ldi	r24, 0x70	; 112
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	21 50       	subi	r18, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <ESP_close_TCP+0x14>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <ESP_close_TCP+0x1e>
     36e:	00 00       	nop
     370:	fb ce       	rjmp	.-522    	; 0x168 <circularQueue_clearBuffer>
     372:	08 95       	ret

00000374 <ESP_write_FieldsTHWL>:


void ESP_write_FieldsTHWL(THWdata data,uint8_t* api_key)
{
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	c1 5f       	subi	r28, 0xF1	; 241
     38a:	d1 09       	sbc	r29, r1
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	c4 51       	subi	r28, 0x14	; 20
     398:	df 4f       	sbci	r29, 0xFF	; 255
     39a:	48 83       	st	Y, r20
     39c:	cc 5e       	subi	r28, 0xEC	; 236
     39e:	d0 40       	sbci	r29, 0x00	; 0
     3a0:	c3 51       	subi	r28, 0x13	; 19
     3a2:	df 4f       	sbci	r29, 0xFF	; 255
     3a4:	58 83       	st	Y, r21
     3a6:	cd 5e       	subi	r28, 0xED	; 237
     3a8:	d0 40       	sbci	r29, 0x00	; 0
     3aa:	c2 51       	subi	r28, 0x12	; 18
     3ac:	df 4f       	sbci	r29, 0xFF	; 255
     3ae:	68 83       	st	Y, r22
     3b0:	ce 5e       	subi	r28, 0xEE	; 238
     3b2:	d0 40       	sbci	r29, 0x00	; 0
     3b4:	c1 51       	subi	r28, 0x11	; 17
     3b6:	df 4f       	sbci	r29, 0xFF	; 255
     3b8:	78 83       	st	Y, r23
     3ba:	cf 5e       	subi	r28, 0xEF	; 239
     3bc:	d0 40       	sbci	r29, 0x00	; 0
     3be:	c0 51       	subi	r28, 0x10	; 16
     3c0:	df 4f       	sbci	r29, 0xFF	; 255
     3c2:	88 83       	st	Y, r24
     3c4:	c0 5f       	subi	r28, 0xF0	; 240
     3c6:	d0 40       	sbci	r29, 0x00	; 0
     3c8:	cf 50       	subi	r28, 0x0F	; 15
     3ca:	df 4f       	sbci	r29, 0xFF	; 255
     3cc:	98 83       	st	Y, r25
     3ce:	c1 5f       	subi	r28, 0xF1	; 241
     3d0:	d0 40       	sbci	r29, 0x00	; 0
     3d2:	79 01       	movw	r14, r18

    uint8_t command[200];
    uint8_t command_length[30];
    uint8_t buffer[5];

    ESP_close_TCP();// CLOSE ANY TCP CONNECTION
     3d4:	bd df       	rcall	.-134    	; 0x350 <ESP_close_TCP>

    strcpy(command,"GET https://api.thingspeak.com/update?api_key=");
     3d6:	8f e2       	ldi	r24, 0x2F	; 47
     3d8:	ee e0       	ldi	r30, 0x0E	; 14
     3da:	f2 e0       	ldi	r31, 0x02	; 2
     3dc:	8e 01       	movw	r16, r28
     3de:	0f 5f       	subi	r16, 0xFF	; 255
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	d8 01       	movw	r26, r16
     3e4:	01 90       	ld	r0, Z+
     3e6:	0d 92       	st	X+, r0
     3e8:	8a 95       	dec	r24
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <ESP_write_FieldsTHWL+0x70>
    strcat(command,api_key);
     3ec:	b7 01       	movw	r22, r14
     3ee:	c8 01       	movw	r24, r16
     3f0:	83 d6       	rcall	.+3334   	; 0x10f8 <strcat>
    strcat(command,"&");
     3f2:	f8 01       	movw	r30, r16
     3f4:	01 90       	ld	r0, Z+
     3f6:	00 20       	and	r0, r0
     3f8:	e9 f7       	brne	.-6      	; 0x3f4 <ESP_write_FieldsTHWL+0x80>
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	0f 2e       	mov	r0, r31
     3fe:	f6 e2       	ldi	r31, 0x26	; 38
     400:	cf 2e       	mov	r12, r31
     402:	d1 2c       	mov	r13, r1
     404:	f0 2d       	mov	r31, r0
     406:	d1 82       	std	Z+1, r13	; 0x01
     408:	c0 82       	st	Z, r12
    strcat(command,"field1");
     40a:	d8 01       	movw	r26, r16
     40c:	0d 90       	ld	r0, X+
     40e:	00 20       	and	r0, r0
     410:	e9 f7       	brne	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     412:	11 97       	sbiw	r26, 0x01	; 1
     414:	87 e0       	ldi	r24, 0x07	; 7
     416:	e2 e8       	ldi	r30, 0x82	; 130
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	01 90       	ld	r0, Z+
     41c:	0d 92       	st	X+, r0
     41e:	8a 95       	dec	r24
     420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
    strcat(command,"=");
     422:	f8 01       	movw	r30, r16
     424:	01 90       	ld	r0, Z+
     426:	00 20       	and	r0, r0
     428:	e9 f7       	brne	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     42a:	31 97       	sbiw	r30, 0x01	; 1
     42c:	0f 2e       	mov	r0, r31
     42e:	fd e3       	ldi	r31, 0x3D	; 61
     430:	ef 2e       	mov	r14, r31
     432:	f1 2c       	mov	r15, r1
     434:	f0 2d       	mov	r31, r0
     436:	f1 82       	std	Z+1, r15	; 0x01
     438:	e0 82       	st	Z, r14
    strcat(command,data.Temp);
     43a:	c4 51       	subi	r28, 0x14	; 20
     43c:	df 4f       	sbci	r29, 0xFF	; 255
     43e:	68 81       	ld	r22, Y
     440:	79 81       	ldd	r23, Y+1	; 0x01
     442:	cc 5e       	subi	r28, 0xEC	; 236
     444:	d0 40       	sbci	r29, 0x00	; 0
     446:	c8 01       	movw	r24, r16
     448:	57 d6       	rcall	.+3246   	; 0x10f8 <strcat>

    strcat(command,"&");
     44a:	f8 01       	movw	r30, r16
     44c:	01 90       	ld	r0, Z+
     44e:	00 20       	and	r0, r0
     450:	e9 f7       	brne	.-6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	d1 82       	std	Z+1, r13	; 0x01
     456:	c0 82       	st	Z, r12
    strcat(command,"field2");
     458:	d8 01       	movw	r26, r16
     45a:	0d 90       	ld	r0, X+
     45c:	00 20       	and	r0, r0
     45e:	e9 f7       	brne	.-6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     460:	11 97       	sbiw	r26, 0x01	; 1
     462:	87 e0       	ldi	r24, 0x07	; 7
     464:	e9 e8       	ldi	r30, 0x89	; 137
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	01 90       	ld	r0, Z+
     46a:	0d 92       	st	X+, r0
     46c:	8a 95       	dec	r24
     46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
    strcat(command,"=");
     470:	f8 01       	movw	r30, r16
     472:	01 90       	ld	r0, Z+
     474:	00 20       	and	r0, r0
     476:	e9 f7       	brne	.-6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     478:	31 97       	sbiw	r30, 0x01	; 1
     47a:	f1 82       	std	Z+1, r15	; 0x01
     47c:	e0 82       	st	Z, r14
    strcat(command,data.Hum);
     47e:	c2 51       	subi	r28, 0x12	; 18
     480:	df 4f       	sbci	r29, 0xFF	; 255
     482:	68 81       	ld	r22, Y
     484:	79 81       	ldd	r23, Y+1	; 0x01
     486:	ce 5e       	subi	r28, 0xEE	; 238
     488:	d0 40       	sbci	r29, 0x00	; 0
     48a:	c8 01       	movw	r24, r16
     48c:	35 d6       	rcall	.+3178   	; 0x10f8 <strcat>

    strcat(command,"&");
     48e:	f8 01       	movw	r30, r16
     490:	01 90       	ld	r0, Z+
     492:	00 20       	and	r0, r0
     494:	e9 f7       	brne	.-6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     496:	31 97       	sbiw	r30, 0x01	; 1
     498:	d1 82       	std	Z+1, r13	; 0x01
     49a:	c0 82       	st	Z, r12
    strcat(command,"field3");
     49c:	d8 01       	movw	r26, r16
     49e:	0d 90       	ld	r0, X+
     4a0:	00 20       	and	r0, r0
     4a2:	e9 f7       	brne	.-6      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4a4:	11 97       	sbiw	r26, 0x01	; 1
     4a6:	87 e0       	ldi	r24, 0x07	; 7
     4a8:	e0 e9       	ldi	r30, 0x90	; 144
     4aa:	f2 e0       	ldi	r31, 0x02	; 2
     4ac:	01 90       	ld	r0, Z+
     4ae:	0d 92       	st	X+, r0
     4b0:	8a 95       	dec	r24
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
    strcat(command,"=");
     4b4:	f8 01       	movw	r30, r16
     4b6:	01 90       	ld	r0, Z+
     4b8:	00 20       	and	r0, r0
     4ba:	e9 f7       	brne	.-6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4bc:	31 97       	sbiw	r30, 0x01	; 1
     4be:	f1 82       	std	Z+1, r15	; 0x01
     4c0:	e0 82       	st	Z, r14
    strcat(command,data.WL);
     4c2:	c0 51       	subi	r28, 0x10	; 16
     4c4:	df 4f       	sbci	r29, 0xFF	; 255
     4c6:	68 81       	ld	r22, Y
     4c8:	79 81       	ldd	r23, Y+1	; 0x01
     4ca:	c0 5f       	subi	r28, 0xF0	; 240
     4cc:	d0 40       	sbci	r29, 0x00	; 0
     4ce:	c8 01       	movw	r24, r16
     4d0:	13 d6       	rcall	.+3110   	; 0x10f8 <strcat>

    strcat(command,"\r\n");
     4d2:	f8 01       	movw	r30, r16
     4d4:	01 90       	ld	r0, Z+
     4d6:	00 20       	and	r0, r0
     4d8:	e9 f7       	brne	.-6      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	0f 2e       	mov	r0, r31
     4de:	fd e0       	ldi	r31, 0x0D	; 13
     4e0:	ef 2e       	mov	r14, r31
     4e2:	fa e0       	ldi	r31, 0x0A	; 10
     4e4:	ff 2e       	mov	r15, r31
     4e6:	f0 2d       	mov	r31, r0
     4e8:	f1 82       	std	Z+1, r15	; 0x01
     4ea:	e0 82       	st	Z, r14
     4ec:	12 82       	std	Z+2, r1	; 0x02
    itoa(strlen(command),buffer,10);
     4ee:	f8 01       	movw	r30, r16
     4f0:	01 90       	ld	r0, Z+
     4f2:	00 20       	and	r0, r0
     4f4:	e9 f7       	brne	.-6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f6:	cf 01       	movw	r24, r30
     4f8:	01 97       	sbiw	r24, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4fa:	4a e0       	ldi	r20, 0x0A	; 10
     4fc:	be 01       	movw	r22, r28
     4fe:	69 51       	subi	r22, 0x19	; 25
     500:	7f 4f       	sbci	r23, 0xFF	; 255
     502:	80 1b       	sub	r24, r16
     504:	91 0b       	sbc	r25, r17
     506:	1d d6       	rcall	.+3130   	; 0x1142 <__itoa_ncheck>
    strcpy(command_length,MESSAGE_LENGTH);
     508:	08 53       	subi	r16, 0x38	; 56
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	8c e0       	ldi	r24, 0x0C	; 12
     50e:	ed e3       	ldi	r30, 0x3D	; 61
     510:	f2 e0       	ldi	r31, 0x02	; 2
     512:	d8 01       	movw	r26, r16
     514:	01 90       	ld	r0, Z+
     516:	0d 92       	st	X+, r0
     518:	8a 95       	dec	r24
    strcat(command_length,buffer);
     51a:	e1 f7       	brne	.-8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     51c:	be 01       	movw	r22, r28
     51e:	69 51       	subi	r22, 0x19	; 25
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	c8 01       	movw	r24, r16
     524:	e9 d5       	rcall	.+3026   	; 0x10f8 <strcat>
    strcat(command_length,"\r\n");
     526:	f8 01       	movw	r30, r16
     528:	01 90       	ld	r0, Z+
     52a:	00 20       	and	r0, r0
     52c:	e9 f7       	brne	.-6      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     52e:	31 97       	sbiw	r30, 0x01	; 1

    circularQueue_clearBuffer();
     530:	f1 82       	std	Z+1, r15	; 0x01
     532:	e0 82       	st	Z, r14
    UART_string_tx(TCP_THINGSPEAK);
     534:	12 82       	std	Z+2, r1	; 0x02
     536:	18 de       	rcall	.-976    	; 0x168 <circularQueue_clearBuffer>
     538:	89 e4       	ldi	r24, 0x49	; 73
    while(circularQueue_isEmpty() == TRUE);
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	cd d3       	rcall	.+1946   	; 0xcd8 <UART_string_tx>
     53e:	fb dd       	rcall	.-1034   	; 0x136 <circularQueue_isEmpty>
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE  && circularQueue_searchSubStringInQueue("OK") == FALSE);
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	e9 f3       	breq	.-6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     544:	82 e7       	ldi	r24, 0x72	; 114
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	1c de       	rcall	.-968    	; 0x182 <circularQueue_searchSubStringInQueue>
     54a:	81 11       	cpse	r24, r1
     54c:	05 c0       	rjmp	.+10     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     54e:	88 e7       	ldi	r24, 0x78	; 120
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	17 de       	rcall	.-978    	; 0x182 <circularQueue_searchSubStringInQueue>
     554:	88 23       	and	r24, r24
    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     556:	b1 f3       	breq	.-20     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     558:	82 e7       	ldi	r24, 0x72	; 114
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	12 de       	rcall	.-988    	; 0x182 <circularQueue_searchSubStringInQueue>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	59 f4       	brne	.+22     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
        {
            circularQueue_clearBuffer();
     562:	02 de       	rcall	.-1020   	; 0x168 <circularQueue_clearBuffer>
     564:	ff ef       	ldi	r31, 0xFF	; 255
     566:	23 ed       	ldi	r18, 0xD3	; 211
     568:	80 e3       	ldi	r24, 0x30	; 48
     56a:	f1 50       	subi	r31, 0x01	; 1
     56c:	20 40       	sbci	r18, 0x00	; 0
     56e:	80 40       	sbci	r24, 0x00	; 0
     570:	e1 f7       	brne	.-8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     572:	00 c0       	rjmp	.+0      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     574:	00 00       	nop
     576:	5a c0       	rjmp	.+180    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     578:	9f ef       	ldi	r25, 0xFF	; 255
     57a:	e9 ef       	ldi	r30, 0xF9	; 249
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	91 50       	subi	r25, 0x01	; 1
     580:	e0 40       	sbci	r30, 0x00	; 0
     582:	f0 40       	sbci	r31, 0x00	; 0
            return;

        }

    _delay_ms(20);
    circularQueue_clearBuffer();
     584:	e1 f7       	brne	.-8      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
    UART_string_tx(command_length);
     586:	00 c0       	rjmp	.+0      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     588:	00 00       	nop
     58a:	ee dd       	rcall	.-1060   	; 0x168 <circularQueue_clearBuffer>
     58c:	ce 01       	movw	r24, r28
    while(circularQueue_isEmpty() == TRUE);
     58e:	87 53       	subi	r24, 0x37	; 55
     590:	9f 4f       	sbci	r25, 0xFF	; 255
     592:	a2 d3       	rcall	.+1860   	; 0xcd8 <UART_string_tx>
     594:	d0 dd       	rcall	.-1120   	; 0x136 <circularQueue_isEmpty>
    while(circularQueue_searchSubStringInQueue("ERROR") == FALSE && circularQueue_searchSubStringInQueue("OK") == FALSE && circularQueue_searchSubStringInQueue("FAIL") == FALSE);
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	e9 f3       	breq	.-6      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     59a:	82 e7       	ldi	r24, 0x72	; 114
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	f1 dd       	rcall	.-1054   	; 0x182 <circularQueue_searchSubStringInQueue>
     5a0:	81 11       	cpse	r24, r1
     5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5a4:	88 e7       	ldi	r24, 0x78	; 120
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	ec dd       	rcall	.-1064   	; 0x182 <circularQueue_searchSubStringInQueue>
     5aa:	81 11       	cpse	r24, r1
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5ae:	8b e7       	ldi	r24, 0x7B	; 123
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	e7 dd       	rcall	.-1074   	; 0x182 <circularQueue_searchSubStringInQueue>
     5b4:	88 23       	and	r24, r24

    if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     5b6:	89 f3       	breq	.-30     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     5b8:	82 e7       	ldi	r24, 0x72	; 114
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	e2 dd       	rcall	.-1084   	; 0x182 <circularQueue_searchSubStringInQueue>
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	59 f4       	brne	.+22     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
        {
            circularQueue_clearBuffer();
     5c2:	d2 dd       	rcall	.-1116   	; 0x168 <circularQueue_clearBuffer>
     5c4:	2f ef       	ldi	r18, 0xFF	; 255
     5c6:	83 ed       	ldi	r24, 0xD3	; 211
     5c8:	90 e3       	ldi	r25, 0x30	; 48
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	80 40       	sbci	r24, 0x00	; 0
     5ce:	90 40       	sbci	r25, 0x00	; 0
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5d4:	00 00       	nop
     5d6:	2a c0       	rjmp	.+84     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     5d8:	ef ef       	ldi	r30, 0xFF	; 255
     5da:	f9 ef       	ldi	r31, 0xF9	; 249
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	e1 50       	subi	r30, 0x01	; 1
     5e0:	f0 40       	sbci	r31, 0x00	; 0
     5e2:	20 40       	sbci	r18, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
            return;

        }

    _delay_ms(20);
    if (circularQueue_searchSubStringInQueue("OK") == TRUE)
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5e8:	00 00       	nop
     5ea:	88 e7       	ldi	r24, 0x78	; 120
     5ec:	92 e0       	ldi	r25, 0x02	; 2
        {
            while(circularQueue_searchSubStringInQueue(">") == FALSE);
     5ee:	c9 dd       	rcall	.-1134   	; 0x182 <circularQueue_searchSubStringInQueue>
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	91 f4       	brne	.+36     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     5f4:	80 e8       	ldi	r24, 0x80	; 128
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	c4 dd       	rcall	.-1144   	; 0x182 <circularQueue_searchSubStringInQueue>
            circularQueue_clearBuffer();
     5fa:	88 23       	and	r24, r24
     5fc:	d9 f3       	breq	.-10     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5fe:	b4 dd       	rcall	.-1176   	; 0x168 <circularQueue_clearBuffer>
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	90 e7       	ldi	r25, 0x70	; 112
     604:	e2 e0       	ldi	r30, 0x02	; 2
     606:	81 50       	subi	r24, 0x01	; 1
     608:	90 40       	sbci	r25, 0x00	; 0
     60a:	e0 40       	sbci	r30, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
            _delay_ms(50);
            UART_string_tx(command);
     610:	00 00       	nop
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	60 d3       	rcall	.+1728   	; 0xcd8 <UART_string_tx>
        }

    circularQueue_clearBuffer();
     618:	a7 dd       	rcall	.-1202   	; 0x168 <circularQueue_clearBuffer>
     61a:	ff ef       	ldi	r31, 0xFF	; 255
     61c:	23 ed       	ldi	r18, 0xD3	; 211
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	f1 50       	subi	r31, 0x01	; 1
     622:	20 40       	sbci	r18, 0x00	; 0
     624:	80 40       	sbci	r24, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     628:	00 c0       	rjmp	.+0      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     62a:	00 00       	nop
     62c:	cf 50       	subi	r28, 0x0F	; 15
    _delay_ms(1000);
}
     62e:	df 4f       	sbci	r29, 0xFF	; 255
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	08 95       	ret

0000064c <readFieldValue>:
     64c:	cf 93       	push	r28


}

uint8_t readFieldValue(uint8_t* data)
{
     64e:	df 93       	push	r29
     650:	00 d0       	rcall	.+0      	; 0x652 <readFieldValue+0x6>
     652:	1f 92       	push	r1
     654:	1f 92       	push	r1
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	dc 01       	movw	r26, r24
	int i = 0;
	uint8_t count=0;
	uint8_t buffer[5]={'1','5','\0'};
     65c:	9e 01       	movw	r18, r28
     65e:	2f 5f       	subi	r18, 0xFF	; 255
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	f9 01       	movw	r30, r18
     666:	11 92       	st	Z+, r1
     668:	8a 95       	dec	r24
     66a:	e9 f7       	brne	.-6      	; 0x666 <readFieldValue+0x1a>
     66c:	81 e3       	ldi	r24, 0x31	; 49
     66e:	89 83       	std	Y+1, r24	; 0x01
     670:	85 e3       	ldi	r24, 0x35	; 53
     672:	8a 83       	std	Y+2, r24	; 0x02
     674:	ad 01       	movw	r20, r26
     676:	49 5f       	subi	r20, 0xF9	; 249
     678:	5f 4f       	sbci	r21, 0xFF	; 255
}

uint8_t readFieldValue(uint8_t* data)
{
	int i = 0;
	uint8_t count=0;
     67a:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t buffer[5]={'1','5','\0'};
	uint8_t ret;
	for(i=7;i<strlen(data);i++)
     67c:	27 e0       	ldi	r18, 0x07	; 7
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	1b c0       	rjmp	.+54     	; 0x6b8 <readFieldValue+0x6c>
	{
		if(data[i]>='0' && data[i]<='9')
     682:	fa 01       	movw	r30, r20
     684:	91 91       	ld	r25, Z+
     686:	af 01       	movw	r20, r30
     688:	60 ed       	ldi	r22, 0xD0	; 208
     68a:	69 0f       	add	r22, r25
     68c:	6a 30       	cpi	r22, 0x0A	; 10
     68e:	80 f4       	brcc	.+32     	; 0x6b0 <readFieldValue+0x64>
		{
			
			buffer[count] = data[i];
     690:	e1 e0       	ldi	r30, 0x01	; 1
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	ec 0f       	add	r30, r28
     696:	fd 1f       	adc	r31, r29
     698:	e8 0f       	add	r30, r24
     69a:	f1 1d       	adc	r31, r1
     69c:	90 83       	st	Z, r25
			count++;
     69e:	8f 5f       	subi	r24, 0xFF	; 255
			buffer[count]='\0';
     6a0:	e1 e0       	ldi	r30, 0x01	; 1
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	ec 0f       	add	r30, r28
     6a6:	fd 1f       	adc	r31, r29
     6a8:	e8 0f       	add	r30, r24
     6aa:	f1 1d       	adc	r31, r1
     6ac:	10 82       	st	Z, r1
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <readFieldValue+0x68>
		}

		else if (data[i]==',')
     6b0:	9c 32       	cpi	r25, 0x2C	; 44
     6b2:	61 f0       	breq	.+24     	; 0x6cc <readFieldValue+0x80>
{
	int i = 0;
	uint8_t count=0;
	uint8_t buffer[5]={'1','5','\0'};
	uint8_t ret;
	for(i=7;i<strlen(data);i++)
     6b4:	2f 5f       	subi	r18, 0xFF	; 255
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	fd 01       	movw	r30, r26
     6ba:	01 90       	ld	r0, Z+
     6bc:	00 20       	and	r0, r0
     6be:	e9 f7       	brne	.-6      	; 0x6ba <readFieldValue+0x6e>
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	ea 1b       	sub	r30, r26
     6c4:	fb 0b       	sbc	r31, r27
     6c6:	2e 17       	cp	r18, r30
     6c8:	3f 07       	cpc	r19, r31
     6ca:	d8 f2       	brcs	.-74     	; 0x682 <readFieldValue+0x36>
		{
			break;
		}
	}

	ret = atoi(buffer);
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	f6 d4       	rcall	.+2540   	; 0x10be <atoi>

	return ret;

     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <jasonParser>:
	circularQueue_clearBuffer();
	_delay_ms(1000);
}

uint8_t jasonParser(uint8_t* data, uint8_t numberOfFields, Json * Jdata)
{
     6e2:	bf 92       	push	r11
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	2a 97       	sbiw	r28, 0x0a	; 10
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	7c 01       	movw	r14, r24
     706:	b6 2e       	mov	r11, r22
     708:	6a 01       	movw	r12, r20
	uint8_t ret=0;
	uint8_t i=0;
	uint8_t Field[10];
	uint8_t *splitedata;
	uint8_t splitRet;
	strcpy(Field,"field0");
     70a:	87 e0       	ldi	r24, 0x07	; 7
     70c:	e7 e9       	ldi	r30, 0x97	; 151
     70e:	f2 e0       	ldi	r31, 0x02	; 2
     710:	de 01       	movw	r26, r28
     712:	11 96       	adiw	r26, 0x01	; 1
     714:	01 90       	ld	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	8a 95       	dec	r24
     71a:	e1 f7       	brne	.-8      	; 0x714 <jasonParser+0x32>
	Field[5]='0'+i;
     71c:	80 e3       	ldi	r24, 0x30	; 48
     71e:	8e 83       	std	Y+6, r24	; 0x06

	if(strstr(data,"IPD") == 0)
     720:	6e e9       	ldi	r22, 0x9E	; 158
     722:	72 e0       	ldi	r23, 0x02	; 2
     724:	c7 01       	movw	r24, r14
     726:	f3 d4       	rcall	.+2534   	; 0x110e <strstr>
     728:	89 2b       	or	r24, r25
     72a:	09 f4       	brne	.+2      	; 0x72e <jasonParser+0x4c>
     72c:	4a c0       	rjmp	.+148    	; 0x7c2 <jasonParser+0xe0>

	}

	else
	{
		for(i=1;i<= numberOfFields; i++)
     72e:	bb 20       	and	r11, r11
     730:	09 f4       	brne	.+2      	; 0x734 <jasonParser+0x52>
     732:	49 c0       	rjmp	.+146    	; 0x7c6 <jasonParser+0xe4>
     734:	11 e0       	ldi	r17, 0x01	; 1
     736:	00 e0       	ldi	r16, 0x00	; 0
		{
			strcpy(Field,"field");
     738:	86 e0       	ldi	r24, 0x06	; 6
     73a:	e2 ea       	ldi	r30, 0xA2	; 162
     73c:	f2 e0       	ldi	r31, 0x02	; 2
     73e:	de 01       	movw	r26, r28
     740:	11 96       	adiw	r26, 0x01	; 1
     742:	01 90       	ld	r0, Z+
     744:	0d 92       	st	X+, r0
     746:	8a 95       	dec	r24
     748:	e1 f7       	brne	.-8      	; 0x742 <jasonParser+0x60>
			Field[5]='0'+i;
     74a:	80 e3       	ldi	r24, 0x30	; 48
     74c:	81 0f       	add	r24, r17
     74e:	8e 83       	std	Y+6, r24	; 0x06
			splitedata = strstr(data,Field);
     750:	be 01       	movw	r22, r28
     752:	6f 5f       	subi	r22, 0xFF	; 255
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	c7 01       	movw	r24, r14
     758:	da d4       	rcall	.+2484   	; 0x110e <strstr>

			if(splitedata!=0 )
     75a:	00 97       	sbiw	r24, 0x00	; 0
			{
				splitRet = readFieldValue(splitedata);
     75c:	69 f1       	breq	.+90     	; 0x7b8 <jasonParser+0xd6>
     75e:	76 df       	rcall	.-276    	; 0x64c <readFieldValue>
     760:	28 2f       	mov	r18, r24
				
				switch(i)
     762:	81 2f       	mov	r24, r17
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	e8 30       	cpi	r30, 0x08	; 8
     76c:	f1 05       	cpc	r31, r1
     76e:	20 f5       	brcc	.+72     	; 0x7b8 <jasonParser+0xd6>
     770:	88 27       	eor	r24, r24
     772:	ee 58       	subi	r30, 0x8E	; 142
     774:	ff 4f       	sbci	r31, 0xFF	; 255
     776:	8f 4f       	sbci	r24, 0xFF	; 255
     778:	9a c4       	rjmp	.+2356   	; 0x10ae <__tablejump2__>
				{
					case 1:Jdata->field1=splitRet;ret++;break;
     77a:	f6 01       	movw	r30, r12
     77c:	21 83       	std	Z+1, r18	; 0x01
     77e:	0f 5f       	subi	r16, 0xFF	; 255
     780:	1b c0       	rjmp	.+54     	; 0x7b8 <jasonParser+0xd6>
					case 2:Jdata->field2=splitRet;ret++;break;
     782:	f6 01       	movw	r30, r12
     784:	22 83       	std	Z+2, r18	; 0x02
     786:	0f 5f       	subi	r16, 0xFF	; 255
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <jasonParser+0xd6>
					case 3:Jdata->field3=splitRet;ret++;break;
     78a:	f6 01       	movw	r30, r12
     78c:	23 83       	std	Z+3, r18	; 0x03
     78e:	0f 5f       	subi	r16, 0xFF	; 255
     790:	13 c0       	rjmp	.+38     	; 0x7b8 <jasonParser+0xd6>
					case 4:Jdata->field4=splitRet;ret++;break;
     792:	f6 01       	movw	r30, r12
     794:	24 83       	std	Z+4, r18	; 0x04
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	0f c0       	rjmp	.+30     	; 0x7b8 <jasonParser+0xd6>
					case 5:Jdata->field5=splitRet;ret++;break;
     79a:	f6 01       	movw	r30, r12
     79c:	25 83       	std	Z+5, r18	; 0x05
     79e:	0f 5f       	subi	r16, 0xFF	; 255
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <jasonParser+0xd6>
					case 6:Jdata->field6=splitRet;ret++;break;
     7a2:	f6 01       	movw	r30, r12
     7a4:	26 83       	std	Z+6, r18	; 0x06
     7a6:	0f 5f       	subi	r16, 0xFF	; 255
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <jasonParser+0xd6>
					case 7:Jdata->field7=splitRet;ret++;break;
     7aa:	f6 01       	movw	r30, r12
     7ac:	27 83       	std	Z+7, r18	; 0x07
     7ae:	0f 5f       	subi	r16, 0xFF	; 255
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <jasonParser+0xd6>
					case 8:Jdata->field8=splitRet;ret++;break;
     7b2:	f6 01       	movw	r30, r12
     7b4:	20 87       	std	Z+8, r18	; 0x08
     7b6:	0f 5f       	subi	r16, 0xFF	; 255

	}

	else
	{
		for(i=1;i<= numberOfFields; i++)
     7b8:	1f 5f       	subi	r17, 0xFF	; 255
     7ba:	b1 16       	cp	r11, r17
     7bc:	08 f0       	brcs	.+2      	; 0x7c0 <jasonParser+0xde>
     7be:	bc cf       	rjmp	.-136    	; 0x738 <jasonParser+0x56>
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <jasonParser+0xe6>
	Field[5]='0'+i;

	if(strstr(data,"IPD") == 0)
	{

		ret = 0;
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <jasonParser+0xe6>

	}

	else
	{
		for(i=1;i<= numberOfFields; i++)
     7c6:	00 e0       	ldi	r16, 0x00	; 0


	return ret;


}
     7c8:	80 2f       	mov	r24, r16
     7ca:	2a 96       	adiw	r28, 0x0a	; 10
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	08 95       	ret

000007ea <ESP_Read>:
}


//https://api.thingspeak.com/channels/872668/feeds/last.json?api_key=HFCKEVJ6RK7YOMS3
void ESP_Read(Json* Jdata, uint8_t* channelID,uint8_t* api_key,uint8_t numberOfFields)
{
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	bf 92       	push	r11
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	cb 5e       	subi	r28, 0xEB	; 235
     806:	d1 09       	sbc	r29, r1
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	6c 01       	movw	r12, r24
     814:	4b 01       	movw	r8, r22
     816:	7a 01       	movw	r14, r20
     818:	b2 2e       	mov	r11, r18
	uint8_t command[200];
	uint8_t command_length[30];
	uint8_t buffer[5];
	uint8_t *data;

	ESP_close_TCP();// CLOSE ANY TCP CONNECTION
     81a:	9a dd       	rcall	.-1228   	; 0x350 <ESP_close_TCP>

	strcpy(command,"GET https://api.thingspeak.com/channels/");
     81c:	89 e2       	ldi	r24, 0x29	; 41
     81e:	e8 ea       	ldi	r30, 0xA8	; 168
     820:	f2 e0       	ldi	r31, 0x02	; 2
     822:	8e 01       	movw	r16, r28
     824:	0f 5f       	subi	r16, 0xFF	; 255
     826:	1f 4f       	sbci	r17, 0xFF	; 255
     828:	d8 01       	movw	r26, r16
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <ESP_Read+0x40>
	strcat(command,channelID);
     832:	b4 01       	movw	r22, r8
     834:	c8 01       	movw	r24, r16
     836:	60 d4       	rcall	.+2240   	; 0x10f8 <strcat>
	strcat(command,"/feeds/last.json?api_key=");
     838:	d8 01       	movw	r26, r16
     83a:	0d 90       	ld	r0, X+
     83c:	00 20       	and	r0, r0
     83e:	e9 f7       	brne	.-6      	; 0x83a <ESP_Read+0x50>
     840:	11 97       	sbiw	r26, 0x01	; 1
     842:	8a e1       	ldi	r24, 0x1A	; 26
     844:	e1 ed       	ldi	r30, 0xD1	; 209
     846:	f2 e0       	ldi	r31, 0x02	; 2
     848:	01 90       	ld	r0, Z+
     84a:	0d 92       	st	X+, r0
     84c:	8a 95       	dec	r24
     84e:	e1 f7       	brne	.-8      	; 0x848 <ESP_Read+0x5e>
	strcat(command,api_key);
     850:	b7 01       	movw	r22, r14
     852:	c8 01       	movw	r24, r16
     854:	51 d4       	rcall	.+2210   	; 0x10f8 <strcat>
	strcat(command,"\r\n");
     856:	f8 01       	movw	r30, r16
     858:	01 90       	ld	r0, Z+
     85a:	00 20       	and	r0, r0
     85c:	e9 f7       	brne	.-6      	; 0x858 <ESP_Read+0x6e>
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	0f 2e       	mov	r0, r31
     862:	fd e0       	ldi	r31, 0x0D	; 13
     864:	ef 2e       	mov	r14, r31
     866:	fa e0       	ldi	r31, 0x0A	; 10
     868:	ff 2e       	mov	r15, r31
     86a:	f0 2d       	mov	r31, r0
     86c:	f1 82       	std	Z+1, r15	; 0x01
     86e:	e0 82       	st	Z, r14
     870:	12 82       	std	Z+2, r1	; 0x02
	itoa(strlen(command),buffer,10);
     872:	f8 01       	movw	r30, r16
     874:	01 90       	ld	r0, Z+
     876:	00 20       	and	r0, r0
     878:	e9 f7       	brne	.-6      	; 0x874 <ESP_Read+0x8a>
     87a:	cf 01       	movw	r24, r30
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	4a e0       	ldi	r20, 0x0A	; 10
     880:	be 01       	movw	r22, r28
     882:	69 51       	subi	r22, 0x19	; 25
     884:	7f 4f       	sbci	r23, 0xFF	; 255
     886:	80 1b       	sub	r24, r16
     888:	91 0b       	sbc	r25, r17
     88a:	5b d4       	rcall	.+2230   	; 0x1142 <__itoa_ncheck>
	strcpy(command_length,MESSAGE_LENGTH);
     88c:	08 53       	subi	r16, 0x38	; 56
     88e:	1f 4f       	sbci	r17, 0xFF	; 255
     890:	8c e0       	ldi	r24, 0x0C	; 12
     892:	ed e3       	ldi	r30, 0x3D	; 61
     894:	f2 e0       	ldi	r31, 0x02	; 2
     896:	d8 01       	movw	r26, r16
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	8a 95       	dec	r24
     89e:	e1 f7       	brne	.-8      	; 0x898 <ESP_Read+0xae>
	strcat(command_length,buffer);
     8a0:	be 01       	movw	r22, r28
     8a2:	69 51       	subi	r22, 0x19	; 25
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	c8 01       	movw	r24, r16
     8a8:	27 d4       	rcall	.+2126   	; 0x10f8 <strcat>
	strcat(command_length,"\r\n");
     8aa:	f8 01       	movw	r30, r16
     8ac:	01 90       	ld	r0, Z+
     8ae:	00 20       	and	r0, r0
     8b0:	e9 f7       	brne	.-6      	; 0x8ac <ESP_Read+0xc2>
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	f1 82       	std	Z+1, r15	; 0x01

	circularQueue_clearBuffer();
     8b6:	e0 82       	st	Z, r14
     8b8:	12 82       	std	Z+2, r1	; 0x02
	UART_string_tx(TCP_THINGSPEAK);
     8ba:	56 dc       	rcall	.-1876   	; 0x168 <circularQueue_clearBuffer>
     8bc:	89 e4       	ldi	r24, 0x49	; 73
     8be:	92 e0       	ldi	r25, 0x02	; 2
	while(circularQueue_isEmpty() == TRUE);
     8c0:	0b d2       	rcall	.+1046   	; 0xcd8 <UART_string_tx>
     8c2:	39 dc       	rcall	.-1934   	; 0x136 <circularQueue_isEmpty>
     8c4:	81 30       	cpi	r24, 0x01	; 1
	while(circularQueue_searchSubStringInQueue("ERROR") == FALSE  && circularQueue_searchSubStringInQueue("OK") == FALSE);
     8c6:	e9 f3       	breq	.-6      	; 0x8c2 <ESP_Read+0xd8>
     8c8:	82 e7       	ldi	r24, 0x72	; 114
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	5a dc       	rcall	.-1868   	; 0x182 <circularQueue_searchSubStringInQueue>
     8ce:	81 11       	cpse	r24, r1
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <ESP_Read+0xf2>
     8d2:	88 e7       	ldi	r24, 0x78	; 120
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	55 dc       	rcall	.-1878   	; 0x182 <circularQueue_searchSubStringInQueue>
     8d8:	88 23       	and	r24, r24
	if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
     8da:	b1 f3       	breq	.-20     	; 0x8c8 <ESP_Read+0xde>
     8dc:	82 e7       	ldi	r24, 0x72	; 114
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	50 dc       	rcall	.-1888   	; 0x182 <circularQueue_searchSubStringInQueue>
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	59 f4       	brne	.+22     	; 0x8fc <ESP_Read+0x112>
	{
		circularQueue_clearBuffer();
     8e6:	40 dc       	rcall	.-1920   	; 0x168 <circularQueue_clearBuffer>
     8e8:	ff ef       	ldi	r31, 0xFF	; 255
     8ea:	23 ed       	ldi	r18, 0xD3	; 211
     8ec:	80 e3       	ldi	r24, 0x30	; 48
     8ee:	f1 50       	subi	r31, 0x01	; 1
     8f0:	20 40       	sbci	r18, 0x00	; 0
     8f2:	80 40       	sbci	r24, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <ESP_Read+0x104>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <ESP_Read+0x10e>
     8f8:	00 00       	nop
     8fa:	6f c0       	rjmp	.+222    	; 0x9da <ESP_Read+0x1f0>
     8fc:	9f ef       	ldi	r25, 0xFF	; 255
     8fe:	e9 ef       	ldi	r30, 0xF9	; 249
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	91 50       	subi	r25, 0x01	; 1
     904:	e0 40       	sbci	r30, 0x00	; 0
     906:	f0 40       	sbci	r31, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <ESP_Read+0x118>
		return;

	}

	_delay_ms(20);
	circularQueue_clearBuffer();
     90a:	00 c0       	rjmp	.+0      	; 0x90c <ESP_Read+0x122>
     90c:	00 00       	nop
	UART_string_tx(command_length);
     90e:	2c dc       	rcall	.-1960   	; 0x168 <circularQueue_clearBuffer>
     910:	ce 01       	movw	r24, r28
     912:	87 53       	subi	r24, 0x37	; 55
     914:	9f 4f       	sbci	r25, 0xFF	; 255
	while(circularQueue_isEmpty() == TRUE);
     916:	e0 d1       	rcall	.+960    	; 0xcd8 <UART_string_tx>
     918:	0e dc       	rcall	.-2020   	; 0x136 <circularQueue_isEmpty>
     91a:	81 30       	cpi	r24, 0x01	; 1
	while(circularQueue_searchSubStringInQueue("ERROR") == FALSE && circularQueue_searchSubStringInQueue("OK") == FALSE && circularQueue_searchSubStringInQueue("FAIL") == FALSE);
     91c:	e9 f3       	breq	.-6      	; 0x918 <ESP_Read+0x12e>
     91e:	82 e7       	ldi	r24, 0x72	; 114
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	2f dc       	rcall	.-1954   	; 0x182 <circularQueue_searchSubStringInQueue>
     924:	81 11       	cpse	r24, r1
     926:	0a c0       	rjmp	.+20     	; 0x93c <ESP_Read+0x152>
     928:	88 e7       	ldi	r24, 0x78	; 120
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	2a dc       	rcall	.-1964   	; 0x182 <circularQueue_searchSubStringInQueue>
     92e:	81 11       	cpse	r24, r1
     930:	05 c0       	rjmp	.+10     	; 0x93c <ESP_Read+0x152>
     932:	8b e7       	ldi	r24, 0x7B	; 123
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	25 dc       	rcall	.-1974   	; 0x182 <circularQueue_searchSubStringInQueue>
     938:	88 23       	and	r24, r24

	if(circularQueue_searchSubStringInQueue("ERROR") == TRUE || circularQueue_searchSubStringInQueue("FAIL") == FALSE)
     93a:	89 f3       	breq	.-30     	; 0x91e <ESP_Read+0x134>
     93c:	82 e7       	ldi	r24, 0x72	; 114
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	20 dc       	rcall	.-1984   	; 0x182 <circularQueue_searchSubStringInQueue>
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	29 f0       	breq	.+10     	; 0x950 <ESP_Read+0x166>
     946:	8b e7       	ldi	r24, 0x7B	; 123
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	1b dc       	rcall	.-1994   	; 0x182 <circularQueue_searchSubStringInQueue>
     94c:	81 11       	cpse	r24, r1
     94e:	0b c0       	rjmp	.+22     	; 0x966 <ESP_Read+0x17c>
     950:	0b dc       	rcall	.-2026   	; 0x168 <circularQueue_clearBuffer>
	{
		circularQueue_clearBuffer();
     952:	2f ef       	ldi	r18, 0xFF	; 255
     954:	83 ed       	ldi	r24, 0xD3	; 211
     956:	90 e3       	ldi	r25, 0x30	; 48
     958:	21 50       	subi	r18, 0x01	; 1
     95a:	80 40       	sbci	r24, 0x00	; 0
     95c:	90 40       	sbci	r25, 0x00	; 0
     95e:	e1 f7       	brne	.-8      	; 0x958 <ESP_Read+0x16e>
     960:	00 c0       	rjmp	.+0      	; 0x962 <ESP_Read+0x178>
     962:	00 00       	nop
     964:	3a c0       	rjmp	.+116    	; 0x9da <ESP_Read+0x1f0>
     966:	ef ef       	ldi	r30, 0xFF	; 255
     968:	f9 ef       	ldi	r31, 0xF9	; 249
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	e1 50       	subi	r30, 0x01	; 1
     96e:	f0 40       	sbci	r31, 0x00	; 0
     970:	20 40       	sbci	r18, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <ESP_Read+0x182>
     974:	00 c0       	rjmp	.+0      	; 0x976 <ESP_Read+0x18c>
		return;

	}

	_delay_ms(20);
	if (circularQueue_searchSubStringInQueue("OK") == TRUE)
     976:	00 00       	nop
     978:	88 e7       	ldi	r24, 0x78	; 120
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	02 dc       	rcall	.-2044   	; 0x182 <circularQueue_searchSubStringInQueue>
	{
		while(circularQueue_searchSubStringInQueue(">") == FALSE);
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	11 f5       	brne	.+68     	; 0x9c6 <ESP_Read+0x1dc>
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	fd db       	rcall	.-2054   	; 0x182 <circularQueue_searchSubStringInQueue>
     988:	88 23       	and	r24, r24
		circularQueue_clearBuffer();
     98a:	d9 f3       	breq	.-10     	; 0x982 <ESP_Read+0x198>
     98c:	ed db       	rcall	.-2086   	; 0x168 <circularQueue_clearBuffer>
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	90 e7       	ldi	r25, 0x70	; 112
     992:	e2 e0       	ldi	r30, 0x02	; 2
     994:	81 50       	subi	r24, 0x01	; 1
     996:	90 40       	sbci	r25, 0x00	; 0
		_delay_ms(50);
		UART_string_tx(command);
     998:	e0 40       	sbci	r30, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <ESP_Read+0x1aa>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <ESP_Read+0x1b4>
     99e:	00 00       	nop
		while(circularQueue_searchSubStringInQueue("CLOSED") == FALSE);
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	99 d1       	rcall	.+818    	; 0xcd8 <UART_string_tx>
     9a6:	8b ee       	ldi	r24, 0xEB	; 235
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	eb db       	rcall	.-2090   	; 0x182 <circularQueue_searchSubStringInQueue>
     9ac:	88 23       	and	r24, r24
     9ae:	d9 f3       	breq	.-10     	; 0x9a6 <ESP_Read+0x1bc>
     9b0:	8f e1       	ldi	r24, 0x1F	; 31
     9b2:	9e e4       	ldi	r25, 0x4E	; 78
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <ESP_Read+0x1ca>
		_delay_ms(5);
		data=circularQueue_bufferPointer();
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <ESP_Read+0x1d0>
     9ba:	00 00       	nop
		jasonParser(data,numberOfFields,Jdata);
     9bc:	ec db       	rcall	.-2088   	; 0x196 <circularQueue_bufferPointer>
     9be:	a6 01       	movw	r20, r12
     9c0:	6b 2d       	mov	r22, r11
     9c2:	8f de       	rcall	.-738    	; 0x6e2 <jasonParser>
		circularQueue_clearBuffer();
     9c4:	d1 db       	rcall	.-2142   	; 0x168 <circularQueue_clearBuffer>
     9c6:	d0 db       	rcall	.-2144   	; 0x168 <circularQueue_clearBuffer>
	}

	circularQueue_clearBuffer();
     9c8:	9f ef       	ldi	r25, 0xFF	; 255
     9ca:	e3 ed       	ldi	r30, 0xD3	; 211
     9cc:	f0 e3       	ldi	r31, 0x30	; 48
     9ce:	91 50       	subi	r25, 0x01	; 1
     9d0:	e0 40       	sbci	r30, 0x00	; 0
     9d2:	f0 40       	sbci	r31, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <ESP_Read+0x1e4>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <ESP_Read+0x1ee>
     9d8:	00 00       	nop
     9da:	c5 51       	subi	r28, 0x15	; 21
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
	_delay_ms(1000);
}
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	9f 90       	pop	r9
     9fc:	8f 90       	pop	r8
     9fe:	08 95       	ret

00000a00 <relayModuleControl_Sol>:
     a00:	fc 01       	movw	r30, r24
     a02:	81 81       	ldd	r24, Z+1	; 0x01

}

void relayModuleControl_Sol(Json * Jdata)
{
    if(Jdata->field1 == 0)
     a04:	81 11       	cpse	r24, r1
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <relayModuleControl_Sol+0xc>
        {
            SOL_1_OFF;
     a08:	44 9a       	sbi	0x08, 4	; 8
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <relayModuleControl_Sol+0xe>
        }
    else
        {
            SOL_1_ON
     a0c:	44 98       	cbi	0x08, 4	; 8
        }


    if(Jdata->field2 == 0)
     a0e:	82 81       	ldd	r24, Z+2	; 0x02
     a10:	81 11       	cpse	r24, r1
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <relayModuleControl_Sol+0x18>
        {
            SOL_2_OFF;
     a14:	45 9a       	sbi	0x08, 5	; 8
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <relayModuleControl_Sol+0x1a>
        }
    else
        {
            SOL_2_ON
     a18:	45 98       	cbi	0x08, 5	; 8
        }
    if(Jdata->field3 == 0)
     a1a:	83 81       	ldd	r24, Z+3	; 0x03
     a1c:	81 11       	cpse	r24, r1
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <relayModuleControl_Sol+0x24>
        {
            SOL_3_OFF;
     a20:	46 9a       	sbi	0x08, 6	; 8
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <relayModuleControl_Sol+0x26>
        }
    else
        {
            SOL_3_ON
     a24:	46 98       	cbi	0x08, 6	; 8
        }
    if(Jdata->field4 == 0)
     a26:	84 81       	ldd	r24, Z+4	; 0x04
     a28:	81 11       	cpse	r24, r1
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <relayModuleControl_Sol+0x30>
        {
            SOL_4_OFF;
     a2c:	47 9a       	sbi	0x08, 7	; 8
     a2e:	08 95       	ret
        }
    else
        {
            SOL_4_ON
     a30:	47 98       	cbi	0x08, 7	; 8
     a32:	08 95       	ret

00000a34 <main>:

extern volatile unsigned char oneSec;

int main(void)
{
    DDRB_CONFIG;
     a34:	8f e1       	ldi	r24, 0x1F	; 31
     a36:	84 b9       	out	0x04, r24	; 4
    PORTB_COMFIG;
     a38:	15 b8       	out	0x05, r1	; 5
    DDRC_CONFIG;
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	87 b9       	out	0x07, r24	; 7
    PORTC_COMFIG;
     a3e:	18 b8       	out	0x08, r1	; 8
    timer1_init();
     a40:	11 d1       	rcall	.+546    	; 0xc64 <timer1_init>
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
    uint8_t sec_10 = 0u;


    UART_int();
     a42:	32 d1       	rcall	.+612    	; 0xca8 <UART_int>
     a44:	8f e1       	ldi	r24, 0x1F	; 31
     a46:	9e e4       	ldi	r25, 0x4E	; 78
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <main+0x14>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <main+0x1a>
     a4e:	00 00       	nop
     a50:	f8 94       	cli



    //sei();
    cli();
    PORTB = 0u;
     a52:	15 b8       	out	0x05, r1	; 5
    usound_init();
     a54:	81 d1       	rcall	.+770    	; 0xd58 <usound_init>
     a56:	9f ef       	ldi	r25, 0xFF	; 255
     a58:	23 ed       	ldi	r18, 0xD3	; 211
     a5a:	80 e3       	ldi	r24, 0x30	; 48
     a5c:	91 50       	subi	r25, 0x01	; 1
     a5e:	20 40       	sbci	r18, 0x00	; 0
     a60:	80 40       	sbci	r24, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <main+0x28>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <main+0x32>
     a66:	00 00       	nop
     a68:	9f ef       	ldi	r25, 0xFF	; 255
     a6a:	23 ed       	ldi	r18, 0xD3	; 211
     a6c:	80 e3       	ldi	r24, 0x30	; 48
     a6e:	91 50       	subi	r25, 0x01	; 1
     a70:	20 40       	sbci	r18, 0x00	; 0
     a72:	80 40       	sbci	r24, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <main+0x3a>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <main+0x44>
     a78:	00 00       	nop
     a7a:	9f ef       	ldi	r25, 0xFF	; 255
     a7c:	23 ed       	ldi	r18, 0xD3	; 211
     a7e:	80 e3       	ldi	r24, 0x30	; 48
     a80:	91 50       	subi	r25, 0x01	; 1
     a82:	20 40       	sbci	r18, 0x00	; 0
     a84:	80 40       	sbci	r24, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <main+0x4c>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <main+0x56>
     a8a:	00 00       	nop
     a8c:	9f ef       	ldi	r25, 0xFF	; 255
     a8e:	23 ed       	ldi	r18, 0xD3	; 211
     a90:	80 e3       	ldi	r24, 0x30	; 48
     a92:	91 50       	subi	r25, 0x01	; 1
     a94:	20 40       	sbci	r18, 0x00	; 0
     a96:	80 40       	sbci	r24, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x5e>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <main+0x68>
     a9c:	00 00       	nop
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	23 ed       	ldi	r18, 0xD3	; 211
     aa2:	80 e3       	ldi	r24, 0x30	; 48
     aa4:	91 50       	subi	r25, 0x01	; 1
     aa6:	20 40       	sbci	r18, 0x00	; 0
     aa8:	80 40       	sbci	r24, 0x00	; 0
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <main+0x70>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <main+0x7a>
     aae:	00 00       	nop
     ab0:	c0 91 2d 03 	lds	r28, 0x032D	; 0x80032d <oneSec>
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    oldTime = oneSec;
     ab4:	78 94       	sei

    sei();
     ab6:	00 e0       	ldi	r16, 0x00	; 0
    timer1_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
    uint8_t sec_10 = 0u;
     ab8:	10 e0       	ldi	r17, 0x00	; 0
    PORTC_COMFIG;
    timer1_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
     aba:	d0 e0       	ldi	r29, 0x00	; 0
    PORTB_COMFIG;
    DDRC_CONFIG;
    PORTC_COMFIG;
    timer1_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
     abc:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <oneSec>
        {


            //  task_PERIODIC();

            if(oneSec != oldTime)
     ac0:	8c 17       	cp	r24, r28
     ac2:	e1 f3       	breq	.-8      	; 0xabc <main+0x88>
     ac4:	c0 91 2d 03 	lds	r28, 0x032D	; 0x80032d <oneSec>
                {
                    oldTime = oneSec;

                    if(sec_5 == 5u)
     ac8:	d5 30       	cpi	r29, 0x05	; 5
     aca:	19 f4       	brne	.+6      	; 0xad2 <main+0x9e>
                        {
                            task_5sec();
     acc:	10 d0       	rcall	.+32     	; 0xaee <task_5sec>
     ace:	d0 e0       	ldi	r29, 0x00	; 0
                            sec_5 = 0;
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <main+0xa0>
                        }
                    else
                        {
                            sec_5++;
     ad2:	df 5f       	subi	r29, 0xFF	; 255
                        }

                    if(sec_10 == 10u)
     ad4:	0a 30       	cpi	r16, 0x0A	; 10
     ad6:	19 f4       	brne	.+6      	; 0xade <main+0xaa>

                        {
                            task_10sec();
     ad8:	7c d0       	rcall	.+248    	; 0xbd2 <task_10sec>
     ada:	00 e0       	ldi	r16, 0x00	; 0
                            sec_10=0u;
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <main+0xac>
                        }

                    else
                        {

                            sec_10++;
     ade:	0f 5f       	subi	r16, 0xFF	; 255

                        }



                    if(sec_4 == 4u)
     ae0:	14 30       	cpi	r17, 0x04	; 4
     ae2:	19 f4       	brne	.+6      	; 0xaea <main+0xb6>
                        {
                            task_4Sec();
     ae4:	57 d0       	rcall	.+174    	; 0xb94 <task_4Sec>
     ae6:	10 e0       	ldi	r17, 0x00	; 0
                            sec_4 = 0;
     ae8:	e9 cf       	rjmp	.-46     	; 0xabc <main+0x88>
     aea:	1f 5f       	subi	r17, 0xFF	; 255
                        }
                    else
                        {
                            sec_4++;
     aec:	e7 cf       	rjmp	.-50     	; 0xabc <main+0x88>

00000aee <task_5sec>:
 */
#include "OS.h"
uint8_t manualflag = 0;

void task_5sec  (void)
{
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	62 97       	sbiw	r28, 0x12	; 18
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
	THWdata data;
	uint8_t Tbuffer[4];
	uint8_t Hbuffer[4];
	uint8_t WLbuffer[4];
 
	cli();
     b06:	f8 94       	cli
    dht_getdata_dht_11(&temperature,&humidity,1);
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	62 e2       	ldi	r22, 0x22	; 34
     b0c:	73 e0       	ldi	r23, 0x03	; 3
     b0e:	83 e2       	ldi	r24, 0x23	; 35
     b10:	93 e0       	ldi	r25, 0x03	; 3
     b12:	44 db       	rcall	.-2424   	; 0x19c <dht_getdata_dht_11>
     b14:	8e 01       	movw	r16, r28
     b16:	09 5f       	subi	r16, 0xF9	; 249
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
     b1a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <temperature>
     b1e:	4a e0       	ldi	r20, 0x0A	; 10
     b20:	b8 01       	movw	r22, r16
     b22:	08 2e       	mov	r0, r24
     b24:	00 0c       	add	r0, r0
     b26:	99 0b       	sbc	r25, r25
     b28:	0c d3       	rcall	.+1560   	; 0x1142 <__itoa_ncheck>
    itoa(temperature,Tbuffer,10);
	data.Temp=Tbuffer;
     b2a:	1a 83       	std	Y+2, r17	; 0x02
     b2c:	09 83       	std	Y+1, r16	; 0x01
     b2e:	0c 5f       	subi	r16, 0xFC	; 252
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <humidity>
     b36:	4a e0       	ldi	r20, 0x0A	; 10
     b38:	b8 01       	movw	r22, r16
     b3a:	08 2e       	mov	r0, r24
     b3c:	00 0c       	add	r0, r0
     b3e:	99 0b       	sbc	r25, r25
     b40:	00 d3       	rcall	.+1536   	; 0x1142 <__itoa_ncheck>
    itoa(humidity, Hbuffer, 10);
	data.Hum=Hbuffer;
     b42:	1c 83       	std	Y+4, r17	; 0x04
     b44:	0b 83       	std	Y+3, r16	; 0x03

    waterLevel=readDistance();
     b46:	0b d1       	rcall	.+534    	; 0xd5e <readDistance>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <waterLevel>
     b50:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <waterLevel+0x1>
     b54:	a0 93 20 03 	sts	0x0320, r26	; 0x800320 <waterLevel+0x2>
     b58:	b0 93 21 03 	sts	0x0321, r27	; 0x800321 <waterLevel+0x3>
     b5c:	0c 5f       	subi	r16, 0xFC	; 252
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
     b60:	4a e0       	ldi	r20, 0x0A	; 10
     b62:	b8 01       	movw	r22, r16
     b64:	ee d2       	rcall	.+1500   	; 0x1142 <__itoa_ncheck>
     b66:	1e 83       	std	Y+6, r17	; 0x06
    itoa(waterLevel, WLbuffer, 10);
	data.WL=WLbuffer;
     b68:	0d 83       	std	Y+5, r16	; 0x05
     b6a:	78 94       	sei
	sei();
     b6c:	22 ef       	ldi	r18, 0xF2	; 242
	
	ESP_write_FieldsTHWL(data,SENORS_WRITE_APIKEY);
     b6e:	32 e0       	ldi	r19, 0x02	; 2
     b70:	49 81       	ldd	r20, Y+1	; 0x01
     b72:	5a 81       	ldd	r21, Y+2	; 0x02
     b74:	6b 81       	ldd	r22, Y+3	; 0x03
     b76:	7c 81       	ldd	r23, Y+4	; 0x04
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	9e 81       	ldd	r25, Y+6	; 0x06
     b7c:	fb db       	rcall	.-2058   	; 0x374 <ESP_write_FieldsTHWL>
     b7e:	62 96       	adiw	r28, 0x12	; 18


    
}
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <task_4Sec>:
     b94:	cf 93       	push	r28
void task_4Sec(void)
{
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	29 97       	sbiw	r28, 0x09	; 9
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
   
    uint8_t i = 0;
	Json Jdata;

			ESP_Read(&Jdata,SELONOID_CHANNEL_ID,SELONOID_READ_APIKEY,NUMBER_OF_SOLENOIDS);
     ba8:	24 e0       	ldi	r18, 0x04	; 4
     baa:	43 e0       	ldi	r20, 0x03	; 3
     bac:	53 e0       	ldi	r21, 0x03	; 3
     bae:	64 e1       	ldi	r22, 0x14	; 20
     bb0:	73 e0       	ldi	r23, 0x03	; 3
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	19 de       	rcall	.-974    	; 0x7ea <ESP_Read>
			//change to "&Jdata" instead of "Jdata"
            relayModuleControl_Sol(&Jdata);
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	21 df       	rcall	.-446    	; 0xa00 <relayModuleControl_Sol>
            
            sei();
     bbe:	78 94       	sei

        

}
     bc0:	29 96       	adiw	r28, 0x09	; 9
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <task_10sec>:
void task_10sec (void)
{

    cli();
     bd2:	f8 94       	cli

    if (  /*dht_getdata_dht_22(&ftemperature,&fhumidity,0)!=-1  &&*/ dht_getdata_dht_11(&temperature,&humidity,1) == 0 )
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	62 e2       	ldi	r22, 0x22	; 34
     bd8:	73 e0       	ldi	r23, 0x03	; 3
     bda:	83 e2       	ldi	r24, 0x23	; 35
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	de da       	rcall	.-2628   	; 0x19c <dht_getdata_dht_11>
     be0:	81 11       	cpse	r24, r1
     be2:	3c c0       	rjmp	.+120    	; 0xc5c <task_10sec+0x8a>
            int8_t temp_avr;
            int8_t humd_avr;
            temp_avr = ( (ftemperature+temperature)/2 );
            humd_avr = ((fhumidity+humidity)/2);

            if(temp_avr > 30 || humd_avr > 67)
     be4:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <temperature>
     be8:	06 2e       	mov	r0, r22
     bea:	00 0c       	add	r0, r0
     bec:	77 0b       	sbc	r23, r23
     bee:	88 0b       	sbc	r24, r24
     bf0:	99 0b       	sbc	r25, r25
     bf2:	6e d1       	rcall	.+732    	; 0xed0 <__floatsisf>
     bf4:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <ftemperature>
     bf8:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <ftemperature+0x1>
     bfc:	40 91 2a 03 	lds	r20, 0x032A	; 0x80032a <ftemperature+0x2>
     c00:	50 91 2b 03 	lds	r21, 0x032B	; 0x80032b <ftemperature+0x3>
     c04:	ce d0       	rcall	.+412    	; 0xda2 <__addsf3>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	5f e3       	ldi	r21, 0x3F	; 63
     c0e:	ec d1       	rcall	.+984    	; 0xfe8 <__mulsf3>
     c10:	2c d1       	rcall	.+600    	; 0xe6a <__fixsfsi>
     c12:	6f 31       	cpi	r22, 0x1F	; 31
     c14:	cc f4       	brge	.+50     	; 0xc48 <task_10sec+0x76>
     c16:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <humidity>
     c1a:	06 2e       	mov	r0, r22
     c1c:	00 0c       	add	r0, r0
     c1e:	77 0b       	sbc	r23, r23
     c20:	88 0b       	sbc	r24, r24
     c22:	99 0b       	sbc	r25, r25
     c24:	55 d1       	rcall	.+682    	; 0xed0 <__floatsisf>
     c26:	20 91 24 03 	lds	r18, 0x0324	; 0x800324 <fhumidity>
     c2a:	30 91 25 03 	lds	r19, 0x0325	; 0x800325 <fhumidity+0x1>
     c2e:	40 91 26 03 	lds	r20, 0x0326	; 0x800326 <fhumidity+0x2>
     c32:	50 91 27 03 	lds	r21, 0x0327	; 0x800327 <fhumidity+0x3>
     c36:	b5 d0       	rcall	.+362    	; 0xda2 <__addsf3>
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	5f e3       	ldi	r21, 0x3F	; 63
     c40:	d3 d1       	rcall	.+934    	; 0xfe8 <__mulsf3>
     c42:	13 d1       	rcall	.+550    	; 0xe6a <__fixsfsi>
     c44:	64 34       	cpi	r22, 0x44	; 68
     c46:	1c f0       	brlt	.+6      	; 0xc4e <task_10sec+0x7c>
                {
                    VENTILATION_ON;
     c48:	29 98       	cbi	0x05, 1	; 5
                    FAN_ON;
     c4a:	2c 98       	cbi	0x05, 4	; 5
     c4c:	09 c0       	rjmp	.+18     	; 0xc60 <task_10sec+0x8e>
                }

            else if (manualflag == 0)
     c4e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <manualflag>
     c52:	81 11       	cpse	r24, r1
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <task_10sec+0x8e>
                {
                    VENTILATION_OFF;
     c56:	29 9a       	sbi	0x05, 1	; 5
                    FAN_OFF;
     c58:	2c 9a       	sbi	0x05, 4	; 5
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <task_10sec+0x8e>

        }
    else
        {
            //UART_string_tx("FATAL ERROR!");
            FAN_ON;
     c5c:	2c 98       	cbi	0x05, 4	; 5
            VENTILATION_ON;
     c5e:	29 98       	cbi	0x05, 1	; 5
        }
    sei();
     c60:	78 94       	sei
     c62:	08 95       	ret

00000c64 <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
     c64:	e1 e8       	ldi	r30, 0x81	; 129
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8d 60       	ori	r24, 0x0D	; 13
     c6c:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
     c6e:	ef e6       	ldi	r30, 0x6F	; 111
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	83 60       	ori	r24, 0x03	; 3
     c76:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
     c78:	8d e3       	ldi	r24, 0x3D	; 61
     c7a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
     c7e:	89 e0       	ldi	r24, 0x09	; 9
     c80:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     c84:	08 95       	ret

00000c86 <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     c86:	1f 92       	push	r1
     c88:	0f 92       	push	r0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	0f 92       	push	r0
     c8e:	11 24       	eor	r1, r1
     c90:	8f 93       	push	r24
	
	
	oneSec ++;
     c92:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <oneSec>
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <oneSec>
	
	
     c9c:	8f 91       	pop	r24
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <UART_int>:
                    newData = TRUE;
                }
        }
    else if (rc == startMarker)
        {
            recvInProgress = TRUE;
     ca8:	88 e9       	ldi	r24, 0x98	; 152
     caa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     cb4:	85 e3       	ldi	r24, 0x35	; 53
     cb6:	8a 95       	dec	r24
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <UART_int+0xe>
     cba:	00 00       	nop
     cbc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     cc6:	08 95       	ret

00000cc8 <UART_tx>:
     cc8:	e0 ec       	ldi	r30, 0xC0	; 192
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	90 81       	ld	r25, Z
     cce:	95 ff       	sbrs	r25, 5
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <UART_tx+0x4>
     cd2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     cd6:	08 95       	ret

00000cd8 <UART_string_tx>:
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	88 23       	and	r24, r24
     ce4:	51 f0       	breq	.+20     	; 0xcfa <UART_string_tx+0x22>
     ce6:	8f 01       	movw	r16, r30
     ce8:	c0 e0       	ldi	r28, 0x00	; 0
     cea:	ee df       	rcall	.-36     	; 0xcc8 <UART_tx>
     cec:	cf 5f       	subi	r28, 0xFF	; 255
     cee:	f8 01       	movw	r30, r16
     cf0:	ec 0f       	add	r30, r28
     cf2:	f1 1d       	adc	r31, r1
     cf4:	80 81       	ld	r24, Z
     cf6:	81 11       	cpse	r24, r1
     cf8:	f8 cf       	rjmp	.-16     	; 0xcea <UART_string_tx+0x12>
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <__vector_25>:
}



ISR(USART0_RX_vect)
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
    cli();
     d28:	f8 94       	cli



    circularQueue_enqueue((uint8_t)(UDR0));
     d2a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     d2e:	0b da       	rcall	.-3050   	; 0x146 <circularQueue_enqueue>
    //recvWithStartEndMarkers(UDR0);


    sei();
     d30:	78 94       	sei

}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0b be       	out	0x3b, r0	; 59
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <usound_init>:
#include "usound.h"

void usound_init(void)
{
	US_DDR |= (1 << US_TRIGER)|(0 << US_ECHO);
     d58:	0c 9a       	sbi	0x01, 4	; 1
	US_PIN |= (1<<US_ECHO);
     d5a:	05 9a       	sbi	0x00, 5	; 0
     d5c:	08 95       	ret

00000d5e <readDistance>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d5e:	8a e0       	ldi	r24, 0x0A	; 10
     d60:	8a 95       	dec	r24
     d62:	f1 f7       	brne	.-4      	; 0xd60 <readDistance+0x2>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <readDistance+0x8>
{
	uint8_t readStatus=0;
	uint32_t disTime=0;

	_delay_us(2);
	US_PORT |= (1 << US_TRIGER);
     d66:	14 9a       	sbi	0x02, 4	; 2
     d68:	85 e3       	ldi	r24, 0x35	; 53
     d6a:	8a 95       	dec	r24
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <readDistance+0xc>
     d6e:	00 00       	nop
	_delay_us(10);
	US_PORT &= ~(1 << US_TRIGER);
     d70:	14 98       	cbi	0x02, 4	; 2
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <readDistance+0x28>

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	dc 01       	movw	r26, r24
		{
			disTime++;
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	a1 1d       	adc	r26, r1
     d7e:	b1 1d       	adc	r27, r1
	US_PORT &= ~(1 << US_TRIGER);

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
     d80:	05 99       	sbic	0x00, 5	; 0
     d82:	fb cf       	rjmp	.-10     	; 0xd7a <readDistance+0x1c>
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <readDistance+0x2e>
     d86:	05 99       	sbic	0x00, 5	; 0
     d88:	f5 cf       	rjmp	.-22     	; 0xd74 <readDistance+0x16>
     d8a:	fd cf       	rjmp	.-6      	; 0xd86 <readDistance+0x28>
			disTime++;
			readStatus = 1;
		}
	}	

	return disTime * 0.00862;	//return data in cm	
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	9d d0       	rcall	.+314    	; 0xecc <__floatunsisf>
     d92:	27 ee       	ldi	r18, 0xE7	; 231
     d94:	3a e3       	ldi	r19, 0x3A	; 58
     d96:	4d e0       	ldi	r20, 0x0D	; 13
     d98:	5c e3       	ldi	r21, 0x3C	; 60
     d9a:	26 d1       	rcall	.+588    	; 0xfe8 <__mulsf3>
     d9c:	6b c0       	rjmp	.+214    	; 0xe74 <__fixunssfsi>
}
     d9e:	08 95       	ret

00000da0 <__subsf3>:
     da0:	50 58       	subi	r21, 0x80	; 128

00000da2 <__addsf3>:
     da2:	bb 27       	eor	r27, r27
     da4:	aa 27       	eor	r26, r26
     da6:	0e d0       	rcall	.+28     	; 0xdc4 <__addsf3x>
     da8:	e5 c0       	rjmp	.+458    	; 0xf74 <__fp_round>
     daa:	d6 d0       	rcall	.+428    	; 0xf58 <__fp_pscA>
     dac:	30 f0       	brcs	.+12     	; 0xdba <__addsf3+0x18>
     dae:	db d0       	rcall	.+438    	; 0xf66 <__fp_pscB>
     db0:	20 f0       	brcs	.+8      	; 0xdba <__addsf3+0x18>
     db2:	31 f4       	brne	.+12     	; 0xdc0 <__addsf3+0x1e>
     db4:	9f 3f       	cpi	r25, 0xFF	; 255
     db6:	11 f4       	brne	.+4      	; 0xdbc <__addsf3+0x1a>
     db8:	1e f4       	brtc	.+6      	; 0xdc0 <__addsf3+0x1e>
     dba:	cb c0       	rjmp	.+406    	; 0xf52 <__fp_nan>
     dbc:	0e f4       	brtc	.+2      	; 0xdc0 <__addsf3+0x1e>
     dbe:	e0 95       	com	r30
     dc0:	e7 fb       	bst	r30, 7
     dc2:	c1 c0       	rjmp	.+386    	; 0xf46 <__fp_inf>

00000dc4 <__addsf3x>:
     dc4:	e9 2f       	mov	r30, r25
     dc6:	e7 d0       	rcall	.+462    	; 0xf96 <__fp_split3>
     dc8:	80 f3       	brcs	.-32     	; 0xdaa <__addsf3+0x8>
     dca:	ba 17       	cp	r27, r26
     dcc:	62 07       	cpc	r22, r18
     dce:	73 07       	cpc	r23, r19
     dd0:	84 07       	cpc	r24, r20
     dd2:	95 07       	cpc	r25, r21
     dd4:	18 f0       	brcs	.+6      	; 0xddc <__addsf3x+0x18>
     dd6:	71 f4       	brne	.+28     	; 0xdf4 <__addsf3x+0x30>
     dd8:	9e f5       	brtc	.+102    	; 0xe40 <__addsf3x+0x7c>
     dda:	ff c0       	rjmp	.+510    	; 0xfda <__fp_zero>
     ddc:	0e f4       	brtc	.+2      	; 0xde0 <__addsf3x+0x1c>
     dde:	e0 95       	com	r30
     de0:	0b 2e       	mov	r0, r27
     de2:	ba 2f       	mov	r27, r26
     de4:	a0 2d       	mov	r26, r0
     de6:	0b 01       	movw	r0, r22
     de8:	b9 01       	movw	r22, r18
     dea:	90 01       	movw	r18, r0
     dec:	0c 01       	movw	r0, r24
     dee:	ca 01       	movw	r24, r20
     df0:	a0 01       	movw	r20, r0
     df2:	11 24       	eor	r1, r1
     df4:	ff 27       	eor	r31, r31
     df6:	59 1b       	sub	r21, r25
     df8:	99 f0       	breq	.+38     	; 0xe20 <__addsf3x+0x5c>
     dfa:	59 3f       	cpi	r21, 0xF9	; 249
     dfc:	50 f4       	brcc	.+20     	; 0xe12 <__addsf3x+0x4e>
     dfe:	50 3e       	cpi	r21, 0xE0	; 224
     e00:	68 f1       	brcs	.+90     	; 0xe5c <__addsf3x+0x98>
     e02:	1a 16       	cp	r1, r26
     e04:	f0 40       	sbci	r31, 0x00	; 0
     e06:	a2 2f       	mov	r26, r18
     e08:	23 2f       	mov	r18, r19
     e0a:	34 2f       	mov	r19, r20
     e0c:	44 27       	eor	r20, r20
     e0e:	58 5f       	subi	r21, 0xF8	; 248
     e10:	f3 cf       	rjmp	.-26     	; 0xdf8 <__addsf3x+0x34>
     e12:	46 95       	lsr	r20
     e14:	37 95       	ror	r19
     e16:	27 95       	ror	r18
     e18:	a7 95       	ror	r26
     e1a:	f0 40       	sbci	r31, 0x00	; 0
     e1c:	53 95       	inc	r21
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <__addsf3x+0x4e>
     e20:	7e f4       	brtc	.+30     	; 0xe40 <__addsf3x+0x7c>
     e22:	1f 16       	cp	r1, r31
     e24:	ba 0b       	sbc	r27, r26
     e26:	62 0b       	sbc	r22, r18
     e28:	73 0b       	sbc	r23, r19
     e2a:	84 0b       	sbc	r24, r20
     e2c:	ba f0       	brmi	.+46     	; 0xe5c <__addsf3x+0x98>
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	a1 f0       	breq	.+40     	; 0xe5a <__addsf3x+0x96>
     e32:	ff 0f       	add	r31, r31
     e34:	bb 1f       	adc	r27, r27
     e36:	66 1f       	adc	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	c2 f7       	brpl	.-16     	; 0xe2e <__addsf3x+0x6a>
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <__addsf3x+0x98>
     e40:	ba 0f       	add	r27, r26
     e42:	62 1f       	adc	r22, r18
     e44:	73 1f       	adc	r23, r19
     e46:	84 1f       	adc	r24, r20
     e48:	48 f4       	brcc	.+18     	; 0xe5c <__addsf3x+0x98>
     e4a:	87 95       	ror	r24
     e4c:	77 95       	ror	r23
     e4e:	67 95       	ror	r22
     e50:	b7 95       	ror	r27
     e52:	f7 95       	ror	r31
     e54:	9e 3f       	cpi	r25, 0xFE	; 254
     e56:	08 f0       	brcs	.+2      	; 0xe5a <__addsf3x+0x96>
     e58:	b3 cf       	rjmp	.-154    	; 0xdc0 <__addsf3+0x1e>
     e5a:	93 95       	inc	r25
     e5c:	88 0f       	add	r24, r24
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <__addsf3x+0x9e>
     e60:	99 27       	eor	r25, r25
     e62:	ee 0f       	add	r30, r30
     e64:	97 95       	ror	r25
     e66:	87 95       	ror	r24
     e68:	08 95       	ret

00000e6a <__fixsfsi>:
     e6a:	04 d0       	rcall	.+8      	; 0xe74 <__fixunssfsi>
     e6c:	68 94       	set
     e6e:	b1 11       	cpse	r27, r1
     e70:	b5 c0       	rjmp	.+362    	; 0xfdc <__fp_szero>
     e72:	08 95       	ret

00000e74 <__fixunssfsi>:
     e74:	98 d0       	rcall	.+304    	; 0xfa6 <__fp_splitA>
     e76:	88 f0       	brcs	.+34     	; 0xe9a <__fixunssfsi+0x26>
     e78:	9f 57       	subi	r25, 0x7F	; 127
     e7a:	90 f0       	brcs	.+36     	; 0xea0 <__fixunssfsi+0x2c>
     e7c:	b9 2f       	mov	r27, r25
     e7e:	99 27       	eor	r25, r25
     e80:	b7 51       	subi	r27, 0x17	; 23
     e82:	a0 f0       	brcs	.+40     	; 0xeac <__fixunssfsi+0x38>
     e84:	d1 f0       	breq	.+52     	; 0xeba <__fixunssfsi+0x46>
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	1a f0       	brmi	.+6      	; 0xe96 <__fixunssfsi+0x22>
     e90:	ba 95       	dec	r27
     e92:	c9 f7       	brne	.-14     	; 0xe86 <__fixunssfsi+0x12>
     e94:	12 c0       	rjmp	.+36     	; 0xeba <__fixunssfsi+0x46>
     e96:	b1 30       	cpi	r27, 0x01	; 1
     e98:	81 f0       	breq	.+32     	; 0xeba <__fixunssfsi+0x46>
     e9a:	9f d0       	rcall	.+318    	; 0xfda <__fp_zero>
     e9c:	b1 e0       	ldi	r27, 0x01	; 1
     e9e:	08 95       	ret
     ea0:	9c c0       	rjmp	.+312    	; 0xfda <__fp_zero>
     ea2:	67 2f       	mov	r22, r23
     ea4:	78 2f       	mov	r23, r24
     ea6:	88 27       	eor	r24, r24
     ea8:	b8 5f       	subi	r27, 0xF8	; 248
     eaa:	39 f0       	breq	.+14     	; 0xeba <__fixunssfsi+0x46>
     eac:	b9 3f       	cpi	r27, 0xF9	; 249
     eae:	cc f3       	brlt	.-14     	; 0xea2 <__fixunssfsi+0x2e>
     eb0:	86 95       	lsr	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b3 95       	inc	r27
     eb8:	d9 f7       	brne	.-10     	; 0xeb0 <__fixunssfsi+0x3c>
     eba:	3e f4       	brtc	.+14     	; 0xeca <__fixunssfsi+0x56>
     ebc:	90 95       	com	r25
     ebe:	80 95       	com	r24
     ec0:	70 95       	com	r23
     ec2:	61 95       	neg	r22
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	08 95       	ret

00000ecc <__floatunsisf>:
     ecc:	e8 94       	clt
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <__floatsisf+0x12>

00000ed0 <__floatsisf>:
     ed0:	97 fb       	bst	r25, 7
     ed2:	3e f4       	brtc	.+14     	; 0xee2 <__floatsisf+0x12>
     ed4:	90 95       	com	r25
     ed6:	80 95       	com	r24
     ed8:	70 95       	com	r23
     eda:	61 95       	neg	r22
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	99 23       	and	r25, r25
     ee4:	a9 f0       	breq	.+42     	; 0xf10 <__floatsisf+0x40>
     ee6:	f9 2f       	mov	r31, r25
     ee8:	96 e9       	ldi	r25, 0x96	; 150
     eea:	bb 27       	eor	r27, r27
     eec:	93 95       	inc	r25
     eee:	f6 95       	lsr	r31
     ef0:	87 95       	ror	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	b7 95       	ror	r27
     ef8:	f1 11       	cpse	r31, r1
     efa:	f8 cf       	rjmp	.-16     	; 0xeec <__floatsisf+0x1c>
     efc:	fa f4       	brpl	.+62     	; 0xf3c <__floatsisf+0x6c>
     efe:	bb 0f       	add	r27, r27
     f00:	11 f4       	brne	.+4      	; 0xf06 <__floatsisf+0x36>
     f02:	60 ff       	sbrs	r22, 0
     f04:	1b c0       	rjmp	.+54     	; 0xf3c <__floatsisf+0x6c>
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	16 c0       	rjmp	.+44     	; 0xf3c <__floatsisf+0x6c>
     f10:	88 23       	and	r24, r24
     f12:	11 f0       	breq	.+4      	; 0xf18 <__floatsisf+0x48>
     f14:	96 e9       	ldi	r25, 0x96	; 150
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <__floatsisf+0x6a>
     f18:	77 23       	and	r23, r23
     f1a:	21 f0       	breq	.+8      	; 0xf24 <__floatsisf+0x54>
     f1c:	9e e8       	ldi	r25, 0x8E	; 142
     f1e:	87 2f       	mov	r24, r23
     f20:	76 2f       	mov	r23, r22
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <__floatsisf+0x5e>
     f24:	66 23       	and	r22, r22
     f26:	71 f0       	breq	.+28     	; 0xf44 <__floatsisf+0x74>
     f28:	96 e8       	ldi	r25, 0x86	; 134
     f2a:	86 2f       	mov	r24, r22
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	2a f0       	brmi	.+10     	; 0xf3c <__floatsisf+0x6c>
     f32:	9a 95       	dec	r25
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	88 1f       	adc	r24, r24
     f3a:	da f7       	brpl	.-10     	; 0xf32 <__floatsisf+0x62>
     f3c:	88 0f       	add	r24, r24
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	97 f9       	bld	r25, 7
     f44:	08 95       	ret

00000f46 <__fp_inf>:
     f46:	97 f9       	bld	r25, 7
     f48:	9f 67       	ori	r25, 0x7F	; 127
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	08 95       	ret

00000f52 <__fp_nan>:
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	80 ec       	ldi	r24, 0xC0	; 192
     f56:	08 95       	ret

00000f58 <__fp_pscA>:
     f58:	00 24       	eor	r0, r0
     f5a:	0a 94       	dec	r0
     f5c:	16 16       	cp	r1, r22
     f5e:	17 06       	cpc	r1, r23
     f60:	18 06       	cpc	r1, r24
     f62:	09 06       	cpc	r0, r25
     f64:	08 95       	ret

00000f66 <__fp_pscB>:
     f66:	00 24       	eor	r0, r0
     f68:	0a 94       	dec	r0
     f6a:	12 16       	cp	r1, r18
     f6c:	13 06       	cpc	r1, r19
     f6e:	14 06       	cpc	r1, r20
     f70:	05 06       	cpc	r0, r21
     f72:	08 95       	ret

00000f74 <__fp_round>:
     f74:	09 2e       	mov	r0, r25
     f76:	03 94       	inc	r0
     f78:	00 0c       	add	r0, r0
     f7a:	11 f4       	brne	.+4      	; 0xf80 <__fp_round+0xc>
     f7c:	88 23       	and	r24, r24
     f7e:	52 f0       	brmi	.+20     	; 0xf94 <__fp_round+0x20>
     f80:	bb 0f       	add	r27, r27
     f82:	40 f4       	brcc	.+16     	; 0xf94 <__fp_round+0x20>
     f84:	bf 2b       	or	r27, r31
     f86:	11 f4       	brne	.+4      	; 0xf8c <__fp_round+0x18>
     f88:	60 ff       	sbrs	r22, 0
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <__fp_round+0x20>
     f8c:	6f 5f       	subi	r22, 0xFF	; 255
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	08 95       	ret

00000f96 <__fp_split3>:
     f96:	57 fd       	sbrc	r21, 7
     f98:	90 58       	subi	r25, 0x80	; 128
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	59 f0       	breq	.+22     	; 0xfb6 <__fp_splitA+0x10>
     fa0:	5f 3f       	cpi	r21, 0xFF	; 255
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <__fp_splitA+0x1a>
     fa4:	47 95       	ror	r20

00000fa6 <__fp_splitA>:
     fa6:	88 0f       	add	r24, r24
     fa8:	97 fb       	bst	r25, 7
     faa:	99 1f       	adc	r25, r25
     fac:	61 f0       	breq	.+24     	; 0xfc6 <__fp_splitA+0x20>
     fae:	9f 3f       	cpi	r25, 0xFF	; 255
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <__fp_splitA+0x2a>
     fb2:	87 95       	ror	r24
     fb4:	08 95       	ret
     fb6:	12 16       	cp	r1, r18
     fb8:	13 06       	cpc	r1, r19
     fba:	14 06       	cpc	r1, r20
     fbc:	55 1f       	adc	r21, r21
     fbe:	f2 cf       	rjmp	.-28     	; 0xfa4 <__fp_split3+0xe>
     fc0:	46 95       	lsr	r20
     fc2:	f1 df       	rcall	.-30     	; 0xfa6 <__fp_splitA>
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <__fp_splitA+0x30>
     fc6:	16 16       	cp	r1, r22
     fc8:	17 06       	cpc	r1, r23
     fca:	18 06       	cpc	r1, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	f1 cf       	rjmp	.-30     	; 0xfb2 <__fp_splitA+0xc>
     fd0:	86 95       	lsr	r24
     fd2:	71 05       	cpc	r23, r1
     fd4:	61 05       	cpc	r22, r1
     fd6:	08 94       	sec
     fd8:	08 95       	ret

00000fda <__fp_zero>:
     fda:	e8 94       	clt

00000fdc <__fp_szero>:
     fdc:	bb 27       	eor	r27, r27
     fde:	66 27       	eor	r22, r22
     fe0:	77 27       	eor	r23, r23
     fe2:	cb 01       	movw	r24, r22
     fe4:	97 f9       	bld	r25, 7
     fe6:	08 95       	ret

00000fe8 <__mulsf3>:
     fe8:	0b d0       	rcall	.+22     	; 0x1000 <__mulsf3x>
     fea:	c4 cf       	rjmp	.-120    	; 0xf74 <__fp_round>
     fec:	b5 df       	rcall	.-150    	; 0xf58 <__fp_pscA>
     fee:	28 f0       	brcs	.+10     	; 0xffa <__mulsf3+0x12>
     ff0:	ba df       	rcall	.-140    	; 0xf66 <__fp_pscB>
     ff2:	18 f0       	brcs	.+6      	; 0xffa <__mulsf3+0x12>
     ff4:	95 23       	and	r25, r21
     ff6:	09 f0       	breq	.+2      	; 0xffa <__mulsf3+0x12>
     ff8:	a6 cf       	rjmp	.-180    	; 0xf46 <__fp_inf>
     ffa:	ab cf       	rjmp	.-170    	; 0xf52 <__fp_nan>
     ffc:	11 24       	eor	r1, r1
     ffe:	ee cf       	rjmp	.-36     	; 0xfdc <__fp_szero>

00001000 <__mulsf3x>:
    1000:	ca df       	rcall	.-108    	; 0xf96 <__fp_split3>
    1002:	a0 f3       	brcs	.-24     	; 0xfec <__mulsf3+0x4>

00001004 <__mulsf3_pse>:
    1004:	95 9f       	mul	r25, r21
    1006:	d1 f3       	breq	.-12     	; 0xffc <__mulsf3+0x14>
    1008:	95 0f       	add	r25, r21
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	55 1f       	adc	r21, r21
    100e:	62 9f       	mul	r22, r18
    1010:	f0 01       	movw	r30, r0
    1012:	72 9f       	mul	r23, r18
    1014:	bb 27       	eor	r27, r27
    1016:	f0 0d       	add	r31, r0
    1018:	b1 1d       	adc	r27, r1
    101a:	63 9f       	mul	r22, r19
    101c:	aa 27       	eor	r26, r26
    101e:	f0 0d       	add	r31, r0
    1020:	b1 1d       	adc	r27, r1
    1022:	aa 1f       	adc	r26, r26
    1024:	64 9f       	mul	r22, r20
    1026:	66 27       	eor	r22, r22
    1028:	b0 0d       	add	r27, r0
    102a:	a1 1d       	adc	r26, r1
    102c:	66 1f       	adc	r22, r22
    102e:	82 9f       	mul	r24, r18
    1030:	22 27       	eor	r18, r18
    1032:	b0 0d       	add	r27, r0
    1034:	a1 1d       	adc	r26, r1
    1036:	62 1f       	adc	r22, r18
    1038:	73 9f       	mul	r23, r19
    103a:	b0 0d       	add	r27, r0
    103c:	a1 1d       	adc	r26, r1
    103e:	62 1f       	adc	r22, r18
    1040:	83 9f       	mul	r24, r19
    1042:	a0 0d       	add	r26, r0
    1044:	61 1d       	adc	r22, r1
    1046:	22 1f       	adc	r18, r18
    1048:	74 9f       	mul	r23, r20
    104a:	33 27       	eor	r19, r19
    104c:	a0 0d       	add	r26, r0
    104e:	61 1d       	adc	r22, r1
    1050:	23 1f       	adc	r18, r19
    1052:	84 9f       	mul	r24, r20
    1054:	60 0d       	add	r22, r0
    1056:	21 1d       	adc	r18, r1
    1058:	82 2f       	mov	r24, r18
    105a:	76 2f       	mov	r23, r22
    105c:	6a 2f       	mov	r22, r26
    105e:	11 24       	eor	r1, r1
    1060:	9f 57       	subi	r25, 0x7F	; 127
    1062:	50 40       	sbci	r21, 0x00	; 0
    1064:	8a f0       	brmi	.+34     	; 0x1088 <__mulsf3_pse+0x84>
    1066:	e1 f0       	breq	.+56     	; 0x10a0 <__mulsf3_pse+0x9c>
    1068:	88 23       	and	r24, r24
    106a:	4a f0       	brmi	.+18     	; 0x107e <__mulsf3_pse+0x7a>
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	bb 1f       	adc	r27, r27
    1072:	66 1f       	adc	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	88 1f       	adc	r24, r24
    1078:	91 50       	subi	r25, 0x01	; 1
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	a9 f7       	brne	.-22     	; 0x1068 <__mulsf3_pse+0x64>
    107e:	9e 3f       	cpi	r25, 0xFE	; 254
    1080:	51 05       	cpc	r21, r1
    1082:	70 f0       	brcs	.+28     	; 0x10a0 <__mulsf3_pse+0x9c>
    1084:	60 cf       	rjmp	.-320    	; 0xf46 <__fp_inf>
    1086:	aa cf       	rjmp	.-172    	; 0xfdc <__fp_szero>
    1088:	5f 3f       	cpi	r21, 0xFF	; 255
    108a:	ec f3       	brlt	.-6      	; 0x1086 <__mulsf3_pse+0x82>
    108c:	98 3e       	cpi	r25, 0xE8	; 232
    108e:	dc f3       	brlt	.-10     	; 0x1086 <__mulsf3_pse+0x82>
    1090:	86 95       	lsr	r24
    1092:	77 95       	ror	r23
    1094:	67 95       	ror	r22
    1096:	b7 95       	ror	r27
    1098:	f7 95       	ror	r31
    109a:	e7 95       	ror	r30
    109c:	9f 5f       	subi	r25, 0xFF	; 255
    109e:	c1 f7       	brne	.-16     	; 0x1090 <__mulsf3_pse+0x8c>
    10a0:	fe 2b       	or	r31, r30
    10a2:	88 0f       	add	r24, r24
    10a4:	91 1d       	adc	r25, r1
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret

000010ae <__tablejump2__>:
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	88 1f       	adc	r24, r24
    10b4:	8b bf       	out	0x3b, r24	; 59
    10b6:	07 90       	elpm	r0, Z+
    10b8:	f6 91       	elpm	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	19 94       	eijmp

000010be <atoi>:
    10be:	fc 01       	movw	r30, r24
    10c0:	88 27       	eor	r24, r24
    10c2:	99 27       	eor	r25, r25
    10c4:	e8 94       	clt
    10c6:	21 91       	ld	r18, Z+
    10c8:	20 32       	cpi	r18, 0x20	; 32
    10ca:	e9 f3       	breq	.-6      	; 0x10c6 <atoi+0x8>
    10cc:	29 30       	cpi	r18, 0x09	; 9
    10ce:	10 f0       	brcs	.+4      	; 0x10d4 <atoi+0x16>
    10d0:	2e 30       	cpi	r18, 0x0E	; 14
    10d2:	c8 f3       	brcs	.-14     	; 0x10c6 <atoi+0x8>
    10d4:	2b 32       	cpi	r18, 0x2B	; 43
    10d6:	39 f0       	breq	.+14     	; 0x10e6 <atoi+0x28>
    10d8:	2d 32       	cpi	r18, 0x2D	; 45
    10da:	31 f4       	brne	.+12     	; 0x10e8 <atoi+0x2a>
    10dc:	68 94       	set
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <atoi+0x28>
    10e0:	3a d0       	rcall	.+116    	; 0x1156 <__mulhi_const_10>
    10e2:	82 0f       	add	r24, r18
    10e4:	91 1d       	adc	r25, r1
    10e6:	21 91       	ld	r18, Z+
    10e8:	20 53       	subi	r18, 0x30	; 48
    10ea:	2a 30       	cpi	r18, 0x0A	; 10
    10ec:	c8 f3       	brcs	.-14     	; 0x10e0 <atoi+0x22>
    10ee:	1e f4       	brtc	.+6      	; 0x10f6 <atoi+0x38>
    10f0:	90 95       	com	r25
    10f2:	81 95       	neg	r24
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <strcat>:
    10f8:	fb 01       	movw	r30, r22
    10fa:	dc 01       	movw	r26, r24
    10fc:	0d 90       	ld	r0, X+
    10fe:	00 20       	and	r0, r0
    1100:	e9 f7       	brne	.-6      	; 0x10fc <strcat+0x4>
    1102:	11 97       	sbiw	r26, 0x01	; 1
    1104:	01 90       	ld	r0, Z+
    1106:	0d 92       	st	X+, r0
    1108:	00 20       	and	r0, r0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <strcat+0xc>
    110c:	08 95       	ret

0000110e <strstr>:
    110e:	fb 01       	movw	r30, r22
    1110:	51 91       	ld	r21, Z+
    1112:	55 23       	and	r21, r21
    1114:	a9 f0       	breq	.+42     	; 0x1140 <strstr+0x32>
    1116:	bf 01       	movw	r22, r30
    1118:	dc 01       	movw	r26, r24
    111a:	4d 91       	ld	r20, X+
    111c:	45 17       	cp	r20, r21
    111e:	41 11       	cpse	r20, r1
    1120:	e1 f7       	brne	.-8      	; 0x111a <strstr+0xc>
    1122:	59 f4       	brne	.+22     	; 0x113a <strstr+0x2c>
    1124:	cd 01       	movw	r24, r26
    1126:	01 90       	ld	r0, Z+
    1128:	00 20       	and	r0, r0
    112a:	49 f0       	breq	.+18     	; 0x113e <strstr+0x30>
    112c:	4d 91       	ld	r20, X+
    112e:	40 15       	cp	r20, r0
    1130:	41 11       	cpse	r20, r1
    1132:	c9 f3       	breq	.-14     	; 0x1126 <strstr+0x18>
    1134:	fb 01       	movw	r30, r22
    1136:	41 11       	cpse	r20, r1
    1138:	ef cf       	rjmp	.-34     	; 0x1118 <strstr+0xa>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	08 95       	ret

00001142 <__itoa_ncheck>:
    1142:	bb 27       	eor	r27, r27
    1144:	4a 30       	cpi	r20, 0x0A	; 10
    1146:	31 f4       	brne	.+12     	; 0x1154 <__itoa_ncheck+0x12>
    1148:	99 23       	and	r25, r25
    114a:	22 f4       	brpl	.+8      	; 0x1154 <__itoa_ncheck+0x12>
    114c:	bd e2       	ldi	r27, 0x2D	; 45
    114e:	90 95       	com	r25
    1150:	81 95       	neg	r24
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	09 c0       	rjmp	.+18     	; 0x1168 <__utoa_common>

00001156 <__mulhi_const_10>:
    1156:	7a e0       	ldi	r23, 0x0A	; 10
    1158:	97 9f       	mul	r25, r23
    115a:	90 2d       	mov	r25, r0
    115c:	87 9f       	mul	r24, r23
    115e:	80 2d       	mov	r24, r0
    1160:	91 0d       	add	r25, r1
    1162:	11 24       	eor	r1, r1
    1164:	08 95       	ret

00001166 <__utoa_ncheck>:
    1166:	bb 27       	eor	r27, r27

00001168 <__utoa_common>:
    1168:	fb 01       	movw	r30, r22
    116a:	55 27       	eor	r21, r21
    116c:	aa 27       	eor	r26, r26
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	aa 1f       	adc	r26, r26
    1174:	a4 17       	cp	r26, r20
    1176:	10 f0       	brcs	.+4      	; 0x117c <__utoa_common+0x14>
    1178:	a4 1b       	sub	r26, r20
    117a:	83 95       	inc	r24
    117c:	50 51       	subi	r21, 0x10	; 16
    117e:	b9 f7       	brne	.-18     	; 0x116e <__utoa_common+0x6>
    1180:	a0 5d       	subi	r26, 0xD0	; 208
    1182:	aa 33       	cpi	r26, 0x3A	; 58
    1184:	08 f0       	brcs	.+2      	; 0x1188 <__utoa_common+0x20>
    1186:	a9 5d       	subi	r26, 0xD9	; 217
    1188:	a1 93       	st	Z+, r26
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	79 f7       	brne	.-34     	; 0x116c <__utoa_common+0x4>
    118e:	b1 11       	cpse	r27, r1
    1190:	b1 93       	st	Z+, r27
    1192:	11 92       	st	Z+, r1
    1194:	cb 01       	movw	r24, r22
    1196:	00 c0       	rjmp	.+0      	; 0x1198 <strrev>

00001198 <strrev>:
    1198:	dc 01       	movw	r26, r24
    119a:	fc 01       	movw	r30, r24
    119c:	67 2f       	mov	r22, r23
    119e:	71 91       	ld	r23, Z+
    11a0:	77 23       	and	r23, r23
    11a2:	e1 f7       	brne	.-8      	; 0x119c <strrev+0x4>
    11a4:	32 97       	sbiw	r30, 0x02	; 2
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <strrev+0x18>
    11a8:	7c 91       	ld	r23, X
    11aa:	6d 93       	st	X+, r22
    11ac:	70 83       	st	Z, r23
    11ae:	62 91       	ld	r22, -Z
    11b0:	ae 17       	cp	r26, r30
    11b2:	bf 07       	cpc	r27, r31
    11b4:	c8 f3       	brcs	.-14     	; 0x11a8 <strrev+0x10>
    11b6:	08 95       	ret

000011b8 <_exit>:
    11b8:	f8 94       	cli

000011ba <__stop_program>:
    11ba:	ff cf       	rjmp	.-2      	; 0x11ba <__stop_program>
