
Farm_01062019_v5.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  00000abc  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  00800328  00800328  00000c78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031ab  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000178e  00000000  00000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001409  00000000  00000000  000057c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00006bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fb  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016e9  00000000  00000000  00007a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	96 c0       	rjmp	.+300    	; 0x132 <__bad_interrupt>
   6:	00 00       	nop
   8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
   a:	00 00       	nop
   c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
   e:	00 00       	nop
  10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
  12:	00 00       	nop
  14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
  16:	00 00       	nop
  18:	8c c0       	rjmp	.+280    	; 0x132 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
  1e:	00 00       	nop
  20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
  22:	00 00       	nop
  24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
  26:	00 00       	nop
  28:	84 c0       	rjmp	.+264    	; 0x132 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	82 c0       	rjmp	.+260    	; 0x132 <__bad_interrupt>
  2e:	00 00       	nop
  30:	80 c0       	rjmp	.+256    	; 0x132 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__bad_interrupt>
  36:	00 00       	nop
  38:	7c c0       	rjmp	.+248    	; 0x132 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7a c0       	rjmp	.+244    	; 0x132 <__bad_interrupt>
  3e:	00 00       	nop
  40:	78 c0       	rjmp	.+240    	; 0x132 <__bad_interrupt>
  42:	00 00       	nop
  44:	d3 c3       	rjmp	.+1958   	; 0x7ec <__vector_17>
  46:	00 00       	nop
  48:	74 c0       	rjmp	.+232    	; 0x132 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	72 c0       	rjmp	.+228    	; 0x132 <__bad_interrupt>
  4e:	00 00       	nop
  50:	70 c0       	rjmp	.+224    	; 0x132 <__bad_interrupt>
  52:	00 00       	nop
  54:	dc c3       	rjmp	.+1976   	; 0x80e <__vector_21>
  56:	00 00       	nop
  58:	6c c0       	rjmp	.+216    	; 0x132 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6a c0       	rjmp	.+212    	; 0x132 <__bad_interrupt>
  5e:	00 00       	nop
  60:	68 c0       	rjmp	.+208    	; 0x132 <__bad_interrupt>
  62:	00 00       	nop
  64:	76 c4       	rjmp	.+2284   	; 0x952 <__vector_25>
  66:	00 00       	nop
  68:	64 c0       	rjmp	.+200    	; 0x132 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	62 c0       	rjmp	.+196    	; 0x132 <__bad_interrupt>
  6e:	00 00       	nop
  70:	60 c0       	rjmp	.+192    	; 0x132 <__bad_interrupt>
  72:	00 00       	nop
  74:	5e c0       	rjmp	.+188    	; 0x132 <__bad_interrupt>
  76:	00 00       	nop
  78:	5c c0       	rjmp	.+184    	; 0x132 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5a c0       	rjmp	.+180    	; 0x132 <__bad_interrupt>
  7e:	00 00       	nop
  80:	58 c0       	rjmp	.+176    	; 0x132 <__bad_interrupt>
  82:	00 00       	nop
  84:	56 c0       	rjmp	.+172    	; 0x132 <__bad_interrupt>
  86:	00 00       	nop
  88:	54 c0       	rjmp	.+168    	; 0x132 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	52 c0       	rjmp	.+164    	; 0x132 <__bad_interrupt>
  8e:	00 00       	nop
  90:	50 c0       	rjmp	.+160    	; 0x132 <__bad_interrupt>
  92:	00 00       	nop
  94:	4e c0       	rjmp	.+156    	; 0x132 <__bad_interrupt>
  96:	00 00       	nop
  98:	4c c0       	rjmp	.+152    	; 0x132 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4a c0       	rjmp	.+148    	; 0x132 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	48 c0       	rjmp	.+144    	; 0x132 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	46 c0       	rjmp	.+140    	; 0x132 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	44 c0       	rjmp	.+136    	; 0x132 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	42 c0       	rjmp	.+132    	; 0x132 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	40 c0       	rjmp	.+128    	; 0x132 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	3e c0       	rjmp	.+124    	; 0x132 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3c c0       	rjmp	.+120    	; 0x132 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3a c0       	rjmp	.+116    	; 0x132 <__bad_interrupt>
  be:	00 00       	nop
  c0:	38 c0       	rjmp	.+112    	; 0x132 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	36 c0       	rjmp	.+108    	; 0x132 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	34 c0       	rjmp	.+104    	; 0x132 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	32 c0       	rjmp	.+100    	; 0x132 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	30 c0       	rjmp	.+96     	; 0x132 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	2e c0       	rjmp	.+92     	; 0x132 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2c c0       	rjmp	.+88     	; 0x132 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2a c0       	rjmp	.+84     	; 0x132 <__bad_interrupt>
  de:	00 00       	nop
  e0:	28 c0       	rjmp	.+80     	; 0x132 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	70 01       	movw	r14, r0
  e6:	74 01       	movw	r14, r8
  e8:	78 01       	movw	r14, r16
  ea:	7c 01       	movw	r14, r24
  ec:	80 01       	movw	r16, r0
  ee:	84 01       	movw	r16, r8
  f0:	88 01       	movw	r16, r16
  f2:	8c 01       	movw	r16, r24

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d1 e2       	ldi	r29, 0x21	; 33
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
 104:	13 e0       	ldi	r17, 0x03	; 3
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	ec eb       	ldi	r30, 0xBC	; 188
 10c:	fa e0       	ldi	r31, 0x0A	; 10
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a8 32       	cpi	r26, 0x28	; 40
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
 11e:	24 e0       	ldi	r18, 0x04	; 4
 120:	a8 e2       	ldi	r26, 0x28	; 40
 122:	b3 e0       	ldi	r27, 0x03	; 3
 124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
 126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
 128:	a0 3c       	cpi	r26, 0xC0	; 192
 12a:	b2 07       	cpc	r27, r18
 12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
 12e:	c7 d2       	rcall	.+1422   	; 0x6be <main>
 130:	c3 c4       	rjmp	.+2438   	; 0xab8 <_exit>

00000132 <__bad_interrupt>:
 132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <circularQueue_isEmpty>:
	
	head = head +1;
	
	return ret;
	
}
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <head>
 13a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <__data_end>
 13e:	29 13       	cpse	r18, r25
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <circularQueue_enqueue>:
 144:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <__data_end>
 148:	e9 2f       	mov	r30, r25
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	e1 5d       	subi	r30, 0xD1	; 209
 14e:	fc 4f       	sbci	r31, 0xFC	; 252
 150:	80 83       	st	Z, r24
 152:	9f 5f       	subi	r25, 0xFF	; 255
 154:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <__data_end>
 158:	08 95       	ret

0000015a <circularQueue_clearBuffer>:

void circularQueue_clearBuffer()
{
 15a:	ef e2       	ldi	r30, 0x2F	; 47
 15c:	f3 e0       	ldi	r31, 0x03	; 3
 15e:	8f eb       	ldi	r24, 0xBF	; 191
 160:	94 e0       	ldi	r25, 0x04	; 4
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
	{
		gBuffer[i]=0;
 162:	11 92       	st	Z+, r1
}

void circularQueue_clearBuffer()
{
	int i=0;
	for (i=0;i<MAX_BUFFER_LENGTH;i++)
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	e1 f7       	brne	.-8      	; 0x162 <circularQueue_clearBuffer+0x8>
	{
		gBuffer[i]=0;
	}
	tail = 0;
 16a:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <__data_end>
	head = 0;
 16e:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <head>
 172:	08 95       	ret

00000174 <circularQueue_searchSubStringInQueue>:
	
}
uint8_t circularQueue_searchSubStringInQueue(uint8_t* data)
{
	uint8_t ret = FALSE;
	if( strstr(gBuffer,data) == NULL)
 174:	bc 01       	movw	r22, r24
 176:	8f e2       	ldi	r24, 0x2F	; 47
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	49 d4       	rcall	.+2194   	; 0xa0e <strstr>
	else
	{
		ret = TRUE;
	}
	
	return ret;
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	89 2b       	or	r24, r25
 180:	09 f4       	brne	.+2      	; 0x184 <circularQueue_searchSubStringInQueue+0x10>
 182:	20 e0       	ldi	r18, 0x00	; 0
}
 184:	82 2f       	mov	r24, r18
 186:	08 95       	ret

00000188 <circularQueue_bufferPointer>:

uint8_t *circularQueue_bufferPointer()
{
	return gBuffer;
 188:	8f e2       	ldi	r24, 0x2F	; 47
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	08 95       	ret

0000018e <ESP_close_TCP>:
            UART_string_tx(command);
        }

    circularQueue_clearBuffer();
    _delay_ms(1000);
}
 18e:	e5 df       	rcall	.-54     	; 0x15a <circularQueue_clearBuffer>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	c9 d3       	rcall	.+1938   	; 0x928 <UART_string_tx>
 196:	ce df       	rcall	.-100    	; 0x134 <circularQueue_isEmpty>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	e9 f3       	breq	.-6      	; 0x196 <ESP_close_TCP+0x8>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	80 e7       	ldi	r24, 0x70	; 112
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <ESP_close_TCP+0x14>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <ESP_close_TCP+0x1e>
 1ac:	00 00       	nop
 1ae:	d5 cf       	rjmp	.-86     	; 0x15a <circularQueue_clearBuffer>
 1b0:	08 95       	ret

000001b2 <readFieldValue>:


}

uint8_t readFieldValue(uint8_t* data)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <readFieldValue+0x6>
 1b8:	1f 92       	push	r1
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	dc 01       	movw	r26, r24
	int i = 0;
	uint8_t count=0;
	uint8_t buffer[5]={'1','5','\0'};
 1c2:	9e 01       	movw	r18, r28
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	f9 01       	movw	r30, r18
 1cc:	11 92       	st	Z+, r1
 1ce:	8a 95       	dec	r24
 1d0:	e9 f7       	brne	.-6      	; 0x1cc <readFieldValue+0x1a>
 1d2:	81 e3       	ldi	r24, 0x31	; 49
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	85 e3       	ldi	r24, 0x35	; 53
 1d8:	8a 83       	std	Y+2, r24	; 0x02
 1da:	ad 01       	movw	r20, r26
 1dc:	49 5f       	subi	r20, 0xF9	; 249
 1de:	5f 4f       	sbci	r21, 0xFF	; 255
}

uint8_t readFieldValue(uint8_t* data)
{
	int i = 0;
	uint8_t count=0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t buffer[5]={'1','5','\0'};
	uint8_t ret;
	for(i=7;i<strlen(data);i++)
 1e2:	27 e0       	ldi	r18, 0x07	; 7
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	1b c0       	rjmp	.+54     	; 0x21e <readFieldValue+0x6c>
	{
		if(data[i]>='0' && data[i]<='9')
 1e8:	fa 01       	movw	r30, r20
 1ea:	91 91       	ld	r25, Z+
 1ec:	af 01       	movw	r20, r30
 1ee:	60 ed       	ldi	r22, 0xD0	; 208
 1f0:	69 0f       	add	r22, r25
 1f2:	6a 30       	cpi	r22, 0x0A	; 10
 1f4:	80 f4       	brcc	.+32     	; 0x216 <readFieldValue+0x64>
		{
			
			buffer[count] = data[i];
 1f6:	e1 e0       	ldi	r30, 0x01	; 1
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ec 0f       	add	r30, r28
 1fc:	fd 1f       	adc	r31, r29
 1fe:	e8 0f       	add	r30, r24
 200:	f1 1d       	adc	r31, r1
 202:	90 83       	st	Z, r25
			count++;
 204:	8f 5f       	subi	r24, 0xFF	; 255
			buffer[count]='\0';
 206:	e1 e0       	ldi	r30, 0x01	; 1
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	e8 0f       	add	r30, r24
 210:	f1 1d       	adc	r31, r1
 212:	10 82       	st	Z, r1
 214:	02 c0       	rjmp	.+4      	; 0x21a <readFieldValue+0x68>
		}

		else if (data[i]==',')
 216:	9c 32       	cpi	r25, 0x2C	; 44
 218:	61 f0       	breq	.+24     	; 0x232 <readFieldValue+0x80>
{
	int i = 0;
	uint8_t count=0;
	uint8_t buffer[5]={'1','5','\0'};
	uint8_t ret;
	for(i=7;i<strlen(data);i++)
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	fd 01       	movw	r30, r26
 220:	01 90       	ld	r0, Z+
 222:	00 20       	and	r0, r0
 224:	e9 f7       	brne	.-6      	; 0x220 <readFieldValue+0x6e>
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	ea 1b       	sub	r30, r26
 22a:	fb 0b       	sbc	r31, r27
 22c:	2e 17       	cp	r18, r30
 22e:	3f 07       	cpc	r19, r31
 230:	d8 f2       	brcs	.-74     	; 0x1e8 <readFieldValue+0x36>
		{
			break;
		}
	}

	ret = atoi(buffer);
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	c3 d3       	rcall	.+1926   	; 0x9be <atoi>

	return ret;

 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <jasonParser>:
	circularQueue_clearBuffer();
	_delay_ms(1000);
}

uint8_t jasonParser(uint8_t* data, uint8_t numberOfFields, Json * Jdata)
{
 248:	bf 92       	push	r11
 24a:	cf 92       	push	r12
 24c:	df 92       	push	r13
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	2a 97       	sbiw	r28, 0x0a	; 10
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	7c 01       	movw	r14, r24
 26c:	b6 2e       	mov	r11, r22
 26e:	6a 01       	movw	r12, r20
	uint8_t ret=0;
	uint8_t i=0;
	uint8_t Field[10];
	uint8_t *splitedata;
	uint8_t splitRet;
	strcpy(Field,"field0");
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	e7 e9       	ldi	r30, 0x97	; 151
 274:	f2 e0       	ldi	r31, 0x02	; 2
 276:	de 01       	movw	r26, r28
 278:	11 96       	adiw	r26, 0x01	; 1
 27a:	01 90       	ld	r0, Z+
 27c:	0d 92       	st	X+, r0
 27e:	8a 95       	dec	r24
 280:	e1 f7       	brne	.-8      	; 0x27a <jasonParser+0x32>
	Field[5]='0'+i;
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	8e 83       	std	Y+6, r24	; 0x06

	if(strstr(data,"IPD") == 0)
 286:	6e e9       	ldi	r22, 0x9E	; 158
 288:	72 e0       	ldi	r23, 0x02	; 2
 28a:	c7 01       	movw	r24, r14
 28c:	c0 d3       	rcall	.+1920   	; 0xa0e <strstr>
 28e:	89 2b       	or	r24, r25
 290:	09 f4       	brne	.+2      	; 0x294 <jasonParser+0x4c>
 292:	4a c0       	rjmp	.+148    	; 0x328 <jasonParser+0xe0>

	}

	else
	{
		for(i=1;i<= numberOfFields; i++)
 294:	bb 20       	and	r11, r11
 296:	09 f4       	brne	.+2      	; 0x29a <jasonParser+0x52>
 298:	49 c0       	rjmp	.+146    	; 0x32c <jasonParser+0xe4>
 29a:	11 e0       	ldi	r17, 0x01	; 1
 29c:	00 e0       	ldi	r16, 0x00	; 0
		{
			strcpy(Field,"field");
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	e2 ea       	ldi	r30, 0xA2	; 162
 2a2:	f2 e0       	ldi	r31, 0x02	; 2
 2a4:	de 01       	movw	r26, r28
 2a6:	11 96       	adiw	r26, 0x01	; 1
 2a8:	01 90       	ld	r0, Z+
 2aa:	0d 92       	st	X+, r0
 2ac:	8a 95       	dec	r24
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <jasonParser+0x60>
			Field[5]='0'+i;
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	81 0f       	add	r24, r17
 2b4:	8e 83       	std	Y+6, r24	; 0x06
			splitedata = strstr(data,Field);
 2b6:	be 01       	movw	r22, r28
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	c7 01       	movw	r24, r14
 2be:	a7 d3       	rcall	.+1870   	; 0xa0e <strstr>

			if(splitedata!=0 )
 2c0:	00 97       	sbiw	r24, 0x00	; 0
			{
				splitRet = readFieldValue(splitedata);
 2c2:	69 f1       	breq	.+90     	; 0x31e <jasonParser+0xd6>
 2c4:	76 df       	rcall	.-276    	; 0x1b2 <readFieldValue>
 2c6:	28 2f       	mov	r18, r24
				
				switch(i)
 2c8:	81 2f       	mov	r24, r17
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	e8 30       	cpi	r30, 0x08	; 8
 2d2:	f1 05       	cpc	r31, r1
 2d4:	20 f5       	brcc	.+72     	; 0x31e <jasonParser+0xd6>
 2d6:	88 27       	eor	r24, r24
 2d8:	ee 58       	subi	r30, 0x8E	; 142
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	8f 4f       	sbci	r24, 0xFF	; 255
 2de:	67 c3       	rjmp	.+1742   	; 0x9ae <__tablejump2__>
				{
					case 1:Jdata->field1=splitRet;ret++;break;
 2e0:	f6 01       	movw	r30, r12
 2e2:	21 83       	std	Z+1, r18	; 0x01
 2e4:	0f 5f       	subi	r16, 0xFF	; 255
 2e6:	1b c0       	rjmp	.+54     	; 0x31e <jasonParser+0xd6>
					case 2:Jdata->field2=splitRet;ret++;break;
 2e8:	f6 01       	movw	r30, r12
 2ea:	22 83       	std	Z+2, r18	; 0x02
 2ec:	0f 5f       	subi	r16, 0xFF	; 255
 2ee:	17 c0       	rjmp	.+46     	; 0x31e <jasonParser+0xd6>
					case 3:Jdata->field3=splitRet;ret++;break;
 2f0:	f6 01       	movw	r30, r12
 2f2:	23 83       	std	Z+3, r18	; 0x03
 2f4:	0f 5f       	subi	r16, 0xFF	; 255
 2f6:	13 c0       	rjmp	.+38     	; 0x31e <jasonParser+0xd6>
					case 4:Jdata->field4=splitRet;ret++;break;
 2f8:	f6 01       	movw	r30, r12
 2fa:	24 83       	std	Z+4, r18	; 0x04
 2fc:	0f 5f       	subi	r16, 0xFF	; 255
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <jasonParser+0xd6>
					case 5:Jdata->field5=splitRet;ret++;break;
 300:	f6 01       	movw	r30, r12
 302:	25 83       	std	Z+5, r18	; 0x05
 304:	0f 5f       	subi	r16, 0xFF	; 255
 306:	0b c0       	rjmp	.+22     	; 0x31e <jasonParser+0xd6>
					case 6:Jdata->field6=splitRet;ret++;break;
 308:	f6 01       	movw	r30, r12
 30a:	26 83       	std	Z+6, r18	; 0x06
 30c:	0f 5f       	subi	r16, 0xFF	; 255
 30e:	07 c0       	rjmp	.+14     	; 0x31e <jasonParser+0xd6>
					case 7:Jdata->field7=splitRet;ret++;break;
 310:	f6 01       	movw	r30, r12
 312:	27 83       	std	Z+7, r18	; 0x07
 314:	0f 5f       	subi	r16, 0xFF	; 255
 316:	03 c0       	rjmp	.+6      	; 0x31e <jasonParser+0xd6>
					case 8:Jdata->field8=splitRet;ret++;break;
 318:	f6 01       	movw	r30, r12
 31a:	20 87       	std	Z+8, r18	; 0x08
 31c:	0f 5f       	subi	r16, 0xFF	; 255

	}

	else
	{
		for(i=1;i<= numberOfFields; i++)
 31e:	1f 5f       	subi	r17, 0xFF	; 255
 320:	b1 16       	cp	r11, r17
 322:	08 f0       	brcs	.+2      	; 0x326 <jasonParser+0xde>
 324:	bc cf       	rjmp	.-136    	; 0x29e <jasonParser+0x56>
 326:	03 c0       	rjmp	.+6      	; 0x32e <jasonParser+0xe6>
	Field[5]='0'+i;

	if(strstr(data,"IPD") == 0)
	{

		ret = 0;
 328:	00 e0       	ldi	r16, 0x00	; 0
 32a:	01 c0       	rjmp	.+2      	; 0x32e <jasonParser+0xe6>

	}

	else
	{
		for(i=1;i<= numberOfFields; i++)
 32c:	00 e0       	ldi	r16, 0x00	; 0


	return ret;


}
 32e:	80 2f       	mov	r24, r16
 330:	2a 96       	adiw	r28, 0x0a	; 10
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	bf 90       	pop	r11
 34e:	08 95       	ret

00000350 <ESP_Read>:
}


//https://api.thingspeak.com/channels/872668/feeds/last.json?api_key=HFCKEVJ6RK7YOMS3
void ESP_Read(Json* Jdata, uint8_t* channelID,uint8_t* api_key,uint8_t numberOfFields)
{
 350:	8f 92       	push	r8
 352:	9f 92       	push	r9
 354:	bf 92       	push	r11
 356:	cf 92       	push	r12
 358:	df 92       	push	r13
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	cb 5e       	subi	r28, 0xEB	; 235
 36c:	d1 09       	sbc	r29, r1
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	6c 01       	movw	r12, r24
 37a:	4b 01       	movw	r8, r22
 37c:	7a 01       	movw	r14, r20
 37e:	b2 2e       	mov	r11, r18
	uint8_t command[200];
	uint8_t command_length[30];
	uint8_t buffer[5];
	uint8_t *data;

	ESP_close_TCP();// CLOSE ANY TCP CONNECTION
 380:	06 df       	rcall	.-500    	; 0x18e <ESP_close_TCP>

	strcpy(command,"GET https://api.thingspeak.com/channels/");
 382:	89 e2       	ldi	r24, 0x29	; 41
 384:	e8 ea       	ldi	r30, 0xA8	; 168
 386:	f2 e0       	ldi	r31, 0x02	; 2
 388:	8e 01       	movw	r16, r28
 38a:	0f 5f       	subi	r16, 0xFF	; 255
 38c:	1f 4f       	sbci	r17, 0xFF	; 255
 38e:	d8 01       	movw	r26, r16
 390:	01 90       	ld	r0, Z+
 392:	0d 92       	st	X+, r0
 394:	8a 95       	dec	r24
 396:	e1 f7       	brne	.-8      	; 0x390 <ESP_Read+0x40>
	strcat(command,channelID);
 398:	b4 01       	movw	r22, r8
 39a:	c8 01       	movw	r24, r16
 39c:	2d d3       	rcall	.+1626   	; 0x9f8 <strcat>
	strcat(command,"/feeds/last.json?api_key=");
 39e:	d8 01       	movw	r26, r16
 3a0:	0d 90       	ld	r0, X+
 3a2:	00 20       	and	r0, r0
 3a4:	e9 f7       	brne	.-6      	; 0x3a0 <ESP_Read+0x50>
 3a6:	11 97       	sbiw	r26, 0x01	; 1
 3a8:	8a e1       	ldi	r24, 0x1A	; 26
 3aa:	e1 ed       	ldi	r30, 0xD1	; 209
 3ac:	f2 e0       	ldi	r31, 0x02	; 2
 3ae:	01 90       	ld	r0, Z+
 3b0:	0d 92       	st	X+, r0
 3b2:	8a 95       	dec	r24
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <ESP_Read+0x5e>
	strcat(command,api_key);
 3b6:	b7 01       	movw	r22, r14
 3b8:	c8 01       	movw	r24, r16
 3ba:	1e d3       	rcall	.+1596   	; 0x9f8 <strcat>
	strcat(command,"\r\n");
 3bc:	f8 01       	movw	r30, r16
 3be:	01 90       	ld	r0, Z+
 3c0:	00 20       	and	r0, r0
 3c2:	e9 f7       	brne	.-6      	; 0x3be <ESP_Read+0x6e>
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	0f 2e       	mov	r0, r31
 3c8:	fd e0       	ldi	r31, 0x0D	; 13
 3ca:	ef 2e       	mov	r14, r31
 3cc:	fa e0       	ldi	r31, 0x0A	; 10
 3ce:	ff 2e       	mov	r15, r31
 3d0:	f0 2d       	mov	r31, r0
 3d2:	f1 82       	std	Z+1, r15	; 0x01
 3d4:	e0 82       	st	Z, r14
 3d6:	12 82       	std	Z+2, r1	; 0x02
	itoa(strlen(command),buffer,10);
 3d8:	f8 01       	movw	r30, r16
 3da:	01 90       	ld	r0, Z+
 3dc:	00 20       	and	r0, r0
 3de:	e9 f7       	brne	.-6      	; 0x3da <ESP_Read+0x8a>
 3e0:	cf 01       	movw	r24, r30
 3e2:	01 97       	sbiw	r24, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3e4:	4a e0       	ldi	r20, 0x0A	; 10
 3e6:	be 01       	movw	r22, r28
 3e8:	69 51       	subi	r22, 0x19	; 25
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	80 1b       	sub	r24, r16
 3ee:	91 0b       	sbc	r25, r17
 3f0:	28 d3       	rcall	.+1616   	; 0xa42 <__itoa_ncheck>
	strcpy(command_length,MESSAGE_LENGTH);
 3f2:	08 53       	subi	r16, 0x38	; 56
 3f4:	1f 4f       	sbci	r17, 0xFF	; 255
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	ed e3       	ldi	r30, 0x3D	; 61
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	d8 01       	movw	r26, r16
 3fe:	01 90       	ld	r0, Z+
 400:	0d 92       	st	X+, r0
 402:	8a 95       	dec	r24
 404:	e1 f7       	brne	.-8      	; 0x3fe <ESP_Read+0xae>
	strcat(command_length,buffer);
 406:	be 01       	movw	r22, r28
 408:	69 51       	subi	r22, 0x19	; 25
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	c8 01       	movw	r24, r16
 40e:	f4 d2       	rcall	.+1512   	; 0x9f8 <strcat>
	strcat(command_length,"\r\n");
 410:	f8 01       	movw	r30, r16
 412:	01 90       	ld	r0, Z+
 414:	00 20       	and	r0, r0
 416:	e9 f7       	brne	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	f1 82       	std	Z+1, r15	; 0x01

	circularQueue_clearBuffer();
 41c:	e0 82       	st	Z, r14
 41e:	12 82       	std	Z+2, r1	; 0x02
	UART_string_tx(TCP_THINGSPEAK);
 420:	9c de       	rcall	.-712    	; 0x15a <circularQueue_clearBuffer>
 422:	89 e4       	ldi	r24, 0x49	; 73
 424:	92 e0       	ldi	r25, 0x02	; 2
	while(circularQueue_isEmpty() == TRUE);
 426:	80 d2       	rcall	.+1280   	; 0x928 <UART_string_tx>
 428:	85 de       	rcall	.-758    	; 0x134 <circularQueue_isEmpty>
 42a:	81 30       	cpi	r24, 0x01	; 1
	while(circularQueue_searchSubStringInQueue("ERROR") == FALSE  && circularQueue_searchSubStringInQueue("OK") == FALSE);
 42c:	e9 f3       	breq	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42e:	82 e7       	ldi	r24, 0x72	; 114
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	a0 de       	rcall	.-704    	; 0x174 <circularQueue_searchSubStringInQueue>
 434:	81 11       	cpse	r24, r1
 436:	05 c0       	rjmp	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 438:	88 e7       	ldi	r24, 0x78	; 120
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	9b de       	rcall	.-714    	; 0x174 <circularQueue_searchSubStringInQueue>
 43e:	88 23       	and	r24, r24
	if(circularQueue_searchSubStringInQueue("ERROR") == TRUE)
 440:	b1 f3       	breq	.-20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 442:	82 e7       	ldi	r24, 0x72	; 114
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	96 de       	rcall	.-724    	; 0x174 <circularQueue_searchSubStringInQueue>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	59 f4       	brne	.+22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
		circularQueue_clearBuffer();
 44c:	86 de       	rcall	.-756    	; 0x15a <circularQueue_clearBuffer>
 44e:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	23 ed       	ldi	r18, 0xD3	; 211
 452:	80 e3       	ldi	r24, 0x30	; 48
 454:	f1 50       	subi	r31, 0x01	; 1
 456:	20 40       	sbci	r18, 0x00	; 0
 458:	80 40       	sbci	r24, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
 460:	6f c0       	rjmp	.+222    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 462:	9f ef       	ldi	r25, 0xFF	; 255
 464:	e9 ef       	ldi	r30, 0xF9	; 249
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	91 50       	subi	r25, 0x01	; 1
 46a:	e0 40       	sbci	r30, 0x00	; 0
 46c:	f0 40       	sbci	r31, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		return;

	}

	_delay_ms(20);
	circularQueue_clearBuffer();
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
	UART_string_tx(command_length);
 474:	72 de       	rcall	.-796    	; 0x15a <circularQueue_clearBuffer>
 476:	ce 01       	movw	r24, r28
 478:	87 53       	subi	r24, 0x37	; 55
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
	while(circularQueue_isEmpty() == TRUE);
 47c:	55 d2       	rcall	.+1194   	; 0x928 <UART_string_tx>
 47e:	5a de       	rcall	.-844    	; 0x134 <circularQueue_isEmpty>
 480:	81 30       	cpi	r24, 0x01	; 1
	while(circularQueue_searchSubStringInQueue("ERROR") == FALSE && circularQueue_searchSubStringInQueue("OK") == FALSE && circularQueue_searchSubStringInQueue("FAIL") == FALSE);
 482:	e9 f3       	breq	.-6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 484:	82 e7       	ldi	r24, 0x72	; 114
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	75 de       	rcall	.-790    	; 0x174 <circularQueue_searchSubStringInQueue>
 48a:	81 11       	cpse	r24, r1
 48c:	0a c0       	rjmp	.+20     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 48e:	88 e7       	ldi	r24, 0x78	; 120
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	70 de       	rcall	.-800    	; 0x174 <circularQueue_searchSubStringInQueue>
 494:	81 11       	cpse	r24, r1
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 498:	8b e7       	ldi	r24, 0x7B	; 123
 49a:	92 e0       	ldi	r25, 0x02	; 2
 49c:	6b de       	rcall	.-810    	; 0x174 <circularQueue_searchSubStringInQueue>
 49e:	88 23       	and	r24, r24

	if(circularQueue_searchSubStringInQueue("ERROR") == TRUE || circularQueue_searchSubStringInQueue("FAIL") == TRUE)
 4a0:	89 f3       	breq	.-30     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 4a2:	82 e7       	ldi	r24, 0x72	; 114
 4a4:	92 e0       	ldi	r25, 0x02	; 2
 4a6:	66 de       	rcall	.-820    	; 0x174 <circularQueue_searchSubStringInQueue>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	29 f0       	breq	.+10     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ac:	8b e7       	ldi	r24, 0x7B	; 123
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	61 de       	rcall	.-830    	; 0x174 <circularQueue_searchSubStringInQueue>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	59 f4       	brne	.+22     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4b6:	51 de       	rcall	.-862    	; 0x15a <circularQueue_clearBuffer>
	{	
		circularQueue_clearBuffer();
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	83 ed       	ldi	r24, 0xD3	; 211
 4bc:	90 e3       	ldi	r25, 0x30	; 48
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c8:	00 00       	nop
 4ca:	3a c0       	rjmp	.+116    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 4cc:	ef ef       	ldi	r30, 0xFF	; 255
 4ce:	f9 ef       	ldi	r31, 0xF9	; 249
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	e1 50       	subi	r30, 0x01	; 1
 4d4:	f0 40       	sbci	r31, 0x00	; 0
 4d6:	20 40       	sbci	r18, 0x00	; 0
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		return;

	}

	_delay_ms(20);
	if (circularQueue_searchSubStringInQueue("OK") == TRUE)
 4dc:	00 00       	nop
 4de:	88 e7       	ldi	r24, 0x78	; 120
 4e0:	92 e0       	ldi	r25, 0x02	; 2
 4e2:	48 de       	rcall	.-880    	; 0x174 <circularQueue_searchSubStringInQueue>
	{
		while(circularQueue_searchSubStringInQueue(">") == FALSE);
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	11 f5       	brne	.+68     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	92 e0       	ldi	r25, 0x02	; 2
 4ec:	43 de       	rcall	.-890    	; 0x174 <circularQueue_searchSubStringInQueue>
 4ee:	88 23       	and	r24, r24
		circularQueue_clearBuffer();
 4f0:	d9 f3       	breq	.-10     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4f2:	33 de       	rcall	.-922    	; 0x15a <circularQueue_clearBuffer>
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	90 e7       	ldi	r25, 0x70	; 112
 4f8:	e2 e0       	ldi	r30, 0x02	; 2
 4fa:	81 50       	subi	r24, 0x01	; 1
 4fc:	90 40       	sbci	r25, 0x00	; 0
		_delay_ms(50);
		
		UART_string_tx(command);
 4fe:	e0 40       	sbci	r30, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 504:	00 00       	nop
		while(circularQueue_searchSubStringInQueue("CLOSED") == FALSE);
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	0e d2       	rcall	.+1052   	; 0x928 <UART_string_tx>
 50c:	8b ee       	ldi	r24, 0xEB	; 235
 50e:	92 e0       	ldi	r25, 0x02	; 2
 510:	31 de       	rcall	.-926    	; 0x174 <circularQueue_searchSubStringInQueue>
 512:	88 23       	and	r24, r24
 514:	d9 f3       	breq	.-10     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 516:	8f e1       	ldi	r24, 0x1F	; 31
 518:	9e e4       	ldi	r25, 0x4E	; 78
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		_delay_ms(5);
		data=circularQueue_bufferPointer();
 51e:	00 c0       	rjmp	.+0      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 520:	00 00       	nop
		jasonParser(data,numberOfFields,Jdata);
 522:	32 de       	rcall	.-924    	; 0x188 <circularQueue_bufferPointer>
 524:	a6 01       	movw	r20, r12
 526:	6b 2d       	mov	r22, r11
 528:	8f de       	rcall	.-738    	; 0x248 <jasonParser>
		circularQueue_clearBuffer();
 52a:	17 de       	rcall	.-978    	; 0x15a <circularQueue_clearBuffer>
 52c:	16 de       	rcall	.-980    	; 0x15a <circularQueue_clearBuffer>
	}

	circularQueue_clearBuffer();
 52e:	9f ef       	ldi	r25, 0xFF	; 255
 530:	e3 ed       	ldi	r30, 0xD3	; 211
 532:	f0 e3       	ldi	r31, 0x30	; 48
 534:	91 50       	subi	r25, 0x01	; 1
 536:	e0 40       	sbci	r30, 0x00	; 0
 538:	f0 40       	sbci	r31, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53e:	00 00       	nop
 540:	c5 51       	subi	r28, 0x15	; 21
 542:	df 4f       	sbci	r29, 0xFF	; 255
	_delay_ms(1000);
}
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	bf 90       	pop	r11
 560:	9f 90       	pop	r9
 562:	8f 90       	pop	r8
 564:	08 95       	ret

00000566 <relayModuleControl_Sol>:
        }

}
#endif
void relayModuleControl_Sol(Json * Jdata)
{
 566:	fc 01       	movw	r30, r24
    if(Jdata->field1 == 0)
 568:	81 81       	ldd	r24, Z+1	; 0x01
 56a:	81 11       	cpse	r24, r1
 56c:	02 c0       	rjmp	.+4      	; 0x572 <relayModuleControl_Sol+0xc>
        {
            SOL_1_OFF;
 56e:	44 9a       	sbi	0x08, 4	; 8
 570:	01 c0       	rjmp	.+2      	; 0x574 <relayModuleControl_Sol+0xe>
        }
    else
        {
            SOL_1_ON
 572:	44 98       	cbi	0x08, 4	; 8
        }


    if(Jdata->field2 == 0)
 574:	82 81       	ldd	r24, Z+2	; 0x02
 576:	81 11       	cpse	r24, r1
 578:	02 c0       	rjmp	.+4      	; 0x57e <relayModuleControl_Sol+0x18>
        {
            SOL_2_OFF;
 57a:	45 9a       	sbi	0x08, 5	; 8
 57c:	01 c0       	rjmp	.+2      	; 0x580 <relayModuleControl_Sol+0x1a>
        }
    else
        {
            SOL_2_ON
 57e:	45 98       	cbi	0x08, 5	; 8
        }
    if(Jdata->field3 == 0)
 580:	83 81       	ldd	r24, Z+3	; 0x03
 582:	81 11       	cpse	r24, r1
 584:	02 c0       	rjmp	.+4      	; 0x58a <relayModuleControl_Sol+0x24>
        {
            SOL_3_OFF;
 586:	46 9a       	sbi	0x08, 6	; 8
 588:	01 c0       	rjmp	.+2      	; 0x58c <relayModuleControl_Sol+0x26>
        }
    else
        {
            SOL_3_ON
 58a:	46 98       	cbi	0x08, 6	; 8
        }
    if(Jdata->field4 == 0)
 58c:	84 81       	ldd	r24, Z+4	; 0x04
 58e:	81 11       	cpse	r24, r1
 590:	02 c0       	rjmp	.+4      	; 0x596 <relayModuleControl_Sol+0x30>
        {
            SOL_4_OFF;
 592:	47 9a       	sbi	0x08, 7	; 8
 594:	08 95       	ret
        }
    else
        {
            SOL_4_ON
 596:	47 98       	cbi	0x08, 7	; 8
 598:	08 95       	ret

0000059a <ModuleControl_Med>:
}

extern volatile uint16_t number_of_rotation;
volatile uint8_t Medicine;
void ModuleControl_Med(struct Json * Jdata)
{
 59a:	fc 01       	movw	r30, r24
    static uint8_t Med_1_State=0;
    static uint8_t Med_2_State=0;
    int8_t data;

    if(Jdata->field7 != Med_1_State)
 59c:	87 81       	ldd	r24, Z+7	; 0x07
 59e:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <Med_1_State.2119>
 5a2:	89 17       	cp	r24, r25
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <ModuleControl_Med+0xe>
 5a6:	42 c0       	rjmp	.+132    	; 0x62c <ModuleControl_Med+0x92>
        {
            Med_1_State = Jdata->field7;
 5a8:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <Med_1_State.2119>
            data = (int8_t)(Jdata->field5);
 5ac:	25 81       	ldd	r18, Z+5	; 0x05
            if(data < 0)
 5ae:	22 23       	and	r18, r18
 5b0:	fc f4       	brge	.+62     	; 0x5f0 <ModuleControl_Med+0x56>
                {
                    MED_1_ACW;
 5b2:	42 9a       	sbi	0x08, 2	; 8
                    number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 5b4:	02 2e       	mov	r0, r18
 5b6:	00 0c       	add	r0, r0
 5b8:	33 0b       	sbc	r19, r19
 5ba:	33 23       	and	r19, r19
 5bc:	1c f4       	brge	.+6      	; 0x5c4 <ModuleControl_Med+0x2a>
 5be:	31 95       	neg	r19
 5c0:	21 95       	neg	r18
 5c2:	31 09       	sbc	r19, r1
 5c4:	88 ec       	ldi	r24, 0xC8	; 200
 5c6:	28 9f       	mul	r18, r24
 5c8:	90 01       	movw	r18, r0
 5ca:	11 24       	eor	r1, r1
 5cc:	30 93 2d 03 	sts	0x032D, r19	; 0x80032d <number_of_rotation+0x1>
 5d0:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <number_of_rotation>
                    Medicine=1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Medicine>
                    A4899_EN;
 5da:	ab e0       	ldi	r26, 0x0B	; 11
 5dc:	b1 e0       	ldi	r27, 0x01	; 1
 5de:	8c 91       	ld	r24, X
 5e0:	8f 77       	andi	r24, 0x7F	; 127
 5e2:	8c 93       	st	X, r24
                    TIMER0_INTER_ENABLE;
 5e4:	ae e6       	ldi	r26, 0x6E	; 110
 5e6:	b0 e0       	ldi	r27, 0x00	; 0
 5e8:	8c 91       	ld	r24, X
 5ea:	82 60       	ori	r24, 0x02	; 2
 5ec:	8c 93       	st	X, r24
 5ee:	1e c0       	rjmp	.+60     	; 0x62c <ModuleControl_Med+0x92>
                }

            else
                {
                    MED_1_CW;
 5f0:	42 98       	cbi	0x08, 2	; 8
                    number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 5f2:	02 2e       	mov	r0, r18
 5f4:	00 0c       	add	r0, r0
 5f6:	33 0b       	sbc	r19, r19
 5f8:	33 23       	and	r19, r19
 5fa:	1c f4       	brge	.+6      	; 0x602 <ModuleControl_Med+0x68>
 5fc:	31 95       	neg	r19
 5fe:	21 95       	neg	r18
 600:	31 09       	sbc	r19, r1
 602:	88 ec       	ldi	r24, 0xC8	; 200
 604:	28 9f       	mul	r18, r24
 606:	90 01       	movw	r18, r0
 608:	11 24       	eor	r1, r1
 60a:	30 93 2d 03 	sts	0x032D, r19	; 0x80032d <number_of_rotation+0x1>
 60e:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <number_of_rotation>
                    Medicine=1;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Medicine>
                    A4899_EN;
 618:	ab e0       	ldi	r26, 0x0B	; 11
 61a:	b1 e0       	ldi	r27, 0x01	; 1
 61c:	8c 91       	ld	r24, X
 61e:	8f 77       	andi	r24, 0x7F	; 127
 620:	8c 93       	st	X, r24
                    TIMER0_INTER_ENABLE;
 622:	ae e6       	ldi	r26, 0x6E	; 110
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	8c 91       	ld	r24, X
 628:	82 60       	ori	r24, 0x02	; 2
 62a:	8c 93       	st	X, r24
        {

        }


    if(Jdata->field8 != Med_2_State)
 62c:	80 85       	ldd	r24, Z+8	; 0x08
 62e:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <Med_2_State.2120>
 632:	89 17       	cp	r24, r25
 634:	09 f4       	brne	.+2      	; 0x638 <ModuleControl_Med+0x9e>
 636:	42 c0       	rjmp	.+132    	; 0x6bc <ModuleControl_Med+0x122>
        {
            Med_2_State = Jdata->field8;
 638:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <Med_2_State.2120>
            data = (int8_t)(Jdata->field6);
 63c:	86 81       	ldd	r24, Z+6	; 0x06
            if(data < 0)
 63e:	88 23       	and	r24, r24
 640:	fc f4       	brge	.+62     	; 0x680 <ModuleControl_Med+0xe6>
                {
                    MED_2_ACW;
 642:	43 9a       	sbi	0x08, 3	; 8
                    number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 644:	08 2e       	mov	r0, r24
 646:	00 0c       	add	r0, r0
 648:	99 0b       	sbc	r25, r25
 64a:	99 23       	and	r25, r25
 64c:	1c f4       	brge	.+6      	; 0x654 <ModuleControl_Med+0xba>
 64e:	91 95       	neg	r25
 650:	81 95       	neg	r24
 652:	91 09       	sbc	r25, r1
 654:	28 ec       	ldi	r18, 0xC8	; 200
 656:	82 9f       	mul	r24, r18
 658:	c0 01       	movw	r24, r0
 65a:	11 24       	eor	r1, r1
 65c:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <number_of_rotation+0x1>
 660:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <number_of_rotation>
                    Medicine=2;
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Medicine>
                    A4899_EN;
 66a:	eb e0       	ldi	r30, 0x0B	; 11
 66c:	f1 e0       	ldi	r31, 0x01	; 1
 66e:	80 81       	ld	r24, Z
 670:	8f 77       	andi	r24, 0x7F	; 127
 672:	80 83       	st	Z, r24
                    TIMER0_INTER_ENABLE;
 674:	ee e6       	ldi	r30, 0x6E	; 110
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	82 60       	ori	r24, 0x02	; 2
 67c:	80 83       	st	Z, r24
 67e:	08 95       	ret
                }

            else
                {
                    MED_2_CW;
 680:	43 98       	cbi	0x08, 3	; 8
                    number_of_rotation = (uint16_t)((DEGREE_360)*(uint8_t)abs(data));
 682:	08 2e       	mov	r0, r24
 684:	00 0c       	add	r0, r0
 686:	99 0b       	sbc	r25, r25
 688:	99 23       	and	r25, r25
 68a:	1c f4       	brge	.+6      	; 0x692 <ModuleControl_Med+0xf8>
 68c:	91 95       	neg	r25
 68e:	81 95       	neg	r24
 690:	91 09       	sbc	r25, r1
 692:	28 ec       	ldi	r18, 0xC8	; 200
 694:	82 9f       	mul	r24, r18
 696:	c0 01       	movw	r24, r0
 698:	11 24       	eor	r1, r1
 69a:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <number_of_rotation+0x1>
 69e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <number_of_rotation>
                    Medicine=2;
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <Medicine>
                    A4899_EN;
 6a8:	eb e0       	ldi	r30, 0x0B	; 11
 6aa:	f1 e0       	ldi	r31, 0x01	; 1
 6ac:	80 81       	ld	r24, Z
 6ae:	8f 77       	andi	r24, 0x7F	; 127
 6b0:	80 83       	st	Z, r24
                    TIMER0_INTER_ENABLE;
 6b2:	ee e6       	ldi	r30, 0x6E	; 110
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	82 60       	ori	r24, 0x02	; 2
 6ba:	80 83       	st	Z, r24
 6bc:	08 95       	ret

000006be <main>:

extern volatile unsigned char oneSec;

int main(void)
{
    DDRB_CONFIG;
 6be:	8f e1       	ldi	r24, 0x1F	; 31
 6c0:	84 b9       	out	0x04, r24	; 4
    PORTB_COMFIG;
 6c2:	15 b8       	out	0x05, r1	; 5
    DDRC_CONFIG;
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	87 b9       	out	0x07, r24	; 7
    PORTC_COMFIG;
 6c8:	18 b8       	out	0x08, r1	; 8
    timer1_init();
 6ca:	77 d0       	rcall	.+238    	; 0x7ba <timer1_init>
    timer0_init();
 6cc:	87 d0       	rcall	.+270    	; 0x7dc <timer0_init>
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
    uint8_t sec_10 = 0u;


    UART_int();
 6ce:	14 d1       	rcall	.+552    	; 0x8f8 <UART_int>
 6d0:	8f e1       	ldi	r24, 0x1F	; 31
 6d2:	9e e4       	ldi	r25, 0x4E	; 78
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <main+0x16>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0x1c>
 6da:	00 00       	nop




    //sei();
    cli();
 6dc:	f8 94       	cli
    PORTB = 0u;
 6de:	15 b8       	out	0x05, r1	; 5
    usound_init();
 6e0:	63 d1       	rcall	.+710    	; 0x9a8 <usound_init>
 6e2:	9f ef       	ldi	r25, 0xFF	; 255
 6e4:	23 ed       	ldi	r18, 0xD3	; 211
 6e6:	80 e3       	ldi	r24, 0x30	; 48
 6e8:	91 50       	subi	r25, 0x01	; 1
 6ea:	20 40       	sbci	r18, 0x00	; 0
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <main+0x2a>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <main+0x34>
 6f2:	00 00       	nop
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	23 ed       	ldi	r18, 0xD3	; 211
 6f8:	80 e3       	ldi	r24, 0x30	; 48
 6fa:	91 50       	subi	r25, 0x01	; 1
 6fc:	20 40       	sbci	r18, 0x00	; 0
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <main+0x3c>
 702:	00 c0       	rjmp	.+0      	; 0x704 <main+0x46>
 704:	00 00       	nop
 706:	9f ef       	ldi	r25, 0xFF	; 255
 708:	23 ed       	ldi	r18, 0xD3	; 211
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	20 40       	sbci	r18, 0x00	; 0
 710:	80 40       	sbci	r24, 0x00	; 0
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x4e>
 714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x58>
 716:	00 00       	nop
 718:	9f ef       	ldi	r25, 0xFF	; 255
 71a:	23 ed       	ldi	r18, 0xD3	; 211
 71c:	80 e3       	ldi	r24, 0x30	; 48
 71e:	91 50       	subi	r25, 0x01	; 1
 720:	20 40       	sbci	r18, 0x00	; 0
 722:	80 40       	sbci	r24, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <main+0x60>
 726:	00 c0       	rjmp	.+0      	; 0x728 <main+0x6a>
 728:	00 00       	nop
 72a:	9f ef       	ldi	r25, 0xFF	; 255
 72c:	23 ed       	ldi	r18, 0xD3	; 211
 72e:	80 e3       	ldi	r24, 0x30	; 48
 730:	91 50       	subi	r25, 0x01	; 1
 732:	20 40       	sbci	r18, 0x00	; 0
 734:	80 40       	sbci	r24, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <main+0x72>
 738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x7c>
 73a:	00 00       	nop
 73c:	c0 91 2e 03 	lds	r28, 0x032E	; 0x80032e <oneSec>
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    _delay_ms(1000);
    oldTime = oneSec;
 740:	78 94       	sei
    //wdt_enable(WDTO_8S);
    //wdt_reset();
    sei();
 742:	10 e0       	ldi	r17, 0x00	; 0
    timer0_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
    uint8_t sec_10 = 0u;
 744:	90 e0       	ldi	r25, 0x00	; 0
    timer1_init();
    timer0_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
    unsigned char sec_3 = 0u;
    uint8_t sec_4 = 0u;
 746:	d0 e0       	ldi	r29, 0x00	; 0
    DDRC_CONFIG;
    PORTC_COMFIG;
    timer1_init();
    timer0_init();
    unsigned char oldTime = 0;
    unsigned char sec_5 = 0;
 748:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <oneSec>
                            //	_delay_ms(20);
                        }
                }*/
            //  task_PERIODIC();

            if(oneSec != oldTime)
 74c:	8c 17       	cp	r24, r28
 74e:	e1 f3       	breq	.-8      	; 0x748 <main+0x8a>
 750:	c0 91 2e 03 	lds	r28, 0x032E	; 0x80032e <oneSec>
                {
                    oldTime = oneSec;
 754:	d5 30       	cpi	r29, 0x05	; 5




                    if(sec_5 == 5u)
 756:	11 f0       	breq	.+4      	; 0x75c <main+0x9e>
 758:	df 5f       	subi	r29, 0xFF	; 255
                           //    task_5sec();
                            sec_5 = 0;
                        }
                    else
                        {
                            sec_5++;
 75a:	01 c0       	rjmp	.+2      	; 0x75e <main+0xa0>
 75c:	d0 e0       	ldi	r29, 0x00	; 0


                    if(sec_5 == 5u)
                        {
                           //    task_5sec();
                            sec_5 = 0;
 75e:	1a 30       	cpi	r17, 0x0A	; 10
                    else
                        {
                            sec_5++;
                        }

                    if(sec_10 == 10u)
 760:	11 f0       	breq	.+4      	; 0x766 <main+0xa8>
 762:	1f 5f       	subi	r17, 0xFF	; 255
                        }

                    else
                        {

                            sec_10++;
 764:	01 c0       	rjmp	.+2      	; 0x768 <main+0xaa>

                    if(sec_10 == 10u)

                        {
                            //   task_10sec();
                            sec_10=0u;
 766:	10 e0       	ldi	r17, 0x00	; 0

                        }



                    if(sec_4 == 4u)
 768:	94 30       	cpi	r25, 0x04	; 4
 76a:	19 f4       	brne	.+6      	; 0x772 <main+0xb4>
                        {
                               task_4Sec();
 76c:	04 d0       	rcall	.+8      	; 0x776 <task_4Sec>
 76e:	90 e0       	ldi	r25, 0x00	; 0
                            sec_4 = 0;
 770:	eb cf       	rjmp	.-42     	; 0x748 <main+0x8a>
 772:	9f 5f       	subi	r25, 0xFF	; 255
                        }
                    else
                        {
                            sec_4++;
 774:	e9 cf       	rjmp	.-46     	; 0x748 <main+0x8a>

00000776 <task_4Sec>:
 776:	cf 93       	push	r28


    
}
void task_4Sec(void)
{
 778:	df 93       	push	r29
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	29 97       	sbiw	r28, 0x09	; 9
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	f8 94       	cli
 784:	de bf       	out	0x3e, r29	; 62
 786:	0f be       	out	0x3f, r0	; 63
 788:	cd bf       	out	0x3d, r28	; 61
   
    uint8_t i = 0;
	Json Jdata;

			ESP_Read(&Jdata,SELONOID_CHANNEL_ID,SELONOID_READ_APIKEY,8);
 78a:	28 e0       	ldi	r18, 0x08	; 8
 78c:	43 e0       	ldi	r20, 0x03	; 3
 78e:	53 e0       	ldi	r21, 0x03	; 3
 790:	64 e1       	ldi	r22, 0x14	; 20
 792:	73 e0       	ldi	r23, 0x03	; 3
 794:	ce 01       	movw	r24, r28
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	db dd       	rcall	.-1098   	; 0x350 <ESP_Read>
			//change to "&Jdata" instead of "Jdata"
            relayModuleControl_Sol(&Jdata);
 79a:	ce 01       	movw	r24, r28
 79c:	01 96       	adiw	r24, 0x01	; 1
 79e:	e3 de       	rcall	.-570    	; 0x566 <relayModuleControl_Sol>
            ModuleControl_Med(&Jdata);
 7a0:	ce 01       	movw	r24, r28
 7a2:	01 96       	adiw	r24, 0x01	; 1
 7a4:	fa de       	rcall	.-524    	; 0x59a <ModuleControl_Med>
			
		//	ESP_Read(&Jdata,FAN_VENTILATION_CHANNEL_ID,FAN_VENTILATION_READ_APIKEY,8);
            sei();
 7a6:	78 94       	sei

        

}
 7a8:	29 96       	adiw	r28, 0x09	; 9
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
 7ba:	e1 e8       	ldi	r30, 0x81	; 129
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	8d 60       	ori	r24, 0x0D	; 13
 7c2:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
 7c4:	ef e6       	ldi	r30, 0x6F	; 111
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	83 60       	ori	r24, 0x03	; 3
 7cc:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
 7ce:	8d e3       	ldi	r24, 0x3D	; 61
 7d0:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
 7d4:	89 e0       	ldi	r24, 0x09	; 9
 7d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 7da:	08 95       	ret

000007dc <timer0_init>:
}

void timer0_init(void)
{

	TCCR0A |= (1<<WGM01);
 7dc:	84 b5       	in	r24, 0x24	; 36
 7de:	82 60       	ori	r24, 0x02	; 2
 7e0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);// no Prescaler
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 125;
 7e6:	8d e7       	ldi	r24, 0x7D	; 125
 7e8:	87 bd       	out	0x27, r24	; 39
 7ea:	08 95       	ret

000007ec <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 7ec:	1f 92       	push	r1
 7ee:	0f 92       	push	r0
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	0f 92       	push	r0
 7f4:	11 24       	eor	r1, r1
 7f6:	8f 93       	push	r24
	
	
	oneSec ++;
 7f8:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <oneSec>
 7fc:	8f 5f       	subi	r24, 0xFF	; 255
 7fe:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <oneSec>
	
	
}
 802:	8f 91       	pop	r24
 804:	0f 90       	pop	r0
 806:	0f be       	out	0x3f, r0	; 63
 808:	0f 90       	pop	r0
 80a:	1f 90       	pop	r1
 80c:	18 95       	reti

0000080e <__vector_21>:

ISR (TIMER0_COMPA_vect)    // Timer0 ISR
{
 80e:	1f 92       	push	r1
 810:	0f 92       	push	r0
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	0f 92       	push	r0
 816:	11 24       	eor	r1, r1
 818:	0b b6       	in	r0, 0x3b	; 59
 81a:	0f 92       	push	r0
 81c:	2f 93       	push	r18
 81e:	3f 93       	push	r19
 820:	4f 93       	push	r20
 822:	5f 93       	push	r21
 824:	6f 93       	push	r22
 826:	7f 93       	push	r23
 828:	8f 93       	push	r24
 82a:	9f 93       	push	r25
 82c:	af 93       	push	r26
 82e:	bf 93       	push	r27
 830:	ef 93       	push	r30
 832:	ff 93       	push	r31
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
 83c:	25 97       	sbiw	r28, 0x05	; 5
 83e:	de bf       	out	0x3e, r29	; 62
 840:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[5];
	itoa(number_of_rotation,buffer,10);
 842:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number_of_rotation>
 846:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number_of_rotation+0x1>
 84a:	4a e0       	ldi	r20, 0x0A	; 10
 84c:	be 01       	movw	r22, r28
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	f7 d0       	rcall	.+494    	; 0xa42 <__itoa_ncheck>

	switch(Medicine)
 854:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <Medicine>
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	19 f0       	breq	.+6      	; 0x862 <__vector_21+0x54>
 85c:	82 30       	cpi	r24, 0x02	; 2
 85e:	91 f0       	breq	.+36     	; 0x884 <__vector_21+0x76>
 860:	1e c0       	rjmp	.+60     	; 0x89e <__vector_21+0x90>
	{
		case 1: MED_1_TOGGLE;UART_string_tx("okM\n");number_of_rotation--;break;
 862:	98 b1       	in	r25, 0x08	; 8
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	89 27       	eor	r24, r25
 868:	88 b9       	out	0x08, r24	; 8
 86a:	8b e1       	ldi	r24, 0x1B	; 27
 86c:	93 e0       	ldi	r25, 0x03	; 3
 86e:	5c d0       	rcall	.+184    	; 0x928 <UART_string_tx>
 870:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number_of_rotation>
 874:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number_of_rotation+0x1>
 878:	01 97       	sbiw	r24, 0x01	; 1
 87a:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <number_of_rotation+0x1>
 87e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <number_of_rotation>
 882:	0d c0       	rjmp	.+26     	; 0x89e <__vector_21+0x90>
		case 2: MED_2_TOGGLE;number_of_rotation--;break;
 884:	98 b1       	in	r25, 0x08	; 8
 886:	82 e0       	ldi	r24, 0x02	; 2
 888:	89 27       	eor	r24, r25
 88a:	88 b9       	out	0x08, r24	; 8
 88c:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number_of_rotation>
 890:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number_of_rotation+0x1>
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <number_of_rotation+0x1>
 89a:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <number_of_rotation>
		default: break;
	}
	if(number_of_rotation == 0u)
 89e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <number_of_rotation>
 8a2:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <number_of_rotation+0x1>
 8a6:	89 2b       	or	r24, r25
 8a8:	69 f4       	brne	.+26     	; 0x8c4 <__vector_21+0xb6>
	{
		UART_string_tx("okKKKK\n");
 8aa:	80 e2       	ldi	r24, 0x20	; 32
 8ac:	93 e0       	ldi	r25, 0x03	; 3
 8ae:	3c d0       	rcall	.+120    	; 0x928 <UART_string_tx>
		A4899_DIS;
 8b0:	eb e0       	ldi	r30, 0x0B	; 11
 8b2:	f1 e0       	ldi	r31, 0x01	; 1
 8b4:	80 81       	ld	r24, Z
 8b6:	80 68       	ori	r24, 0x80	; 128
 8b8:	80 83       	st	Z, r24
		TIMER0_INTER_DISABLE;
 8ba:	ee e6       	ldi	r30, 0x6E	; 110
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	8d 7f       	andi	r24, 0xFD	; 253
 8c2:	80 83       	st	Z, r24
	}
	
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	0f 90       	pop	r0
 8ca:	0f 90       	pop	r0
 8cc:	0f 90       	pop	r0
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	0f 90       	pop	r0
 8ec:	0b be       	out	0x3b, r0	; 59
 8ee:	0f 90       	pop	r0
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	0f 90       	pop	r0
 8f4:	1f 90       	pop	r1
 8f6:	18 95       	reti

000008f8 <UART_int>:
                    newData = TRUE;
                }
        }
    else if (rc == startMarker)
        {
            recvInProgress = TRUE;
 8f8:	88 e9       	ldi	r24, 0x98	; 152
 8fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 8fe:	86 e0       	ldi	r24, 0x06	; 6
 900:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 904:	85 e3       	ldi	r24, 0x35	; 53
 906:	8a 95       	dec	r24
 908:	f1 f7       	brne	.-4      	; 0x906 <UART_int+0xe>
 90a:	00 00       	nop
 90c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 910:	83 e0       	ldi	r24, 0x03	; 3
 912:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 916:	08 95       	ret

00000918 <UART_tx>:
 918:	e0 ec       	ldi	r30, 0xC0	; 192
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	90 81       	ld	r25, Z
 91e:	95 ff       	sbrs	r25, 5
 920:	fd cf       	rjmp	.-6      	; 0x91c <UART_tx+0x4>
 922:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 926:	08 95       	ret

00000928 <UART_string_tx>:
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	fc 01       	movw	r30, r24
 930:	80 81       	ld	r24, Z
 932:	88 23       	and	r24, r24
 934:	51 f0       	breq	.+20     	; 0x94a <UART_string_tx+0x22>
 936:	8f 01       	movw	r16, r30
 938:	c0 e0       	ldi	r28, 0x00	; 0
 93a:	ee df       	rcall	.-36     	; 0x918 <UART_tx>
 93c:	cf 5f       	subi	r28, 0xFF	; 255
 93e:	f8 01       	movw	r30, r16
 940:	ec 0f       	add	r30, r28
 942:	f1 1d       	adc	r31, r1
 944:	80 81       	ld	r24, Z
 946:	81 11       	cpse	r24, r1
 948:	f8 cf       	rjmp	.-16     	; 0x93a <UART_string_tx+0x12>
 94a:	cf 91       	pop	r28
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	08 95       	ret

00000952 <__vector_25>:
}



ISR(USART0_RX_vect)
{
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	11 24       	eor	r1, r1
 95c:	0b b6       	in	r0, 0x3b	; 59
 95e:	0f 92       	push	r0
 960:	2f 93       	push	r18
 962:	3f 93       	push	r19
 964:	4f 93       	push	r20
 966:	5f 93       	push	r21
 968:	6f 93       	push	r22
 96a:	7f 93       	push	r23
 96c:	8f 93       	push	r24
 96e:	9f 93       	push	r25
 970:	af 93       	push	r26
 972:	bf 93       	push	r27
 974:	ef 93       	push	r30
 976:	ff 93       	push	r31
    cli();
 978:	f8 94       	cli



    circularQueue_enqueue((uint8_t)(UDR0));
 97a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 97e:	e2 db       	rcall	.-2108   	; 0x144 <circularQueue_enqueue>
    //recvWithStartEndMarkers(UDR0);


    sei();
 980:	78 94       	sei

}
 982:	ff 91       	pop	r31
 984:	ef 91       	pop	r30
 986:	bf 91       	pop	r27
 988:	af 91       	pop	r26
 98a:	9f 91       	pop	r25
 98c:	8f 91       	pop	r24
 98e:	7f 91       	pop	r23
 990:	6f 91       	pop	r22
 992:	5f 91       	pop	r21
 994:	4f 91       	pop	r20
 996:	3f 91       	pop	r19
 998:	2f 91       	pop	r18
 99a:	0f 90       	pop	r0
 99c:	0b be       	out	0x3b, r0	; 59
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <usound_init>:
#include "usound.h"

void usound_init(void)
{
	US_DDR |= (1 << US_TRIGER)|(0 << US_ECHO);
 9a8:	0c 9a       	sbi	0x01, 4	; 1
	US_PIN |= (1<<US_ECHO);
 9aa:	05 9a       	sbi	0x00, 5	; 0
 9ac:	08 95       	ret

000009ae <__tablejump2__>:
 9ae:	ee 0f       	add	r30, r30
 9b0:	ff 1f       	adc	r31, r31
 9b2:	88 1f       	adc	r24, r24
 9b4:	8b bf       	out	0x3b, r24	; 59
 9b6:	07 90       	elpm	r0, Z+
 9b8:	f6 91       	elpm	r31, Z
 9ba:	e0 2d       	mov	r30, r0
 9bc:	19 94       	eijmp

000009be <atoi>:
 9be:	fc 01       	movw	r30, r24
 9c0:	88 27       	eor	r24, r24
 9c2:	99 27       	eor	r25, r25
 9c4:	e8 94       	clt
 9c6:	21 91       	ld	r18, Z+
 9c8:	20 32       	cpi	r18, 0x20	; 32
 9ca:	e9 f3       	breq	.-6      	; 0x9c6 <atoi+0x8>
 9cc:	29 30       	cpi	r18, 0x09	; 9
 9ce:	10 f0       	brcs	.+4      	; 0x9d4 <atoi+0x16>
 9d0:	2e 30       	cpi	r18, 0x0E	; 14
 9d2:	c8 f3       	brcs	.-14     	; 0x9c6 <atoi+0x8>
 9d4:	2b 32       	cpi	r18, 0x2B	; 43
 9d6:	39 f0       	breq	.+14     	; 0x9e6 <atoi+0x28>
 9d8:	2d 32       	cpi	r18, 0x2D	; 45
 9da:	31 f4       	brne	.+12     	; 0x9e8 <atoi+0x2a>
 9dc:	68 94       	set
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <atoi+0x28>
 9e0:	3a d0       	rcall	.+116    	; 0xa56 <__mulhi_const_10>
 9e2:	82 0f       	add	r24, r18
 9e4:	91 1d       	adc	r25, r1
 9e6:	21 91       	ld	r18, Z+
 9e8:	20 53       	subi	r18, 0x30	; 48
 9ea:	2a 30       	cpi	r18, 0x0A	; 10
 9ec:	c8 f3       	brcs	.-14     	; 0x9e0 <atoi+0x22>
 9ee:	1e f4       	brtc	.+6      	; 0x9f6 <atoi+0x38>
 9f0:	90 95       	com	r25
 9f2:	81 95       	neg	r24
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	08 95       	ret

000009f8 <strcat>:
 9f8:	fb 01       	movw	r30, r22
 9fa:	dc 01       	movw	r26, r24
 9fc:	0d 90       	ld	r0, X+
 9fe:	00 20       	and	r0, r0
 a00:	e9 f7       	brne	.-6      	; 0x9fc <strcat+0x4>
 a02:	11 97       	sbiw	r26, 0x01	; 1
 a04:	01 90       	ld	r0, Z+
 a06:	0d 92       	st	X+, r0
 a08:	00 20       	and	r0, r0
 a0a:	e1 f7       	brne	.-8      	; 0xa04 <strcat+0xc>
 a0c:	08 95       	ret

00000a0e <strstr>:
 a0e:	fb 01       	movw	r30, r22
 a10:	51 91       	ld	r21, Z+
 a12:	55 23       	and	r21, r21
 a14:	a9 f0       	breq	.+42     	; 0xa40 <strstr+0x32>
 a16:	bf 01       	movw	r22, r30
 a18:	dc 01       	movw	r26, r24
 a1a:	4d 91       	ld	r20, X+
 a1c:	45 17       	cp	r20, r21
 a1e:	41 11       	cpse	r20, r1
 a20:	e1 f7       	brne	.-8      	; 0xa1a <strstr+0xc>
 a22:	59 f4       	brne	.+22     	; 0xa3a <strstr+0x2c>
 a24:	cd 01       	movw	r24, r26
 a26:	01 90       	ld	r0, Z+
 a28:	00 20       	and	r0, r0
 a2a:	49 f0       	breq	.+18     	; 0xa3e <strstr+0x30>
 a2c:	4d 91       	ld	r20, X+
 a2e:	40 15       	cp	r20, r0
 a30:	41 11       	cpse	r20, r1
 a32:	c9 f3       	breq	.-14     	; 0xa26 <strstr+0x18>
 a34:	fb 01       	movw	r30, r22
 a36:	41 11       	cpse	r20, r1
 a38:	ef cf       	rjmp	.-34     	; 0xa18 <strstr+0xa>
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	01 97       	sbiw	r24, 0x01	; 1
 a40:	08 95       	ret

00000a42 <__itoa_ncheck>:
 a42:	bb 27       	eor	r27, r27
 a44:	4a 30       	cpi	r20, 0x0A	; 10
 a46:	31 f4       	brne	.+12     	; 0xa54 <__itoa_ncheck+0x12>
 a48:	99 23       	and	r25, r25
 a4a:	22 f4       	brpl	.+8      	; 0xa54 <__itoa_ncheck+0x12>
 a4c:	bd e2       	ldi	r27, 0x2D	; 45
 a4e:	90 95       	com	r25
 a50:	81 95       	neg	r24
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	09 c0       	rjmp	.+18     	; 0xa68 <__utoa_common>

00000a56 <__mulhi_const_10>:
 a56:	7a e0       	ldi	r23, 0x0A	; 10
 a58:	97 9f       	mul	r25, r23
 a5a:	90 2d       	mov	r25, r0
 a5c:	87 9f       	mul	r24, r23
 a5e:	80 2d       	mov	r24, r0
 a60:	91 0d       	add	r25, r1
 a62:	11 24       	eor	r1, r1
 a64:	08 95       	ret

00000a66 <__utoa_ncheck>:
 a66:	bb 27       	eor	r27, r27

00000a68 <__utoa_common>:
 a68:	fb 01       	movw	r30, r22
 a6a:	55 27       	eor	r21, r21
 a6c:	aa 27       	eor	r26, r26
 a6e:	88 0f       	add	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	aa 1f       	adc	r26, r26
 a74:	a4 17       	cp	r26, r20
 a76:	10 f0       	brcs	.+4      	; 0xa7c <__utoa_common+0x14>
 a78:	a4 1b       	sub	r26, r20
 a7a:	83 95       	inc	r24
 a7c:	50 51       	subi	r21, 0x10	; 16
 a7e:	b9 f7       	brne	.-18     	; 0xa6e <__utoa_common+0x6>
 a80:	a0 5d       	subi	r26, 0xD0	; 208
 a82:	aa 33       	cpi	r26, 0x3A	; 58
 a84:	08 f0       	brcs	.+2      	; 0xa88 <__utoa_common+0x20>
 a86:	a9 5d       	subi	r26, 0xD9	; 217
 a88:	a1 93       	st	Z+, r26
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	79 f7       	brne	.-34     	; 0xa6c <__utoa_common+0x4>
 a8e:	b1 11       	cpse	r27, r1
 a90:	b1 93       	st	Z+, r27
 a92:	11 92       	st	Z+, r1
 a94:	cb 01       	movw	r24, r22
 a96:	00 c0       	rjmp	.+0      	; 0xa98 <strrev>

00000a98 <strrev>:
 a98:	dc 01       	movw	r26, r24
 a9a:	fc 01       	movw	r30, r24
 a9c:	67 2f       	mov	r22, r23
 a9e:	71 91       	ld	r23, Z+
 aa0:	77 23       	and	r23, r23
 aa2:	e1 f7       	brne	.-8      	; 0xa9c <strrev+0x4>
 aa4:	32 97       	sbiw	r30, 0x02	; 2
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <strrev+0x18>
 aa8:	7c 91       	ld	r23, X
 aaa:	6d 93       	st	X+, r22
 aac:	70 83       	st	Z, r23
 aae:	62 91       	ld	r22, -Z
 ab0:	ae 17       	cp	r26, r30
 ab2:	bf 07       	cpc	r27, r31
 ab4:	c8 f3       	brcs	.-14     	; 0xaa8 <strrev+0x10>
 ab6:	08 95       	ret

00000ab8 <_exit>:
 ab8:	f8 94       	cli

00000aba <__stop_program>:
 aba:	ff cf       	rjmp	.-2      	; 0xaba <__stop_program>
