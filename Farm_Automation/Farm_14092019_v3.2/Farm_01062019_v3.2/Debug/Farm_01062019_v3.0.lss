
Farm_01062019_v3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  000009de  00000a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800222  00800222  00000a94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000205c  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001279  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc0  00000000  00000000  00003ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00004c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078f  00000000  00000000  00004e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e0  00000000  00000000  0000561b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000066fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c2       	rjmp	.+1334   	; 0x57c <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	c9 c2       	rjmp	.+1426   	; 0x5f8 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ed       	ldi	r30, 0xDE	; 222
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 33       	cpi	r26, 0x37	; 55
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	dc d0       	rcall	.+440    	; 0x2d8 <main>
 120:	5c c4       	rjmp	.+2232   	; 0x9da <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <dht_getdata_dht_11>:

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <dht_getdata_dht_11+0x14>
 138:	1f 92       	push	r1
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
 140:	fe 01       	movw	r30, r28
 142:	31 96       	adiw	r30, 0x01	; 1
 144:	25 e0       	ldi	r18, 0x05	; 5
 146:	df 01       	movw	r26, r30
 148:	1d 92       	st	X+, r1
 14a:	2a 95       	dec	r18
 14c:	e9 f7       	brne	.-6      	; 0x148 <dht_getdata_dht_11+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
 14e:	21 b1       	in	r18, 0x01	; 1
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	04 2e       	mov	r0, r20
 156:	02 c0       	rjmp	.+4      	; 0x15c <dht_getdata_dht_11+0x38>
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <dht_getdata_dht_11+0x34>
 160:	2e 2b       	or	r18, r30
 162:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //high
 164:	22 b1       	in	r18, 0x02	; 2
 166:	2e 2b       	or	r18, r30
 168:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	bf ef       	ldi	r27, 0xFF	; 255
 16c:	21 ee       	ldi	r18, 0xE1	; 225
 16e:	34 e0       	ldi	r19, 0x04	; 4
 170:	b1 50       	subi	r27, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <dht_getdata_dht_11+0x4c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <dht_getdata_dht_11+0x56>
 17a:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
 17c:	32 b1       	in	r19, 0x02	; 2
 17e:	2e 2f       	mov	r18, r30
 180:	20 95       	com	r18
 182:	32 23       	and	r19, r18
 184:	32 b9       	out	0x02, r19	; 2
 186:	5f ef       	ldi	r21, 0xFF	; 255
 188:	a0 ee       	ldi	r26, 0xE0	; 224
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	51 50       	subi	r21, 0x01	; 1
 18e:	a0 40       	sbci	r26, 0x00	; 0
 190:	b0 40       	sbci	r27, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <dht_getdata_dht_11+0x68>
 194:	00 c0       	rjmp	.+0      	; 0x196 <dht_getdata_dht_11+0x72>
 196:	00 00       	nop
	
		_delay_ms(18);
	
	
	
	DHT_PORT |= (1<<channel); //high
 198:	32 b1       	in	r19, 0x02	; 2
 19a:	3e 2b       	or	r19, r30
 19c:	32 b9       	out	0x02, r19	; 2
	DHT_DDR &= ~(1<<channel); //input
 19e:	31 b1       	in	r19, 0x01	; 1
 1a0:	23 23       	and	r18, r19
 1a2:	21 b9       	out	0x01, r18	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	25 ed       	ldi	r18, 0xD5	; 213
 1a6:	2a 95       	dec	r18
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <dht_getdata_dht_11+0x82>
 1aa:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
 1ac:	20 b1       	in	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	04 2e       	mov	r0, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <dht_getdata_dht_11+0x94>
 1b4:	35 95       	asr	r19
 1b6:	27 95       	ror	r18
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <dht_getdata_dht_11+0x90>
 1bc:	20 fd       	sbrc	r18, 0
 1be:	74 c0       	rjmp	.+232    	; 0x2a8 <dht_getdata_dht_11+0x184>
 1c0:	af e3       	ldi	r26, 0x3F	; 63
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	11 97       	sbiw	r26, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <dht_getdata_dht_11+0xa0>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <dht_getdata_dht_11+0xa6>
 1ca:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
 1cc:	20 b1       	in	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <dht_getdata_dht_11+0xb2>
 1d2:	35 95       	asr	r19
 1d4:	27 95       	ror	r18
 1d6:	4a 95       	dec	r20
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <dht_getdata_dht_11+0xae>
 1da:	20 ff       	sbrs	r18, 0
 1dc:	67 c0       	rjmp	.+206    	; 0x2ac <dht_getdata_dht_11+0x188>
 1de:	af e3       	ldi	r26, 0x3F	; 63
 1e0:	b1 e0       	ldi	r27, 0x01	; 1
 1e2:	11 97       	sbiw	r26, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <dht_getdata_dht_11+0xbe>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <dht_getdata_dht_11+0xc4>
 1e8:	00 00       	nop
 1ea:	9e 01       	movw	r18, r28
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	79 01       	movw	r14, r18
 1f2:	6e 01       	movw	r12, r28
 1f4:	36 e0       	ldi	r19, 0x06	; 6
 1f6:	c3 0e       	add	r12, r19
 1f8:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
 1fa:	01 e0       	ldi	r16, 0x01	; 1
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	31 c0       	rjmp	.+98     	; 0x262 <dht_getdata_dht_11+0x13e>
 200:	41 50       	subi	r20, 0x01	; 1
 202:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 204:	19 f4       	brne	.+6      	; 0x20c <dht_getdata_dht_11+0xe8>
 206:	54 c0       	rjmp	.+168    	; 0x2b0 <dht_getdata_dht_11+0x18c>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 208:	49 ec       	ldi	r20, 0xC9	; 201
 20a:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
 20c:	20 b1       	in	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2e 23       	and	r18, r30
 212:	3f 23       	and	r19, r31
 214:	23 2b       	or	r18, r19
 216:	a1 f3       	breq	.-24     	; 0x200 <dht_getdata_dht_11+0xdc>
 218:	40 ea       	ldi	r20, 0xA0	; 160
 21a:	4a 95       	dec	r20
 21c:	f1 f7       	brne	.-4      	; 0x21a <dht_getdata_dht_11+0xf6>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
 21e:	20 b1       	in	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	2e 23       	and	r18, r30
 224:	3f 23       	and	r19, r31
 226:	23 2b       	or	r18, r19
 228:	41 f0       	breq	.+16     	; 0x23a <dht_getdata_dht_11+0x116>
				result |= (1<<(7-i));
 22a:	98 01       	movw	r18, r16
 22c:	0a 2e       	mov	r0, r26
 22e:	02 c0       	rjmp	.+4      	; 0x234 <dht_getdata_dht_11+0x110>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <dht_getdata_dht_11+0x10c>
 238:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
 23a:	49 ec       	ldi	r20, 0xC9	; 201
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	03 c0       	rjmp	.+6      	; 0x246 <dht_getdata_dht_11+0x122>
 240:	41 50       	subi	r20, 0x01	; 1
 242:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 244:	b9 f1       	breq	.+110    	; 0x2b4 <dht_getdata_dht_11+0x190>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
 246:	20 b1       	in	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	2e 23       	and	r18, r30
 24c:	3f 23       	and	r19, r31
 24e:	23 2b       	or	r18, r19
 250:	b9 f7       	brne	.-18     	; 0x240 <dht_getdata_dht_11+0x11c>
 252:	11 97       	sbiw	r26, 0x01	; 1
 254:	c8 f6       	brcc	.-78     	; 0x208 <dht_getdata_dht_11+0xe4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
 256:	d7 01       	movw	r26, r14
 258:	bd 92       	st	X+, r11
 25a:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
 25c:	ca 16       	cp	r12, r26
 25e:	db 06       	cpc	r13, r27
 260:	21 f0       	breq	.+8      	; 0x26a <dht_getdata_dht_11+0x146>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 262:	a7 e0       	ldi	r26, 0x07	; 7
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	b1 2c       	mov	r11, r1
 268:	cf cf       	rjmp	.-98     	; 0x208 <dht_getdata_dht_11+0xe4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
 26a:	21 b1       	in	r18, 0x01	; 1
 26c:	2e 2b       	or	r18, r30
 26e:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //low
 270:	22 b1       	in	r18, 0x02	; 2
 272:	e2 2b       	or	r30, r18
 274:	e2 b9       	out	0x02, r30	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	bf ef       	ldi	r27, 0xFF	; 255
 278:	e1 ee       	ldi	r30, 0xE1	; 225
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	b1 50       	subi	r27, 0x01	; 1
 27e:	e0 40       	sbci	r30, 0x00	; 0
 280:	f0 40       	sbci	r31, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <dht_getdata_dht_11+0x158>
 284:	00 c0       	rjmp	.+0      	; 0x286 <dht_getdata_dht_11+0x162>
 286:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
 288:	49 81       	ldd	r20, Y+1	; 0x01
 28a:	5b 81       	ldd	r21, Y+3	; 0x03
 28c:	2a 81       	ldd	r18, Y+2	; 0x02
 28e:	24 0f       	add	r18, r20
 290:	25 0f       	add	r18, r21
 292:	3c 81       	ldd	r19, Y+4	; 0x04
 294:	23 0f       	add	r18, r19
 296:	3d 81       	ldd	r19, Y+5	; 0x05
 298:	23 13       	cpse	r18, r19
 29a:	0e c0       	rjmp	.+28     	; 0x2b8 <dht_getdata_dht_11+0x194>
		//return temperature and humidity
		
			*temperature = bits[2];
 29c:	dc 01       	movw	r26, r24
 29e:	5c 93       	st	X, r21
			*humidity = bits[0];
 2a0:	fb 01       	movw	r30, r22
 2a2:	40 83       	st	Z, r20
		



		
		return 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <dht_getdata_dht_11+0x196>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <dht_getdata_dht_11+0x196>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <dht_getdata_dht_11+0x196>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <dht_getdata_dht_11+0x196>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <dht_getdata_dht_11+0x196>

		
		return 0;
	}

	return -1;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	bf 90       	pop	r11
 2d6:	08 95       	ret

000002d8 <main>:

extern volatile unsigned char oneSec;

int main(void)
{
	DDRB_CONFIG;
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	84 b9       	out	0x04, r24	; 4
	PORTB_COMFIG;
 2dc:	15 b8       	out	0x05, r1	; 5
	DDRC_CONFIG;
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	87 b9       	out	0x07, r24	; 7
	PORTC_COMFIG;
 2e2:	18 b8       	out	0x08, r1	; 8
	timer1_init();
 2e4:	3a d1       	rcall	.+628    	; 0x55a <timer1_init>
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
	
	
     UART_int();
 2e6:	5b d1       	rcall	.+694    	; 0x59e <UART_int>
 2e8:	8f e1       	ldi	r24, 0x1F	; 31
 2ea:	9e e4       	ldi	r25, 0x4E	; 78
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x14>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x1a>
 2f2:	00 00       	nop
 2f4:	f8 94       	cli



	//sei();
	cli();
	PORTB = 0u;
 2f6:	15 b8       	out	0x05, r1	; 5
	usound_init();	
 2f8:	92 d1       	rcall	.+804    	; 0x61e <usound_init>
 2fa:	9f ef       	ldi	r25, 0xFF	; 255
 2fc:	23 ed       	ldi	r18, 0xD3	; 211
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	91 50       	subi	r25, 0x01	; 1
 302:	20 40       	sbci	r18, 0x00	; 0
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x28>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x32>
 30a:	00 00       	nop
 30c:	9f ef       	ldi	r25, 0xFF	; 255
 30e:	23 ed       	ldi	r18, 0xD3	; 211
 310:	80 e3       	ldi	r24, 0x30	; 48
 312:	91 50       	subi	r25, 0x01	; 1
 314:	20 40       	sbci	r18, 0x00	; 0
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x3a>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x44>
 31c:	00 00       	nop
 31e:	9f ef       	ldi	r25, 0xFF	; 255
 320:	23 ed       	ldi	r18, 0xD3	; 211
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	91 50       	subi	r25, 0x01	; 1
 326:	20 40       	sbci	r18, 0x00	; 0
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x4c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x56>
 32e:	00 00       	nop
 330:	9f ef       	ldi	r25, 0xFF	; 255
 332:	23 ed       	ldi	r18, 0xD3	; 211
 334:	80 e3       	ldi	r24, 0x30	; 48
 336:	91 50       	subi	r25, 0x01	; 1
 338:	20 40       	sbci	r18, 0x00	; 0
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x5e>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x68>
 340:	00 00       	nop
 342:	9f ef       	ldi	r25, 0xFF	; 255
 344:	23 ed       	ldi	r18, 0xD3	; 211
 346:	80 e3       	ldi	r24, 0x30	; 48
 348:	91 50       	subi	r25, 0x01	; 1
 34a:	20 40       	sbci	r18, 0x00	; 0
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x70>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x7a>
 352:	00 00       	nop
 354:	c0 91 31 02 	lds	r28, 0x0231	; 0x800231 <oneSec>
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	oldTime = oneSec;
 358:	78 94       	sei
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
 35a:	d0 e0       	ldi	r29, 0x00	; 0
	PORTB_COMFIG;
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
 35c:	10 e0       	ldi	r17, 0x00	; 0
		
	sei();
	while(1){
			
		
		task_PERIODIC();
 35e:	6c d0       	rcall	.+216    	; 0x438 <task_PERIODIC>
 360:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <oneSec>
		
		if(oneSec != oldTime)
 364:	8c 17       	cp	r24, r28
 366:	d9 f3       	breq	.-10     	; 0x35e <main+0x86>
 368:	c0 91 31 02 	lds	r28, 0x0231	; 0x800231 <oneSec>
		{
			oldTime = oneSec;
			
			if(five_sec == 5u)
 36c:	15 30       	cpi	r17, 0x05	; 5
 36e:	11 f4       	brne	.+4      	; 0x374 <main+0x9c>
			{		
				task_5sec();
 370:	09 d0       	rcall	.+18     	; 0x384 <task_5sec>
 372:	01 c0       	rjmp	.+2      	; 0x376 <main+0x9e>
					
			}
			else
			{
				five_sec++;
 374:	1f 5f       	subi	r17, 0xFF	; 255
			}

			if(sec_3 == 3u)
 376:	d3 30       	cpi	r29, 0x03	; 3
 378:	19 f4       	brne	.+6      	; 0x380 <main+0xa8>
	
			{
				task_10sec();
 37a:	a6 d0       	rcall	.+332    	; 0x4c8 <task_10sec>
 37c:	d0 e0       	ldi	r29, 0x00	; 0
				sec_3=0u;
 37e:	ef cf       	rjmp	.-34     	; 0x35e <main+0x86>
 380:	df 5f       	subi	r29, 0xFF	; 255
		
			}

			else{
				
				sec_3++;
 382:	ed cf       	rjmp	.-38     	; 0x35e <main+0x86>

00000384 <task_5sec>:
 384:	f8 94       	cli
					dtostrf(fhumidity, 3, 3, buffer);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');*/
					
					dht_getdata_dht_11(&temperature,&humidity,1);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	67 e2       	ldi	r22, 0x27	; 39
 38a:	72 e0       	ldi	r23, 0x02	; 2
 38c:	88 e2       	ldi	r24, 0x28	; 40
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	c9 de       	rcall	.-622    	; 0x124 <dht_getdata_dht_11>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 392:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <temperature>
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	64 e3       	ldi	r22, 0x34	; 52
 39a:	72 e0       	ldi	r23, 0x02	; 2
 39c:	08 2e       	mov	r0, r24
 39e:	00 0c       	add	r0, r0
 3a0:	99 0b       	sbc	r25, r25
 3a2:	e8 d2       	rcall	.+1488   	; 0x974 <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_tx('[');
 3a4:	8b e5       	ldi	r24, 0x5B	; 91
 3a6:	0b d1       	rcall	.+534    	; 0x5be <UART_tx>
					UART_string_tx(sensor1);
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	10 d1       	rcall	.+544    	; 0x5ce <UART_string_tx>
					UART_string_tx(tempString);
 3ae:	8e e0       	ldi	r24, 0x0E	; 14
 3b0:	92 e0       	ldi	r25, 0x02	; 2
 3b2:	0d d1       	rcall	.+538    	; 0x5ce <UART_string_tx>
					UART_string_tx(buffer);
 3b4:	84 e3       	ldi	r24, 0x34	; 52
 3b6:	92 e0       	ldi	r25, 0x02	; 2
 3b8:	0a d1       	rcall	.+532    	; 0x5ce <UART_string_tx>
					UART_tx(']');
 3ba:	8d e5       	ldi	r24, 0x5D	; 93
 3bc:	00 d1       	rcall	.+512    	; 0x5be <UART_tx>
 3be:	8a e0       	ldi	r24, 0x0A	; 10
					UART_tx('\n');
 3c0:	fe d0       	rcall	.+508    	; 0x5be <UART_tx>
 3c2:	8f e3       	ldi	r24, 0x3F	; 63
 3c4:	9c e9       	ldi	r25, 0x9C	; 156
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <task_5sec+0x42>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <task_5sec+0x48>
 3cc:	00 00       	nop
 3ce:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <humidity>
 3d2:	4a e0       	ldi	r20, 0x0A	; 10
 3d4:	64 e3       	ldi	r22, 0x34	; 52
 3d6:	72 e0       	ldi	r23, 0x02	; 2
 3d8:	08 2e       	mov	r0, r24
 3da:	00 0c       	add	r0, r0
 3dc:	99 0b       	sbc	r25, r25
 3de:	ca d2       	rcall	.+1428   	; 0x974 <__itoa_ncheck>
					_delay_ms(10);
					itoa(humidity, buffer, 10);
					UART_tx('[');
 3e0:	8b e5       	ldi	r24, 0x5B	; 91
 3e2:	ed d0       	rcall	.+474    	; 0x5be <UART_tx>
					UART_string_tx(sensor1);
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	92 e0       	ldi	r25, 0x02	; 2
					UART_string_tx(humString);
 3e8:	f2 d0       	rcall	.+484    	; 0x5ce <UART_string_tx>
 3ea:	88 e0       	ldi	r24, 0x08	; 8
 3ec:	92 e0       	ldi	r25, 0x02	; 2
 3ee:	ef d0       	rcall	.+478    	; 0x5ce <UART_string_tx>
					UART_string_tx(buffer);
 3f0:	84 e3       	ldi	r24, 0x34	; 52
 3f2:	92 e0       	ldi	r25, 0x02	; 2
 3f4:	ec d0       	rcall	.+472    	; 0x5ce <UART_string_tx>
 3f6:	8d e5       	ldi	r24, 0x5D	; 93
					UART_tx(']');
 3f8:	e2 d0       	rcall	.+452    	; 0x5be <UART_tx>
 3fa:	8a e0       	ldi	r24, 0x0A	; 10
 3fc:	e0 d0       	rcall	.+448    	; 0x5be <UART_tx>
					UART_tx('\n');
 3fe:	12 d1       	rcall	.+548    	; 0x624 <readDistance>
 400:	dc 01       	movw	r26, r24
					
					waterLevel=readDistance();
 402:	cb 01       	movw	r24, r22
 404:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <waterLevel>
 408:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <waterLevel+0x1>
 40c:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <waterLevel+0x2>
 410:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <waterLevel+0x3>
 414:	4a e0       	ldi	r20, 0x0A	; 10
 416:	64 e3       	ldi	r22, 0x34	; 52
 418:	72 e0       	ldi	r23, 0x02	; 2
 41a:	ac d2       	rcall	.+1368   	; 0x974 <__itoa_ncheck>
 41c:	8b e5       	ldi	r24, 0x5B	; 91
					itoa(waterLevel, buffer, 10);
					UART_tx('[');
 41e:	cf d0       	rcall	.+414    	; 0x5be <UART_tx>
 420:	84 e1       	ldi	r24, 0x14	; 20
 422:	92 e0       	ldi	r25, 0x02	; 2
					UART_string_tx("water level: ");
 424:	d4 d0       	rcall	.+424    	; 0x5ce <UART_string_tx>
 426:	84 e3       	ldi	r24, 0x34	; 52
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	d1 d0       	rcall	.+418    	; 0x5ce <UART_string_tx>
					UART_string_tx(buffer);
 42c:	8d e5       	ldi	r24, 0x5D	; 93
 42e:	c7 d0       	rcall	.+398    	; 0x5be <UART_tx>
 430:	8a e0       	ldi	r24, 0x0A	; 10
 432:	c5 d0       	rcall	.+394    	; 0x5be <UART_tx>
					UART_tx(']');
 434:	78 94       	sei
 436:	08 95       	ret

00000438 <task_PERIODIC>:
 438:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <gUartRFlag>
					UART_tx('\n');
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	09 f0       	breq	.+2      	; 0x442 <task_PERIODIC+0xa>
					
						
					sei();	
 440:	42 c0       	rjmp	.+132    	; 0x4c6 <task_PERIODIC+0x8e>
 442:	f8 94       	cli
		{
				cli();//cretical section 
				//UART_tx(gUartData);
				//relayModuleControl( gUartData);
				
			switch (gUartData)
 444:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <gUartData>
 448:	82 33       	cpi	r24, 0x32	; 50
 44a:	71 f1       	breq	.+92     	; 0x4a8 <task_PERIODIC+0x70>
 44c:	83 33       	cpi	r24, 0x33	; 51
 44e:	89 f1       	breq	.+98     	; 0x4b2 <task_PERIODIC+0x7a>
 450:	81 33       	cpi	r24, 0x31	; 49
 452:	99 f5       	brne	.+102    	; 0x4ba <task_PERIODIC+0x82>
					UART_string_tx(buffer);
					dtostrf(fhumidity, 3, 3, buffer);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');*/
					dht_getdata_dht_11(&temperature,&humidity,1);
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	67 e2       	ldi	r22, 0x27	; 39
 458:	72 e0       	ldi	r23, 0x02	; 2
 45a:	88 e2       	ldi	r24, 0x28	; 40
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	62 de       	rcall	.-828    	; 0x124 <dht_getdata_dht_11>
 460:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <temperature>
 464:	4a e0       	ldi	r20, 0x0A	; 10
 466:	64 e3       	ldi	r22, 0x34	; 52
 468:	72 e0       	ldi	r23, 0x02	; 2
 46a:	08 2e       	mov	r0, r24
 46c:	00 0c       	add	r0, r0
 46e:	99 0b       	sbc	r25, r25
 470:	81 d2       	rcall	.+1282   	; 0x974 <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_string_tx(sensor1);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	ab d0       	rcall	.+342    	; 0x5ce <UART_string_tx>
					UART_string_tx(tempString);
 478:	8e e0       	ldi	r24, 0x0E	; 14
 47a:	92 e0       	ldi	r25, 0x02	; 2
 47c:	a8 d0       	rcall	.+336    	; 0x5ce <UART_string_tx>
					UART_string_tx(buffer);
 47e:	84 e3       	ldi	r24, 0x34	; 52
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	a5 d0       	rcall	.+330    	; 0x5ce <UART_string_tx>
 484:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <humidity>
 488:	4a e0       	ldi	r20, 0x0A	; 10
 48a:	64 e3       	ldi	r22, 0x34	; 52
 48c:	72 e0       	ldi	r23, 0x02	; 2
 48e:	08 2e       	mov	r0, r24
 490:	00 0c       	add	r0, r0
 492:	99 0b       	sbc	r25, r25
 494:	6f d2       	rcall	.+1246   	; 0x974 <__itoa_ncheck>
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
 496:	88 e0       	ldi	r24, 0x08	; 8
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	99 d0       	rcall	.+306    	; 0x5ce <UART_string_tx>
					UART_string_tx(buffer);
 49c:	84 e3       	ldi	r24, 0x34	; 52
 49e:	92 e0       	ldi	r25, 0x02	; 2
 4a0:	96 d0       	rcall	.+300    	; 0x5ce <UART_string_tx>
 4a2:	8a e0       	ldi	r24, 0x0A	; 10
					UART_tx('\n');		
 4a4:	8c d0       	rcall	.+280    	; 0x5be <UART_tx>
 4a6:	0c c0       	rjmp	.+24     	; 0x4c0 <task_PERIODIC+0x88>
 4a8:	2c 98       	cbi	0x05, 4	; 5
			
			break;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
			
			case '2': FAN_ON;manualflag=1; break;
 4ac:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <task_PERIODIC+0x88>
 4b2:	2c 9a       	sbi	0x05, 4	; 5
			case '3': FAN_OFF;manualflag=0;break;
 4b4:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__data_end>
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <task_PERIODIC+0x88>
 4ba:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <gUartData>
			
			default:UART_tx(gUartData);//UART_string_tx("wrong request");
 4be:	7f d0       	rcall	.+254    	; 0x5be <UART_tx>
 4c0:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <gUartRFlag>
			}
			
	
			
			gUartRFlag=0;
 4c4:	78 94       	sei
 4c6:	08 95       	ret

000004c8 <task_10sec>:
			
			sei();
 4c8:	f8 94       	cli
 4ca:	41 e0       	ldi	r20, 0x01	; 1
void task_10sec (void)
{
	
			cli();

			if (  /*dht_getdata_dht_22(&ftemperature,&fhumidity,0)!=-1  &&*/ dht_getdata_dht_11(&temperature,&humidity,1) == 0 )
 4cc:	67 e2       	ldi	r22, 0x27	; 39
 4ce:	72 e0       	ldi	r23, 0x02	; 2
 4d0:	88 e2       	ldi	r24, 0x28	; 40
 4d2:	92 e0       	ldi	r25, 0x02	; 2
 4d4:	27 de       	rcall	.-946    	; 0x124 <dht_getdata_dht_11>
 4d6:	81 11       	cpse	r24, r1
 4d8:	3c c0       	rjmp	.+120    	; 0x552 <task_10sec+0x8a>
				int8_t temp_avr;
				int8_t humd_avr;
				temp_avr = ( (ftemperature+temperature)/2 );
				humd_avr = ((fhumidity+humidity)/2);
				
				if(temp_avr > 30 || humd_avr > 67)
 4da:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <temperature>
 4de:	06 2e       	mov	r0, r22
 4e0:	00 0c       	add	r0, r0
 4e2:	77 0b       	sbc	r23, r23
 4e4:	88 0b       	sbc	r24, r24
 4e6:	99 0b       	sbc	r25, r25
 4e8:	56 d1       	rcall	.+684    	; 0x796 <__floatsisf>
 4ea:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <ftemperature>
 4ee:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <ftemperature+0x1>
 4f2:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <ftemperature+0x2>
 4f6:	50 91 30 02 	lds	r21, 0x0230	; 0x800230 <ftemperature+0x3>
 4fa:	b6 d0       	rcall	.+364    	; 0x668 <__addsf3>
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	5f e3       	ldi	r21, 0x3F	; 63
 504:	d4 d1       	rcall	.+936    	; 0x8ae <__mulsf3>
 506:	14 d1       	rcall	.+552    	; 0x730 <__fixsfsi>
 508:	6f 31       	cpi	r22, 0x1F	; 31
 50a:	cc f4       	brge	.+50     	; 0x53e <task_10sec+0x76>
 50c:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <humidity>
 510:	06 2e       	mov	r0, r22
 512:	00 0c       	add	r0, r0
 514:	77 0b       	sbc	r23, r23
 516:	88 0b       	sbc	r24, r24
 518:	99 0b       	sbc	r25, r25
 51a:	3d d1       	rcall	.+634    	; 0x796 <__floatsisf>
 51c:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <fhumidity>
 520:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <fhumidity+0x1>
 524:	40 91 2b 02 	lds	r20, 0x022B	; 0x80022b <fhumidity+0x2>
 528:	50 91 2c 02 	lds	r21, 0x022C	; 0x80022c <fhumidity+0x3>
 52c:	9d d0       	rcall	.+314    	; 0x668 <__addsf3>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	5f e3       	ldi	r21, 0x3F	; 63
 536:	bb d1       	rcall	.+886    	; 0x8ae <__mulsf3>
 538:	fb d0       	rcall	.+502    	; 0x730 <__fixsfsi>
 53a:	64 34       	cpi	r22, 0x44	; 68
 53c:	1c f0       	brlt	.+6      	; 0x544 <task_10sec+0x7c>
				{
					VENTILATION_ON;
 53e:	29 98       	cbi	0x05, 1	; 5
					FAN_ON;
 540:	2c 98       	cbi	0x05, 4	; 5
 542:	09 c0       	rjmp	.+18     	; 0x556 <task_10sec+0x8e>
				}
				
				else if (manualflag == 0)
 544:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 548:	81 11       	cpse	r24, r1
 54a:	05 c0       	rjmp	.+10     	; 0x556 <task_10sec+0x8e>
				{
					VENTILATION_OFF;
 54c:	29 9a       	sbi	0x05, 1	; 5
					FAN_OFF;
 54e:	2c 9a       	sbi	0x05, 4	; 5
 550:	02 c0       	rjmp	.+4      	; 0x556 <task_10sec+0x8e>
				
			}
			else
			{
				//UART_string_tx("FATAL ERROR!");
				FAN_ON;
 552:	2c 98       	cbi	0x05, 4	; 5
				VENTILATION_ON;
 554:	29 98       	cbi	0x05, 1	; 5
			}
			sei();
 556:	78 94       	sei
 558:	08 95       	ret

0000055a <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
 55a:	e1 e8       	ldi	r30, 0x81	; 129
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	8d 60       	ori	r24, 0x0D	; 13
 562:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
 564:	ef e6       	ldi	r30, 0x6F	; 111
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	83 60       	ori	r24, 0x03	; 3
 56c:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
 56e:	8d e3       	ldi	r24, 0x3D	; 61
 570:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
 574:	89 e0       	ldi	r24, 0x09	; 9
 576:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 57a:	08 95       	ret

0000057c <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	8f 93       	push	r24
	
	
	oneSec ++;
 588:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <oneSec>
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <oneSec>
	
	
 592:	8f 91       	pop	r24
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <UART_int>:
volatile unsigned char gUartData=0;

void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);   // enable Tx Rx and Rx interrupt
 59e:	88 e9       	ldi	r24, 0x98	; 152
 5a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00); // 8 bit data
 5a4:	86 e0       	ldi	r24, 0x06	; 6
 5a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5aa:	85 e3       	ldi	r24, 0x35	; 53
 5ac:	8a 95       	dec	r24
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <UART_int+0xe>
 5b0:	00 00       	nop
	_delay_us(10);
	UBRR0H = (unsigned char)(UBRRset>>8);
 5b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L= (unsigned char)(UBRRset);
 5b6:	87 e6       	ldi	r24, 0x67	; 103
 5b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 5bc:	08 95       	ret

000005be <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSR0A & (1<<UDRE0)));
 5be:	e0 ec       	ldi	r30, 0xC0	; 192
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	90 81       	ld	r25, Z
 5c4:	95 ff       	sbrs	r25, 5
 5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <UART_tx+0x4>
	UDR0=x;
 5c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 5cc:	08 95       	ret

000005ce <UART_string_tx>:
}

void UART_string_tx(unsigned char *x)
{
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(x[i] !='\0')
 5d6:	80 81       	ld	r24, Z
 5d8:	88 23       	and	r24, r24
 5da:	51 f0       	breq	.+20     	; 0x5f0 <UART_string_tx+0x22>
 5dc:	8f 01       	movw	r16, r30
 5de:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_tx( x[i] );
 5e0:	ee df       	rcall	.-36     	; 0x5be <UART_tx>
		i++;
 5e2:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_string_tx(unsigned char *x)
{
	unsigned char i=0;
	while(x[i] !='\0')
 5e4:	f8 01       	movw	r30, r16
 5e6:	ec 0f       	add	r30, r28
 5e8:	f1 1d       	adc	r31, r1
 5ea:	80 81       	ld	r24, Z
 5ec:	81 11       	cpse	r24, r1
 5ee:	f8 cf       	rjmp	.-16     	; 0x5e0 <UART_string_tx+0x12>
	{
		UART_tx( x[i] );
		i++;
	}
}
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	08 95       	ret

000005f8 <__vector_25>:

ISR(USART0_RX_vect)
{
 5f8:	1f 92       	push	r1
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	8f 93       	push	r24
	//cli();
	
	
	gUartData = UDR0;
 604:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 608:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <gUartData>
	gUartRFlag=1;
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <gUartRFlag>
	
	

	//sei();
	
 612:	8f 91       	pop	r24
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <usound_init>:
#include "usound.h"

void usound_init(void)
{
	US_DDR |= (1 << US_TRIGER)|(0 << US_ECHO);
 61e:	0c 9a       	sbi	0x01, 4	; 1
	US_PIN |= (1<<US_ECHO);
 620:	05 9a       	sbi	0x00, 5	; 0
 622:	08 95       	ret

00000624 <readDistance>:
 624:	8a e0       	ldi	r24, 0x0A	; 10
 626:	8a 95       	dec	r24
 628:	f1 f7       	brne	.-4      	; 0x626 <readDistance+0x2>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <readDistance+0x8>
{
	uint8_t readStatus=0;
	uint32_t disTime=0;

	_delay_us(2);
	US_PORT |= (1 << US_TRIGER);
 62c:	14 9a       	sbi	0x02, 4	; 2
 62e:	85 e3       	ldi	r24, 0x35	; 53
 630:	8a 95       	dec	r24
 632:	f1 f7       	brne	.-4      	; 0x630 <readDistance+0xc>
 634:	00 00       	nop
	_delay_us(10);
	US_PORT &= ~(1 << US_TRIGER);
 636:	14 98       	cbi	0x02, 4	; 2
 638:	09 c0       	rjmp	.+18     	; 0x64c <readDistance+0x28>

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	dc 01       	movw	r26, r24
		{
			disTime++;
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	a1 1d       	adc	r26, r1
 644:	b1 1d       	adc	r27, r1
	US_PORT &= ~(1 << US_TRIGER);

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
 646:	05 99       	sbic	0x00, 5	; 0
 648:	fb cf       	rjmp	.-10     	; 0x640 <readDistance+0x1c>
 64a:	03 c0       	rjmp	.+6      	; 0x652 <readDistance+0x2e>
 64c:	05 99       	sbic	0x00, 5	; 0
 64e:	f5 cf       	rjmp	.-22     	; 0x63a <readDistance+0x16>
 650:	fd cf       	rjmp	.-6      	; 0x64c <readDistance+0x28>
			disTime++;
			readStatus = 1;
		}
	}	

	return disTime * 0.00862;	//return data in cm	
 652:	bc 01       	movw	r22, r24
 654:	cd 01       	movw	r24, r26
 656:	9d d0       	rcall	.+314    	; 0x792 <__floatunsisf>
 658:	27 ee       	ldi	r18, 0xE7	; 231
 65a:	3a e3       	ldi	r19, 0x3A	; 58
 65c:	4d e0       	ldi	r20, 0x0D	; 13
 65e:	5c e3       	ldi	r21, 0x3C	; 60
 660:	26 d1       	rcall	.+588    	; 0x8ae <__mulsf3>
 662:	6b c0       	rjmp	.+214    	; 0x73a <__fixunssfsi>
}
 664:	08 95       	ret

00000666 <__subsf3>:
 666:	50 58       	subi	r21, 0x80	; 128

00000668 <__addsf3>:
 668:	bb 27       	eor	r27, r27
 66a:	aa 27       	eor	r26, r26
 66c:	0e d0       	rcall	.+28     	; 0x68a <__addsf3x>
 66e:	e5 c0       	rjmp	.+458    	; 0x83a <__fp_round>
 670:	d6 d0       	rcall	.+428    	; 0x81e <__fp_pscA>
 672:	30 f0       	brcs	.+12     	; 0x680 <__addsf3+0x18>
 674:	db d0       	rcall	.+438    	; 0x82c <__fp_pscB>
 676:	20 f0       	brcs	.+8      	; 0x680 <__addsf3+0x18>
 678:	31 f4       	brne	.+12     	; 0x686 <__addsf3+0x1e>
 67a:	9f 3f       	cpi	r25, 0xFF	; 255
 67c:	11 f4       	brne	.+4      	; 0x682 <__addsf3+0x1a>
 67e:	1e f4       	brtc	.+6      	; 0x686 <__addsf3+0x1e>
 680:	cb c0       	rjmp	.+406    	; 0x818 <__fp_nan>
 682:	0e f4       	brtc	.+2      	; 0x686 <__addsf3+0x1e>
 684:	e0 95       	com	r30
 686:	e7 fb       	bst	r30, 7
 688:	c1 c0       	rjmp	.+386    	; 0x80c <__fp_inf>

0000068a <__addsf3x>:
 68a:	e9 2f       	mov	r30, r25
 68c:	e7 d0       	rcall	.+462    	; 0x85c <__fp_split3>
 68e:	80 f3       	brcs	.-32     	; 0x670 <__addsf3+0x8>
 690:	ba 17       	cp	r27, r26
 692:	62 07       	cpc	r22, r18
 694:	73 07       	cpc	r23, r19
 696:	84 07       	cpc	r24, r20
 698:	95 07       	cpc	r25, r21
 69a:	18 f0       	brcs	.+6      	; 0x6a2 <__addsf3x+0x18>
 69c:	71 f4       	brne	.+28     	; 0x6ba <__addsf3x+0x30>
 69e:	9e f5       	brtc	.+102    	; 0x706 <__addsf3x+0x7c>
 6a0:	ff c0       	rjmp	.+510    	; 0x8a0 <__fp_zero>
 6a2:	0e f4       	brtc	.+2      	; 0x6a6 <__addsf3x+0x1c>
 6a4:	e0 95       	com	r30
 6a6:	0b 2e       	mov	r0, r27
 6a8:	ba 2f       	mov	r27, r26
 6aa:	a0 2d       	mov	r26, r0
 6ac:	0b 01       	movw	r0, r22
 6ae:	b9 01       	movw	r22, r18
 6b0:	90 01       	movw	r18, r0
 6b2:	0c 01       	movw	r0, r24
 6b4:	ca 01       	movw	r24, r20
 6b6:	a0 01       	movw	r20, r0
 6b8:	11 24       	eor	r1, r1
 6ba:	ff 27       	eor	r31, r31
 6bc:	59 1b       	sub	r21, r25
 6be:	99 f0       	breq	.+38     	; 0x6e6 <__addsf3x+0x5c>
 6c0:	59 3f       	cpi	r21, 0xF9	; 249
 6c2:	50 f4       	brcc	.+20     	; 0x6d8 <__addsf3x+0x4e>
 6c4:	50 3e       	cpi	r21, 0xE0	; 224
 6c6:	68 f1       	brcs	.+90     	; 0x722 <__addsf3x+0x98>
 6c8:	1a 16       	cp	r1, r26
 6ca:	f0 40       	sbci	r31, 0x00	; 0
 6cc:	a2 2f       	mov	r26, r18
 6ce:	23 2f       	mov	r18, r19
 6d0:	34 2f       	mov	r19, r20
 6d2:	44 27       	eor	r20, r20
 6d4:	58 5f       	subi	r21, 0xF8	; 248
 6d6:	f3 cf       	rjmp	.-26     	; 0x6be <__addsf3x+0x34>
 6d8:	46 95       	lsr	r20
 6da:	37 95       	ror	r19
 6dc:	27 95       	ror	r18
 6de:	a7 95       	ror	r26
 6e0:	f0 40       	sbci	r31, 0x00	; 0
 6e2:	53 95       	inc	r21
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__addsf3x+0x4e>
 6e6:	7e f4       	brtc	.+30     	; 0x706 <__addsf3x+0x7c>
 6e8:	1f 16       	cp	r1, r31
 6ea:	ba 0b       	sbc	r27, r26
 6ec:	62 0b       	sbc	r22, r18
 6ee:	73 0b       	sbc	r23, r19
 6f0:	84 0b       	sbc	r24, r20
 6f2:	ba f0       	brmi	.+46     	; 0x722 <__addsf3x+0x98>
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	a1 f0       	breq	.+40     	; 0x720 <__addsf3x+0x96>
 6f8:	ff 0f       	add	r31, r31
 6fa:	bb 1f       	adc	r27, r27
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	c2 f7       	brpl	.-16     	; 0x6f4 <__addsf3x+0x6a>
 704:	0e c0       	rjmp	.+28     	; 0x722 <__addsf3x+0x98>
 706:	ba 0f       	add	r27, r26
 708:	62 1f       	adc	r22, r18
 70a:	73 1f       	adc	r23, r19
 70c:	84 1f       	adc	r24, r20
 70e:	48 f4       	brcc	.+18     	; 0x722 <__addsf3x+0x98>
 710:	87 95       	ror	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f7 95       	ror	r31
 71a:	9e 3f       	cpi	r25, 0xFE	; 254
 71c:	08 f0       	brcs	.+2      	; 0x720 <__addsf3x+0x96>
 71e:	b3 cf       	rjmp	.-154    	; 0x686 <__addsf3+0x1e>
 720:	93 95       	inc	r25
 722:	88 0f       	add	r24, r24
 724:	08 f0       	brcs	.+2      	; 0x728 <__addsf3x+0x9e>
 726:	99 27       	eor	r25, r25
 728:	ee 0f       	add	r30, r30
 72a:	97 95       	ror	r25
 72c:	87 95       	ror	r24
 72e:	08 95       	ret

00000730 <__fixsfsi>:
 730:	04 d0       	rcall	.+8      	; 0x73a <__fixunssfsi>
 732:	68 94       	set
 734:	b1 11       	cpse	r27, r1
 736:	b5 c0       	rjmp	.+362    	; 0x8a2 <__fp_szero>
 738:	08 95       	ret

0000073a <__fixunssfsi>:
 73a:	98 d0       	rcall	.+304    	; 0x86c <__fp_splitA>
 73c:	88 f0       	brcs	.+34     	; 0x760 <__fixunssfsi+0x26>
 73e:	9f 57       	subi	r25, 0x7F	; 127
 740:	90 f0       	brcs	.+36     	; 0x766 <__fixunssfsi+0x2c>
 742:	b9 2f       	mov	r27, r25
 744:	99 27       	eor	r25, r25
 746:	b7 51       	subi	r27, 0x17	; 23
 748:	a0 f0       	brcs	.+40     	; 0x772 <__fixunssfsi+0x38>
 74a:	d1 f0       	breq	.+52     	; 0x780 <__fixunssfsi+0x46>
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	1a f0       	brmi	.+6      	; 0x75c <__fixunssfsi+0x22>
 756:	ba 95       	dec	r27
 758:	c9 f7       	brne	.-14     	; 0x74c <__fixunssfsi+0x12>
 75a:	12 c0       	rjmp	.+36     	; 0x780 <__fixunssfsi+0x46>
 75c:	b1 30       	cpi	r27, 0x01	; 1
 75e:	81 f0       	breq	.+32     	; 0x780 <__fixunssfsi+0x46>
 760:	9f d0       	rcall	.+318    	; 0x8a0 <__fp_zero>
 762:	b1 e0       	ldi	r27, 0x01	; 1
 764:	08 95       	ret
 766:	9c c0       	rjmp	.+312    	; 0x8a0 <__fp_zero>
 768:	67 2f       	mov	r22, r23
 76a:	78 2f       	mov	r23, r24
 76c:	88 27       	eor	r24, r24
 76e:	b8 5f       	subi	r27, 0xF8	; 248
 770:	39 f0       	breq	.+14     	; 0x780 <__fixunssfsi+0x46>
 772:	b9 3f       	cpi	r27, 0xF9	; 249
 774:	cc f3       	brlt	.-14     	; 0x768 <__fixunssfsi+0x2e>
 776:	86 95       	lsr	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b3 95       	inc	r27
 77e:	d9 f7       	brne	.-10     	; 0x776 <__fixunssfsi+0x3c>
 780:	3e f4       	brtc	.+14     	; 0x790 <__fixunssfsi+0x56>
 782:	90 95       	com	r25
 784:	80 95       	com	r24
 786:	70 95       	com	r23
 788:	61 95       	neg	r22
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	08 95       	ret

00000792 <__floatunsisf>:
 792:	e8 94       	clt
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <__floatsisf+0x12>

00000796 <__floatsisf>:
 796:	97 fb       	bst	r25, 7
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__floatsisf+0x12>
 79a:	90 95       	com	r25
 79c:	80 95       	com	r24
 79e:	70 95       	com	r23
 7a0:	61 95       	neg	r22
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	99 23       	and	r25, r25
 7aa:	a9 f0       	breq	.+42     	; 0x7d6 <__floatsisf+0x40>
 7ac:	f9 2f       	mov	r31, r25
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	bb 27       	eor	r27, r27
 7b2:	93 95       	inc	r25
 7b4:	f6 95       	lsr	r31
 7b6:	87 95       	ror	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b7 95       	ror	r27
 7be:	f1 11       	cpse	r31, r1
 7c0:	f8 cf       	rjmp	.-16     	; 0x7b2 <__floatsisf+0x1c>
 7c2:	fa f4       	brpl	.+62     	; 0x802 <__floatsisf+0x6c>
 7c4:	bb 0f       	add	r27, r27
 7c6:	11 f4       	brne	.+4      	; 0x7cc <__floatsisf+0x36>
 7c8:	60 ff       	sbrs	r22, 0
 7ca:	1b c0       	rjmp	.+54     	; 0x802 <__floatsisf+0x6c>
 7cc:	6f 5f       	subi	r22, 0xFF	; 255
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <__floatsisf+0x6c>
 7d6:	88 23       	and	r24, r24
 7d8:	11 f0       	breq	.+4      	; 0x7de <__floatsisf+0x48>
 7da:	96 e9       	ldi	r25, 0x96	; 150
 7dc:	11 c0       	rjmp	.+34     	; 0x800 <__floatsisf+0x6a>
 7de:	77 23       	and	r23, r23
 7e0:	21 f0       	breq	.+8      	; 0x7ea <__floatsisf+0x54>
 7e2:	9e e8       	ldi	r25, 0x8E	; 142
 7e4:	87 2f       	mov	r24, r23
 7e6:	76 2f       	mov	r23, r22
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <__floatsisf+0x5e>
 7ea:	66 23       	and	r22, r22
 7ec:	71 f0       	breq	.+28     	; 0x80a <__floatsisf+0x74>
 7ee:	96 e8       	ldi	r25, 0x86	; 134
 7f0:	86 2f       	mov	r24, r22
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	2a f0       	brmi	.+10     	; 0x802 <__floatsisf+0x6c>
 7f8:	9a 95       	dec	r25
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	da f7       	brpl	.-10     	; 0x7f8 <__floatsisf+0x62>
 802:	88 0f       	add	r24, r24
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_inf>:
 80c:	97 f9       	bld	r25, 7
 80e:	9f 67       	ori	r25, 0x7F	; 127
 810:	80 e8       	ldi	r24, 0x80	; 128
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	08 95       	ret

00000818 <__fp_nan>:
 818:	9f ef       	ldi	r25, 0xFF	; 255
 81a:	80 ec       	ldi	r24, 0xC0	; 192
 81c:	08 95       	ret

0000081e <__fp_pscA>:
 81e:	00 24       	eor	r0, r0
 820:	0a 94       	dec	r0
 822:	16 16       	cp	r1, r22
 824:	17 06       	cpc	r1, r23
 826:	18 06       	cpc	r1, r24
 828:	09 06       	cpc	r0, r25
 82a:	08 95       	ret

0000082c <__fp_pscB>:
 82c:	00 24       	eor	r0, r0
 82e:	0a 94       	dec	r0
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	14 06       	cpc	r1, r20
 836:	05 06       	cpc	r0, r21
 838:	08 95       	ret

0000083a <__fp_round>:
 83a:	09 2e       	mov	r0, r25
 83c:	03 94       	inc	r0
 83e:	00 0c       	add	r0, r0
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0xc>
 842:	88 23       	and	r24, r24
 844:	52 f0       	brmi	.+20     	; 0x85a <__fp_round+0x20>
 846:	bb 0f       	add	r27, r27
 848:	40 f4       	brcc	.+16     	; 0x85a <__fp_round+0x20>
 84a:	bf 2b       	or	r27, r31
 84c:	11 f4       	brne	.+4      	; 0x852 <__fp_round+0x18>
 84e:	60 ff       	sbrs	r22, 0
 850:	04 c0       	rjmp	.+8      	; 0x85a <__fp_round+0x20>
 852:	6f 5f       	subi	r22, 0xFF	; 255
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	08 95       	ret

0000085c <__fp_split3>:
 85c:	57 fd       	sbrc	r21, 7
 85e:	90 58       	subi	r25, 0x80	; 128
 860:	44 0f       	add	r20, r20
 862:	55 1f       	adc	r21, r21
 864:	59 f0       	breq	.+22     	; 0x87c <__fp_splitA+0x10>
 866:	5f 3f       	cpi	r21, 0xFF	; 255
 868:	71 f0       	breq	.+28     	; 0x886 <__fp_splitA+0x1a>
 86a:	47 95       	ror	r20

0000086c <__fp_splitA>:
 86c:	88 0f       	add	r24, r24
 86e:	97 fb       	bst	r25, 7
 870:	99 1f       	adc	r25, r25
 872:	61 f0       	breq	.+24     	; 0x88c <__fp_splitA+0x20>
 874:	9f 3f       	cpi	r25, 0xFF	; 255
 876:	79 f0       	breq	.+30     	; 0x896 <__fp_splitA+0x2a>
 878:	87 95       	ror	r24
 87a:	08 95       	ret
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	55 1f       	adc	r21, r21
 884:	f2 cf       	rjmp	.-28     	; 0x86a <__fp_split3+0xe>
 886:	46 95       	lsr	r20
 888:	f1 df       	rcall	.-30     	; 0x86c <__fp_splitA>
 88a:	08 c0       	rjmp	.+16     	; 0x89c <__fp_splitA+0x30>
 88c:	16 16       	cp	r1, r22
 88e:	17 06       	cpc	r1, r23
 890:	18 06       	cpc	r1, r24
 892:	99 1f       	adc	r25, r25
 894:	f1 cf       	rjmp	.-30     	; 0x878 <__fp_splitA+0xc>
 896:	86 95       	lsr	r24
 898:	71 05       	cpc	r23, r1
 89a:	61 05       	cpc	r22, r1
 89c:	08 94       	sec
 89e:	08 95       	ret

000008a0 <__fp_zero>:
 8a0:	e8 94       	clt

000008a2 <__fp_szero>:
 8a2:	bb 27       	eor	r27, r27
 8a4:	66 27       	eor	r22, r22
 8a6:	77 27       	eor	r23, r23
 8a8:	cb 01       	movw	r24, r22
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <__mulsf3>:
 8ae:	0b d0       	rcall	.+22     	; 0x8c6 <__mulsf3x>
 8b0:	c4 cf       	rjmp	.-120    	; 0x83a <__fp_round>
 8b2:	b5 df       	rcall	.-150    	; 0x81e <__fp_pscA>
 8b4:	28 f0       	brcs	.+10     	; 0x8c0 <__mulsf3+0x12>
 8b6:	ba df       	rcall	.-140    	; 0x82c <__fp_pscB>
 8b8:	18 f0       	brcs	.+6      	; 0x8c0 <__mulsf3+0x12>
 8ba:	95 23       	and	r25, r21
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__mulsf3+0x12>
 8be:	a6 cf       	rjmp	.-180    	; 0x80c <__fp_inf>
 8c0:	ab cf       	rjmp	.-170    	; 0x818 <__fp_nan>
 8c2:	11 24       	eor	r1, r1
 8c4:	ee cf       	rjmp	.-36     	; 0x8a2 <__fp_szero>

000008c6 <__mulsf3x>:
 8c6:	ca df       	rcall	.-108    	; 0x85c <__fp_split3>
 8c8:	a0 f3       	brcs	.-24     	; 0x8b2 <__mulsf3+0x4>

000008ca <__mulsf3_pse>:
 8ca:	95 9f       	mul	r25, r21
 8cc:	d1 f3       	breq	.-12     	; 0x8c2 <__mulsf3+0x14>
 8ce:	95 0f       	add	r25, r21
 8d0:	50 e0       	ldi	r21, 0x00	; 0
 8d2:	55 1f       	adc	r21, r21
 8d4:	62 9f       	mul	r22, r18
 8d6:	f0 01       	movw	r30, r0
 8d8:	72 9f       	mul	r23, r18
 8da:	bb 27       	eor	r27, r27
 8dc:	f0 0d       	add	r31, r0
 8de:	b1 1d       	adc	r27, r1
 8e0:	63 9f       	mul	r22, r19
 8e2:	aa 27       	eor	r26, r26
 8e4:	f0 0d       	add	r31, r0
 8e6:	b1 1d       	adc	r27, r1
 8e8:	aa 1f       	adc	r26, r26
 8ea:	64 9f       	mul	r22, r20
 8ec:	66 27       	eor	r22, r22
 8ee:	b0 0d       	add	r27, r0
 8f0:	a1 1d       	adc	r26, r1
 8f2:	66 1f       	adc	r22, r22
 8f4:	82 9f       	mul	r24, r18
 8f6:	22 27       	eor	r18, r18
 8f8:	b0 0d       	add	r27, r0
 8fa:	a1 1d       	adc	r26, r1
 8fc:	62 1f       	adc	r22, r18
 8fe:	73 9f       	mul	r23, r19
 900:	b0 0d       	add	r27, r0
 902:	a1 1d       	adc	r26, r1
 904:	62 1f       	adc	r22, r18
 906:	83 9f       	mul	r24, r19
 908:	a0 0d       	add	r26, r0
 90a:	61 1d       	adc	r22, r1
 90c:	22 1f       	adc	r18, r18
 90e:	74 9f       	mul	r23, r20
 910:	33 27       	eor	r19, r19
 912:	a0 0d       	add	r26, r0
 914:	61 1d       	adc	r22, r1
 916:	23 1f       	adc	r18, r19
 918:	84 9f       	mul	r24, r20
 91a:	60 0d       	add	r22, r0
 91c:	21 1d       	adc	r18, r1
 91e:	82 2f       	mov	r24, r18
 920:	76 2f       	mov	r23, r22
 922:	6a 2f       	mov	r22, r26
 924:	11 24       	eor	r1, r1
 926:	9f 57       	subi	r25, 0x7F	; 127
 928:	50 40       	sbci	r21, 0x00	; 0
 92a:	8a f0       	brmi	.+34     	; 0x94e <__mulsf3_pse+0x84>
 92c:	e1 f0       	breq	.+56     	; 0x966 <__mulsf3_pse+0x9c>
 92e:	88 23       	and	r24, r24
 930:	4a f0       	brmi	.+18     	; 0x944 <__mulsf3_pse+0x7a>
 932:	ee 0f       	add	r30, r30
 934:	ff 1f       	adc	r31, r31
 936:	bb 1f       	adc	r27, r27
 938:	66 1f       	adc	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	91 50       	subi	r25, 0x01	; 1
 940:	50 40       	sbci	r21, 0x00	; 0
 942:	a9 f7       	brne	.-22     	; 0x92e <__mulsf3_pse+0x64>
 944:	9e 3f       	cpi	r25, 0xFE	; 254
 946:	51 05       	cpc	r21, r1
 948:	70 f0       	brcs	.+28     	; 0x966 <__mulsf3_pse+0x9c>
 94a:	60 cf       	rjmp	.-320    	; 0x80c <__fp_inf>
 94c:	aa cf       	rjmp	.-172    	; 0x8a2 <__fp_szero>
 94e:	5f 3f       	cpi	r21, 0xFF	; 255
 950:	ec f3       	brlt	.-6      	; 0x94c <__mulsf3_pse+0x82>
 952:	98 3e       	cpi	r25, 0xE8	; 232
 954:	dc f3       	brlt	.-10     	; 0x94c <__mulsf3_pse+0x82>
 956:	86 95       	lsr	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b7 95       	ror	r27
 95e:	f7 95       	ror	r31
 960:	e7 95       	ror	r30
 962:	9f 5f       	subi	r25, 0xFF	; 255
 964:	c1 f7       	brne	.-16     	; 0x956 <__mulsf3_pse+0x8c>
 966:	fe 2b       	or	r31, r30
 968:	88 0f       	add	r24, r24
 96a:	91 1d       	adc	r25, r1
 96c:	96 95       	lsr	r25
 96e:	87 95       	ror	r24
 970:	97 f9       	bld	r25, 7
 972:	08 95       	ret

00000974 <__itoa_ncheck>:
 974:	bb 27       	eor	r27, r27
 976:	4a 30       	cpi	r20, 0x0A	; 10
 978:	31 f4       	brne	.+12     	; 0x986 <__itoa_ncheck+0x12>
 97a:	99 23       	and	r25, r25
 97c:	22 f4       	brpl	.+8      	; 0x986 <__itoa_ncheck+0x12>
 97e:	bd e2       	ldi	r27, 0x2D	; 45
 980:	90 95       	com	r25
 982:	81 95       	neg	r24
 984:	9f 4f       	sbci	r25, 0xFF	; 255
 986:	01 c0       	rjmp	.+2      	; 0x98a <__utoa_common>

00000988 <__utoa_ncheck>:
 988:	bb 27       	eor	r27, r27

0000098a <__utoa_common>:
 98a:	fb 01       	movw	r30, r22
 98c:	55 27       	eor	r21, r21
 98e:	aa 27       	eor	r26, r26
 990:	88 0f       	add	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	aa 1f       	adc	r26, r26
 996:	a4 17       	cp	r26, r20
 998:	10 f0       	brcs	.+4      	; 0x99e <__utoa_common+0x14>
 99a:	a4 1b       	sub	r26, r20
 99c:	83 95       	inc	r24
 99e:	50 51       	subi	r21, 0x10	; 16
 9a0:	b9 f7       	brne	.-18     	; 0x990 <__utoa_common+0x6>
 9a2:	a0 5d       	subi	r26, 0xD0	; 208
 9a4:	aa 33       	cpi	r26, 0x3A	; 58
 9a6:	08 f0       	brcs	.+2      	; 0x9aa <__utoa_common+0x20>
 9a8:	a9 5d       	subi	r26, 0xD9	; 217
 9aa:	a1 93       	st	Z+, r26
 9ac:	00 97       	sbiw	r24, 0x00	; 0
 9ae:	79 f7       	brne	.-34     	; 0x98e <__utoa_common+0x4>
 9b0:	b1 11       	cpse	r27, r1
 9b2:	b1 93       	st	Z+, r27
 9b4:	11 92       	st	Z+, r1
 9b6:	cb 01       	movw	r24, r22
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <strrev>

000009ba <strrev>:
 9ba:	dc 01       	movw	r26, r24
 9bc:	fc 01       	movw	r30, r24
 9be:	67 2f       	mov	r22, r23
 9c0:	71 91       	ld	r23, Z+
 9c2:	77 23       	and	r23, r23
 9c4:	e1 f7       	brne	.-8      	; 0x9be <strrev+0x4>
 9c6:	32 97       	sbiw	r30, 0x02	; 2
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <strrev+0x18>
 9ca:	7c 91       	ld	r23, X
 9cc:	6d 93       	st	X+, r22
 9ce:	70 83       	st	Z, r23
 9d0:	62 91       	ld	r22, -Z
 9d2:	ae 17       	cp	r26, r30
 9d4:	bf 07       	cpc	r27, r31
 9d6:	c8 f3       	brcs	.-14     	; 0x9ca <strrev+0x10>
 9d8:	08 95       	ret

000009da <_exit>:
 9da:	f8 94       	cli

000009dc <__stop_program>:
 9dc:	ff cf       	rjmp	.-2      	; 0x9dc <__stop_program>
