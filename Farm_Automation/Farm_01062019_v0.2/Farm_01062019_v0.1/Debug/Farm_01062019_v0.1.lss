
Farm_01062019_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000432  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800082  00800082  000004e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f68  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000915  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bd  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  00002a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000030f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 01 01 	call	0x202	; 0x202 <main>
  8a:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dht11_get_data>:
#include <stdlib.h>
#include <avr/io.h>
#include <util/delay.h>
#include "dht11.h"

uint8_t dht11_get_data(uint8_t * buff,unsigned char channel) {
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	00 d0       	rcall	.+0      	; 0x9e <dht11_get_data+0xc>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <dht11_get_data+0xe>
  a0:	1f 92       	push	r1
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t bits[5];
	uint8_t i, j = 0;

	//reset port
	DHT11_DDR |= (1 << channel); //output
  a6:	2a b3       	in	r18, 0x1a	; 26
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	06 2e       	mov	r0, r22
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <dht11_get_data+0x22>
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <dht11_get_data+0x1e>
  b8:	24 2b       	or	r18, r20
  ba:	2a bb       	out	0x1a, r18	; 26
	DHT11_PORT |= (1 << channel); //high
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	24 2b       	or	r18, r20
  c0:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	3f e5       	ldi	r19, 0x5F	; 95
  c6:	73 e0       	ldi	r23, 0x03	; 3
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	70 40       	sbci	r23, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <dht11_get_data+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <dht11_get_data+0x40>
  d2:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT11_PORT &= ~(1 << channel); //low
  d4:	3b b3       	in	r19, 0x1b	; 27
  d6:	24 2f       	mov	r18, r20
  d8:	20 95       	com	r18
  da:	32 23       	and	r19, r18
  dc:	3b bb       	out	0x1b, r19	; 27
  de:	e6 e6       	ldi	r30, 0x66	; 102
  e0:	f2 ec       	ldi	r31, 0xC2	; 194
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <dht11_get_data+0x50>
  e6:	00 00       	nop
	_delay_ms(18);
	DHT11_PORT |= (1 << channel); //high
  e8:	3b b3       	in	r19, 0x1b	; 27
  ea:	34 2b       	or	r19, r20
  ec:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	f4 e0       	ldi	r31, 0x04	; 4
  f0:	fa 95       	dec	r31
  f2:	f1 f7       	brne	.-4      	; 0xf0 <dht11_get_data+0x5e>
	_delay_us(1);
	DHT11_DDR &= ~(1 << channel); //input
  f4:	3a b3       	in	r19, 0x1a	; 26
  f6:	23 23       	and	r18, r19
  f8:	2a bb       	out	0x1a, r18	; 26
  fa:	20 e9       	ldi	r18, 0x90	; 144
  fc:	2a 95       	dec	r18
  fe:	f1 f7       	brne	.-4      	; 0xfc <dht11_get_data+0x6a>
	_delay_us(39);

	//check start condition 1
	if ((DHT11_PIN & (1 << channel))) {
 100:	29 b3       	in	r18, 0x19	; 25
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	06 2e       	mov	r0, r22
 106:	02 c0       	rjmp	.+4      	; 0x10c <dht11_get_data+0x7a>
 108:	35 95       	asr	r19
 10a:	27 95       	ror	r18
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <dht11_get_data+0x76>
 110:	20 fd       	sbrc	r18, 0
 112:	67 c0       	rjmp	.+206    	; 0x1e2 <dht11_get_data+0x150>
 114:	ed ed       	ldi	r30, 0xDD	; 221
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <dht11_get_data+0x86>
		return DHT11_ERROR;
	}
	_delay_us(80);
	//check start condition 2
	if (!(DHT11_PIN & (1 << channel))) {
 11c:	29 b3       	in	r18, 0x19	; 25
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <dht11_get_data+0x94>
 122:	35 95       	asr	r19
 124:	27 95       	ror	r18
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <dht11_get_data+0x90>
 12a:	20 ff       	sbrs	r18, 0
 12c:	5c c0       	rjmp	.+184    	; 0x1e6 <dht11_get_data+0x154>
 12e:	ed ed       	ldi	r30, 0xDD	; 221
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <dht11_get_data+0xa0>
 136:	de 01       	movw	r26, r28
 138:	11 96       	adiw	r26, 0x01	; 1
 13a:	8e 01       	movw	r16, r28
 13c:	0a 5f       	subi	r16, 0xFA	; 250
 13e:	1f 4f       	sbci	r17, 0xFF	; 255
		for (i = 0; i < 8; i++) { //read every bit
			while (!(DHT11_PIN & (1 << channel)))
				; //wait for an high input
			_delay_us(30);
			if (DHT11_PIN & (1 << channel)) //if input is high after 30 us, get result
				result |= (1 << (7 - i));
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	25 c0       	rjmp	.+74     	; 0x190 <dht11_get_data+0xfe>

	//read the data
	for (j = 0; j < 5; j++) { //read 5 byte
		uint8_t result = 0;
		for (i = 0; i < 8; i++) { //read every bit
			while (!(DHT11_PIN & (1 << channel)))
 146:	29 b3       	in	r18, 0x19	; 25
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	24 23       	and	r18, r20
 14c:	35 23       	and	r19, r21
 14e:	23 2b       	or	r18, r19
 150:	d1 f3       	breq	.-12     	; 0x146 <dht11_get_data+0xb4>
 152:	2e e6       	ldi	r18, 0x6E	; 110
 154:	2a 95       	dec	r18
 156:	f1 f7       	brne	.-4      	; 0x154 <dht11_get_data+0xc2>
 158:	00 c0       	rjmp	.+0      	; 0x15a <dht11_get_data+0xc8>
				; //wait for an high input
			_delay_us(30);
			if (DHT11_PIN & (1 << channel)) //if input is high after 30 us, get result
 15a:	29 b3       	in	r18, 0x19	; 25
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	24 23       	and	r18, r20
 160:	35 23       	and	r19, r21
 162:	23 2b       	or	r18, r19
 164:	41 f0       	breq	.+16     	; 0x176 <dht11_get_data+0xe4>
				result |= (1 << (7 - i));
 166:	9f 01       	movw	r18, r30
 168:	06 2e       	mov	r0, r22
 16a:	02 c0       	rjmp	.+4      	; 0x170 <dht11_get_data+0xde>
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <dht11_get_data+0xda>
 174:	f2 2a       	or	r15, r18
			while (DHT11_PIN & (1 << channel))
 176:	29 b3       	in	r18, 0x19	; 25
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	24 23       	and	r18, r20
 17c:	35 23       	and	r19, r21
 17e:	23 2b       	or	r18, r19
 180:	d1 f7       	brne	.-12     	; 0x176 <dht11_get_data+0xe4>
 182:	61 50       	subi	r22, 0x01	; 1
 184:	71 09       	sbc	r23, r1
 186:	f8 f6       	brcc	.-66     	; 0x146 <dht11_get_data+0xb4>
				; //wait until input get low
		}
		bits[j] = result;
 188:	fd 92       	st	X+, r15
		return DHT11_ERROR;
	}
	_delay_us(80);

	//read the data
	for (j = 0; j < 5; j++) { //read 5 byte
 18a:	0a 17       	cp	r16, r26
 18c:	1b 07       	cpc	r17, r27
 18e:	21 f0       	breq	.+8      	; 0x198 <dht11_get_data+0x106>
#include <stdlib.h>
#include <avr/io.h>
#include <util/delay.h>
#include "dht11.h"

uint8_t dht11_get_data(uint8_t * buff,unsigned char channel) {
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	f1 2c       	mov	r15, r1
 196:	d7 cf       	rjmp	.-82     	; 0x146 <dht11_get_data+0xb4>
		}
		bits[j] = result;
	}

	//reset port
	DHT11_DDR |= (1 << channel); //output
 198:	2a b3       	in	r18, 0x1a	; 26
 19a:	24 2b       	or	r18, r20
 19c:	2a bb       	out	0x1a, r18	; 26
	DHT11_PORT |= (1 << channel); //low
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	42 2b       	or	r20, r18
 1a2:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	4f ef       	ldi	r20, 0xFF	; 255
 1a6:	7f e5       	ldi	r23, 0x5F	; 95
 1a8:	e3 e0       	ldi	r30, 0x03	; 3
 1aa:	41 50       	subi	r20, 0x01	; 1
 1ac:	70 40       	sbci	r23, 0x00	; 0
 1ae:	e0 40       	sbci	r30, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <dht11_get_data+0x118>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <dht11_get_data+0x122>
 1b4:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if (bits[0] + bits[1] + bits[2] + bits[3] == bits[4]) 
 1b6:	69 81       	ldd	r22, Y+1	; 0x01
 1b8:	7b 81       	ldd	r23, Y+3	; 0x03
 1ba:	4a 81       	ldd	r20, Y+2	; 0x02
 1bc:	26 2f       	mov	r18, r22
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	24 0f       	add	r18, r20
 1c2:	31 1d       	adc	r19, r1
 1c4:	27 0f       	add	r18, r23
 1c6:	31 1d       	adc	r19, r1
 1c8:	4c 81       	ldd	r20, Y+4	; 0x04
 1ca:	24 0f       	add	r18, r20
 1cc:	31 1d       	adc	r19, r1
 1ce:	4d 81       	ldd	r20, Y+5	; 0x05
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	24 17       	cp	r18, r20
 1d4:	35 07       	cpc	r19, r21
 1d6:	49 f4       	brne	.+18     	; 0x1ea <dht11_get_data+0x158>
	{
		buff[0] = bits[2];
 1d8:	fc 01       	movw	r30, r24
 1da:	70 83       	st	Z, r23
		buff[1] = bits[0];
 1dc:	61 83       	std	Z+1, r22	; 0x01
		// 	return (bits[2]);
		// } else if (select == DHT11_DATA_HUMIDITY)
		// { //return humidity
		// 	return (bits[0]);
		// }
		return 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <dht11_get_data+0x15a>
	DHT11_DDR &= ~(1 << channel); //input
	_delay_us(39);

	//check start condition 1
	if ((DHT11_PIN & (1 << channel))) {
		return DHT11_ERROR;
 1e2:	86 e9       	ldi	r24, 0x96	; 150
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <dht11_get_data+0x15a>
	}
	_delay_us(80);
	//check start condition 2
	if (!(DHT11_PIN & (1 << channel))) {
		return DHT11_ERROR;
 1e6:	86 e9       	ldi	r24, 0x96	; 150
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <dht11_get_data+0x15a>
		// 	return (bits[0]);
		// }
		return 1;
	}

	return DHT11_ERROR;
 1ea:	86 e9       	ldi	r24, 0x96	; 150
}
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	08 95       	ret

00000202 <main>:
#include <stdlib.h>



int main(void)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	ab 97       	sbiw	r28, 0x2b	; 43
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
    UART_int();
 216:	0e 94 a6 01 	call	0x34c	; 0x34c <UART_int>
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	95 e3       	ldi	r25, 0x35	; 53
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x1c>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x22>
 224:	00 00       	nop
	_delay_ms(5);
	uint8_t tempHumData_channel0[3]; //dht11 data from first sensor
	uint8_t tempHumData_channel1[3]; //dht22 data from second sensor
	unsigned char tempString[] = {'T','e','m','p',' ','=',' ','\0'};
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	e0 e6       	ldi	r30, 0x60	; 96
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	de 01       	movw	r26, r28
 22e:	17 96       	adiw	r26, 0x07	; 7
 230:	01 90       	ld	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	8a 95       	dec	r24
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x2e>
	unsigned char humString[] = {'H','u','m','d',' ','=',' ','\0'};
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	e8 e6       	ldi	r30, 0x68	; 104
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	de 01       	movw	r26, r28
 240:	1f 96       	adiw	r26, 0x0f	; 15
 242:	01 90       	ld	r0, Z+
 244:	0d 92       	st	X+, r0
 246:	8a 95       	dec	r24
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x40>
	unsigned char sensor0[] = {'S','e','n','s','o','r','1',' ','\0'};
 24a:	89 e0       	ldi	r24, 0x09	; 9
 24c:	e0 e7       	ldi	r30, 0x70	; 112
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	de 01       	movw	r26, r28
 252:	57 96       	adiw	r26, 0x17	; 23
 254:	01 90       	ld	r0, Z+
 256:	0d 92       	st	X+, r0
 258:	8a 95       	dec	r24
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x52>
	unsigned char sensor1[] = {'S','e','n','s','o','r','2',' ','\0'};			
 25c:	89 e0       	ldi	r24, 0x09	; 9
 25e:	e9 e7       	ldi	r30, 0x79	; 121
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	de 01       	movw	r26, r28
 264:	90 96       	adiw	r26, 0x20	; 32
 266:	01 90       	ld	r0, Z+
 268:	0d 92       	st	X+, r0
 26a:	8a 95       	dec	r24
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x64>
	unsigned char buffer[3]; //used in itoa 

	sei();
 26e:	78 94       	sei
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	2f eb       	ldi	r18, 0xBF	; 191
 274:	81 e2       	ldi	r24, 0x21	; 33
 276:	91 50       	subi	r25, 0x01	; 1
 278:	20 40       	sbci	r18, 0x00	; 0
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x74>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x7e>
 280:	00 00       	nop
	
	_delay_ms(1000);
	while(1){
		
		if(gUartRFlag == 1  )
 282:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <gUartRFlag>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	09 f0       	breq	.+2      	; 0x28c <main+0x8a>
 28a:	56 c0       	rjmp	.+172    	; 0x338 <main+0x136>
		{
				cli();//cretical section 
 28c:	f8 94       	cli
			
			dht11_get_data(tempHumData_channel0,channel_0);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	0e 94 49 00 	call	0x92	; 0x92 <dht11_get_data>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	4a e0       	ldi	r20, 0x0A	; 10
 29c:	be 01       	movw	r22, r28
 29e:	67 5d       	subi	r22, 0xD7	; 215
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__itoa_ncheck>
			itoa(tempHumData_channel0[0],buffer,10);
			UART_string_tx(sensor0);
 2a8:	ce 01       	movw	r24, r28
 2aa:	47 96       	adiw	r24, 0x17	; 23
 2ac:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			UART_string_tx(tempString);
 2b0:	ce 01       	movw	r24, r28
 2b2:	07 96       	adiw	r24, 0x07	; 7
 2b4:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			UART_string_tx(buffer);
 2b8:	ce 01       	movw	r24, r28
 2ba:	89 96       	adiw	r24, 0x29	; 41
 2bc:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	be 01       	movw	r22, r28
 2c6:	67 5d       	subi	r22, 0xD7	; 215
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__itoa_ncheck>
			itoa(tempHumData_channel0[1],buffer,10);
			UART_string_tx(humString);
 2d0:	ce 01       	movw	r24, r28
 2d2:	0f 96       	adiw	r24, 0x0f	; 15
 2d4:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			UART_string_tx(buffer);
 2d8:	ce 01       	movw	r24, r28
 2da:	89 96       	adiw	r24, 0x29	; 41
 2dc:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			
			
			dht11_get_data(tempHumData_channel1,channel_1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	ce 01       	movw	r24, r28
 2e4:	04 96       	adiw	r24, 0x04	; 4
 2e6:	0e 94 49 00 	call	0x92	; 0x92 <dht11_get_data>
 2ea:	8c 81       	ldd	r24, Y+4	; 0x04
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	be 01       	movw	r22, r28
 2f0:	67 5d       	subi	r22, 0xD7	; 215
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__itoa_ncheck>
			itoa(tempHumData_channel1[0],buffer,10);
			UART_string_tx(sensor1);
 2fa:	ce 01       	movw	r24, r28
 2fc:	80 96       	adiw	r24, 0x20	; 32
 2fe:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			UART_string_tx(tempString);
 302:	ce 01       	movw	r24, r28
 304:	07 96       	adiw	r24, 0x07	; 7
 306:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			UART_string_tx(buffer);
 30a:	ce 01       	movw	r24, r28
 30c:	89 96       	adiw	r24, 0x29	; 41
 30e:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
 312:	8d 81       	ldd	r24, Y+5	; 0x05
 314:	4a e0       	ldi	r20, 0x0A	; 10
 316:	be 01       	movw	r22, r28
 318:	67 5d       	subi	r22, 0xD7	; 215
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__itoa_ncheck>
			itoa(tempHumData_channel1[1],buffer,10);
			UART_string_tx(humString);
 322:	ce 01       	movw	r24, r28
 324:	0f 96       	adiw	r24, 0x0f	; 15
 326:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			UART_string_tx(buffer);
 32a:	ce 01       	movw	r24, r28
 32c:	89 96       	adiw	r24, 0x29	; 41
 32e:	0e 94 b8 01 	call	0x370	; 0x370 <UART_string_tx>
			
			gUartRFlag=0;
 332:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <gUartRFlag>
			sei();
 336:	78 94       	sei
 338:	9f ef       	ldi	r25, 0xFF	; 255
 33a:	2f eb       	ldi	r18, 0xBF	; 191
 33c:	81 e2       	ldi	r24, 0x21	; 33
 33e:	91 50       	subi	r25, 0x01	; 1
 340:	20 40       	sbci	r18, 0x00	; 0
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x13c>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x146>
 348:	00 00       	nop
 34a:	9b cf       	rjmp	.-202    	; 0x282 <main+0x80>

0000034c <UART_int>:
extern unsigned char gUartRFlag;
extern unsigned char gUartData;
void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);   // enable Tx Rx and Rx interrupt
 34c:	88 e9       	ldi	r24, 0x98	; 152
 34e:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 bit data
 350:	86 e8       	ldi	r24, 0x86	; 134
 352:	80 bd       	out	0x20, r24	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	85 e2       	ldi	r24, 0x25	; 37
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <UART_int+0xa>
	_delay_us(10);
	UCSRC&=~(1<<URSEL);
 35a:	80 b5       	in	r24, 0x20	; 32
 35c:	8f 77       	andi	r24, 0x7F	; 127
 35e:	80 bd       	out	0x20, r24	; 32
	UBRRH = (unsigned char)(UBRRset>>8);
 360:	10 bc       	out	0x20, r1	; 32
	UBRRL= (unsigned char)(UBRRset);
 362:	87 e4       	ldi	r24, 0x47	; 71
 364:	89 b9       	out	0x09, r24	; 9
 366:	08 95       	ret

00000368 <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSRA & (1<<UDRE)));
 368:	5d 9b       	sbis	0x0b, 5	; 11
 36a:	fe cf       	rjmp	.-4      	; 0x368 <UART_tx>
	UDR=x;
 36c:	8c b9       	out	0x0c, r24	; 12
 36e:	08 95       	ret

00000370 <UART_string_tx>:
}

void UART_string_tx(unsigned char *x)
{
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(x[i] !='\0')
 378:	80 81       	ld	r24, Z
 37a:	88 23       	and	r24, r24
 37c:	59 f0       	breq	.+22     	; 0x394 <UART_string_tx+0x24>
 37e:	8f 01       	movw	r16, r30
 380:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_tx( x[i] );
 382:	0e 94 b4 01 	call	0x368	; 0x368 <UART_tx>
		i++;
 386:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_string_tx(unsigned char *x)
{
	unsigned char i=0;
	while(x[i] !='\0')
 388:	f8 01       	movw	r30, r16
 38a:	ec 0f       	add	r30, r28
 38c:	f1 1d       	adc	r31, r1
 38e:	80 81       	ld	r24, Z
 390:	81 11       	cpse	r24, r1
 392:	f7 cf       	rjmp	.-18     	; 0x382 <UART_string_tx+0x12>
	{
		UART_tx( x[i] );
		i++;
	}
}
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <__vector_13>:

ISR(USART_RXC_vect)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	8f 93       	push	r24
	cli();
 3a8:	f8 94       	cli
	
	gUartRFlag=1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <gUartRFlag>
	gUartData=UDR;
 3b0:	8c b1       	in	r24, 0x0c	; 12
 3b2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>

	sei();
 3b6:	78 94       	sei
	
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <__itoa_ncheck>:
 3c4:	bb 27       	eor	r27, r27
 3c6:	4a 30       	cpi	r20, 0x0A	; 10
 3c8:	31 f4       	brne	.+12     	; 0x3d6 <__itoa_ncheck+0x12>
 3ca:	99 23       	and	r25, r25
 3cc:	22 f4       	brpl	.+8      	; 0x3d6 <__itoa_ncheck+0x12>
 3ce:	bd e2       	ldi	r27, 0x2D	; 45
 3d0:	90 95       	com	r25
 3d2:	81 95       	neg	r24
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__utoa_common>

000003da <__utoa_ncheck>:
 3da:	bb 27       	eor	r27, r27

000003dc <__utoa_common>:
 3dc:	fb 01       	movw	r30, r22
 3de:	55 27       	eor	r21, r21
 3e0:	aa 27       	eor	r26, r26
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	aa 1f       	adc	r26, r26
 3e8:	a4 17       	cp	r26, r20
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <__utoa_common+0x14>
 3ec:	a4 1b       	sub	r26, r20
 3ee:	83 95       	inc	r24
 3f0:	50 51       	subi	r21, 0x10	; 16
 3f2:	b9 f7       	brne	.-18     	; 0x3e2 <__utoa_common+0x6>
 3f4:	a0 5d       	subi	r26, 0xD0	; 208
 3f6:	aa 33       	cpi	r26, 0x3A	; 58
 3f8:	08 f0       	brcs	.+2      	; 0x3fc <__utoa_common+0x20>
 3fa:	a9 5d       	subi	r26, 0xD9	; 217
 3fc:	a1 93       	st	Z+, r26
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	79 f7       	brne	.-34     	; 0x3e0 <__utoa_common+0x4>
 402:	b1 11       	cpse	r27, r1
 404:	b1 93       	st	Z+, r27
 406:	11 92       	st	Z+, r1
 408:	cb 01       	movw	r24, r22
 40a:	0c 94 07 02 	jmp	0x40e	; 0x40e <strrev>

0000040e <strrev>:
 40e:	dc 01       	movw	r26, r24
 410:	fc 01       	movw	r30, r24
 412:	67 2f       	mov	r22, r23
 414:	71 91       	ld	r23, Z+
 416:	77 23       	and	r23, r23
 418:	e1 f7       	brne	.-8      	; 0x412 <strrev+0x4>
 41a:	32 97       	sbiw	r30, 0x02	; 2
 41c:	04 c0       	rjmp	.+8      	; 0x426 <strrev+0x18>
 41e:	7c 91       	ld	r23, X
 420:	6d 93       	st	X+, r22
 422:	70 83       	st	Z, r23
 424:	62 91       	ld	r22, -Z
 426:	ae 17       	cp	r26, r30
 428:	bf 07       	cpc	r27, r31
 42a:	c8 f3       	brcs	.-14     	; 0x41e <strrev+0x10>
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
