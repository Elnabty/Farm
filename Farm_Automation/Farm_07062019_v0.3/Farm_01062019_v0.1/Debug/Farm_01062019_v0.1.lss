
Farm_01062019_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000011ce  00001262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080009e  0080009e  000012a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fd  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000966  00000000  00000000  00002689  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a8  00000000  00000000  00002fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  000039dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5f  00000000  00000000  00003e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_13>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__divsf3_pse+0x78>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <main+0x14c>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <dht_getdata_dht_22+0x9a>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <dht_getdata_dht_11+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee ec       	ldi	r30, 0xCE	; 206
     162:	f1 e1       	ldi	r31, 0x11	; 17
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	ae 39       	cpi	r26, 0x9E	; 158
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	ae e9       	ldi	r26, 0x9E	; 158
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a1 3a       	cpi	r26, 0xA1	; 161
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
     184:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <dht_getdata_dht_11>:

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     18c:	bf 92       	push	r11
     18e:	cf 92       	push	r12
     190:	df 92       	push	r13
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <dht_getdata_dht_11+0x14>
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <dht_getdata_dht_11+0x16>
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     1a8:	fe 01       	movw	r30, r28
     1aa:	31 96       	adiw	r30, 0x01	; 1
     1ac:	25 e0       	ldi	r18, 0x05	; 5
     1ae:	df 01       	movw	r26, r30
     1b0:	1d 92       	st	X+, r1
     1b2:	2a 95       	dec	r18
     1b4:	e9 f7       	brne	.-6      	; 0x1b0 <dht_getdata_dht_11+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
     1b6:	2a b3       	in	r18, 0x1a	; 26
     1b8:	e1 e0       	ldi	r30, 0x01	; 1
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	04 2e       	mov	r0, r20
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <dht_getdata_dht_11+0x38>
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	0a 94       	dec	r0
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <dht_getdata_dht_11+0x34>
     1c8:	2e 2b       	or	r18, r30
     1ca:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //high
     1cc:	2b b3       	in	r18, 0x1b	; 27
     1ce:	2e 2b       	or	r18, r30
     1d0:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d2:	bf ef       	ldi	r27, 0xFF	; 255
     1d4:	2f e5       	ldi	r18, 0x5F	; 95
     1d6:	33 e0       	ldi	r19, 0x03	; 3
     1d8:	b1 50       	subi	r27, 0x01	; 1
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	30 40       	sbci	r19, 0x00	; 0
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <dht_getdata_dht_11+0x4c>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <dht_getdata_dht_11+0x56>
     1e2:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
     1e4:	3b b3       	in	r19, 0x1b	; 27
     1e6:	2e 2f       	mov	r18, r30
     1e8:	20 95       	com	r18
     1ea:	32 23       	and	r19, r18
     1ec:	3b bb       	out	0x1b, r19	; 27
     1ee:	a6 e6       	ldi	r26, 0x66	; 102
     1f0:	b2 ec       	ldi	r27, 0xC2	; 194
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <dht_getdata_dht_11+0x66>
     1f6:	00 00       	nop
	
		_delay_ms(18);
	
	
	
	DHT_PORT |= (1<<channel); //high
     1f8:	3b b3       	in	r19, 0x1b	; 27
     1fa:	3e 2b       	or	r19, r30
     1fc:	3b bb       	out	0x1b, r19	; 27
	DHT_DDR &= ~(1<<channel); //input
     1fe:	3a b3       	in	r19, 0x1a	; 26
     200:	23 23       	and	r18, r19
     202:	2a bb       	out	0x1a, r18	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     204:	b3 e9       	ldi	r27, 0x93	; 147
     206:	ba 95       	dec	r27
     208:	f1 f7       	brne	.-4      	; 0x206 <dht_getdata_dht_11+0x7a>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <dht_getdata_dht_11+0x80>
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
     20c:	29 b3       	in	r18, 0x19	; 25
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	04 2e       	mov	r0, r20
     212:	02 c0       	rjmp	.+4      	; 0x218 <dht_getdata_dht_11+0x8c>
     214:	35 95       	asr	r19
     216:	27 95       	ror	r18
     218:	0a 94       	dec	r0
     21a:	e2 f7       	brpl	.-8      	; 0x214 <dht_getdata_dht_11+0x88>
     21c:	20 fd       	sbrc	r18, 0
     21e:	71 c0       	rjmp	.+226    	; 0x302 <dht_getdata_dht_11+0x176>
     220:	ad ed       	ldi	r26, 0xDD	; 221
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	11 97       	sbiw	r26, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <dht_getdata_dht_11+0x98>
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
     228:	29 b3       	in	r18, 0x19	; 25
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <dht_getdata_dht_11+0xa6>
     22e:	35 95       	asr	r19
     230:	27 95       	ror	r18
     232:	4a 95       	dec	r20
     234:	e2 f7       	brpl	.-8      	; 0x22e <dht_getdata_dht_11+0xa2>
     236:	20 ff       	sbrs	r18, 0
     238:	66 c0       	rjmp	.+204    	; 0x306 <dht_getdata_dht_11+0x17a>
     23a:	ad ed       	ldi	r26, 0xDD	; 221
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	11 97       	sbiw	r26, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <dht_getdata_dht_11+0xb2>
     242:	9e 01       	movw	r18, r28
     244:	2f 5f       	subi	r18, 0xFF	; 255
     246:	3f 4f       	sbci	r19, 0xFF	; 255
     248:	79 01       	movw	r14, r18
     24a:	6e 01       	movw	r12, r28
     24c:	36 e0       	ldi	r19, 0x06	; 6
     24e:	c3 0e       	add	r12, r19
     250:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
     252:	01 e0       	ldi	r16, 0x01	; 1
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	32 c0       	rjmp	.+100    	; 0x2bc <dht_getdata_dht_11+0x130>
     258:	41 50       	subi	r20, 0x01	; 1
     25a:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     25c:	19 f4       	brne	.+6      	; 0x264 <dht_getdata_dht_11+0xd8>
     25e:	55 c0       	rjmp	.+170    	; 0x30a <dht_getdata_dht_11+0x17e>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     260:	49 ec       	ldi	r20, 0xC9	; 201
     262:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
     264:	29 b3       	in	r18, 0x19	; 25
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	2e 23       	and	r18, r30
     26a:	3f 23       	and	r19, r31
     26c:	23 2b       	or	r18, r19
     26e:	a1 f3       	breq	.-24     	; 0x258 <dht_getdata_dht_11+0xcc>
     270:	4e e6       	ldi	r20, 0x6E	; 110
     272:	4a 95       	dec	r20
     274:	f1 f7       	brne	.-4      	; 0x272 <dht_getdata_dht_11+0xe6>
     276:	00 c0       	rjmp	.+0      	; 0x278 <dht_getdata_dht_11+0xec>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
     278:	29 b3       	in	r18, 0x19	; 25
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	2e 23       	and	r18, r30
     27e:	3f 23       	and	r19, r31
     280:	23 2b       	or	r18, r19
     282:	41 f0       	breq	.+16     	; 0x294 <dht_getdata_dht_11+0x108>
				result |= (1<<(7-i));
     284:	98 01       	movw	r18, r16
     286:	0a 2e       	mov	r0, r26
     288:	02 c0       	rjmp	.+4      	; 0x28e <dht_getdata_dht_11+0x102>
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	0a 94       	dec	r0
     290:	e2 f7       	brpl	.-8      	; 0x28a <dht_getdata_dht_11+0xfe>
     292:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     294:	49 ec       	ldi	r20, 0xC9	; 201
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <dht_getdata_dht_11+0x114>
     29a:	41 50       	subi	r20, 0x01	; 1
     29c:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     29e:	b9 f1       	breq	.+110    	; 0x30e <dht_getdata_dht_11+0x182>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     2a0:	29 b3       	in	r18, 0x19	; 25
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	2e 23       	and	r18, r30
     2a6:	3f 23       	and	r19, r31
     2a8:	23 2b       	or	r18, r19
     2aa:	b9 f7       	brne	.-18     	; 0x29a <dht_getdata_dht_11+0x10e>
     2ac:	11 97       	sbiw	r26, 0x01	; 1
     2ae:	c0 f6       	brcc	.-80     	; 0x260 <dht_getdata_dht_11+0xd4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     2b0:	d7 01       	movw	r26, r14
     2b2:	bd 92       	st	X+, r11
     2b4:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     2b6:	ca 16       	cp	r12, r26
     2b8:	db 06       	cpc	r13, r27
     2ba:	21 f0       	breq	.+8      	; 0x2c4 <dht_getdata_dht_11+0x138>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     2bc:	a7 e0       	ldi	r26, 0x07	; 7
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	b1 2c       	mov	r11, r1
     2c2:	ce cf       	rjmp	.-100    	; 0x260 <dht_getdata_dht_11+0xd4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
     2c4:	2a b3       	in	r18, 0x1a	; 26
     2c6:	2e 2b       	or	r18, r30
     2c8:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //low
     2ca:	2b b3       	in	r18, 0x1b	; 27
     2cc:	e2 2b       	or	r30, r18
     2ce:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d0:	bf ef       	ldi	r27, 0xFF	; 255
     2d2:	ef e5       	ldi	r30, 0x5F	; 95
     2d4:	f3 e0       	ldi	r31, 0x03	; 3
     2d6:	b1 50       	subi	r27, 0x01	; 1
     2d8:	e0 40       	sbci	r30, 0x00	; 0
     2da:	f0 40       	sbci	r31, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <dht_getdata_dht_11+0x14a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <dht_getdata_dht_11+0x154>
     2e0:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     2e2:	49 81       	ldd	r20, Y+1	; 0x01
     2e4:	5b 81       	ldd	r21, Y+3	; 0x03
     2e6:	2a 81       	ldd	r18, Y+2	; 0x02
     2e8:	24 0f       	add	r18, r20
     2ea:	25 0f       	add	r18, r21
     2ec:	3c 81       	ldd	r19, Y+4	; 0x04
     2ee:	23 0f       	add	r18, r19
     2f0:	3d 81       	ldd	r19, Y+5	; 0x05
     2f2:	23 13       	cpse	r18, r19
     2f4:	0e c0       	rjmp	.+28     	; 0x312 <dht_getdata_dht_11+0x186>
		//return temperature and humidity
		
			*temperature = bits[2];
     2f6:	dc 01       	movw	r26, r24
     2f8:	5c 93       	st	X, r21
			*humidity = bits[0];
     2fa:	fb 01       	movw	r30, r22
     2fc:	40 83       	st	Z, r20
		



		
		return 0;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	09 c0       	rjmp	.+18     	; 0x314 <dht_getdata_dht_11+0x188>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	07 c0       	rjmp	.+14     	; 0x314 <dht_getdata_dht_11+0x188>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	05 c0       	rjmp	.+10     	; 0x314 <dht_getdata_dht_11+0x188>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	03 c0       	rjmp	.+6      	; 0x314 <dht_getdata_dht_11+0x188>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	01 c0       	rjmp	.+2      	; 0x314 <dht_getdata_dht_11+0x188>

		
		return 0;
	}

	return -1;
     312:	8f ef       	ldi	r24, 0xFF	; 255
}
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	08 95       	ret

00000332 <dht_getdata_dht_22>:


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     332:	bf 92       	push	r11
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	00 d0       	rcall	.+0      	; 0x346 <dht_getdata_dht_22+0x14>
     346:	00 d0       	rcall	.+0      	; 0x348 <dht_getdata_dht_22+0x16>
     348:	1f 92       	push	r1
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     34e:	fe 01       	movw	r30, r28
     350:	31 96       	adiw	r30, 0x01	; 1
     352:	25 e0       	ldi	r18, 0x05	; 5
     354:	df 01       	movw	r26, r30
     356:	1d 92       	st	X+, r1
     358:	2a 95       	dec	r18
     35a:	e9 f7       	brne	.-6      	; 0x356 <dht_getdata_dht_22+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
     35c:	2a b3       	in	r18, 0x1a	; 26
     35e:	e1 e0       	ldi	r30, 0x01	; 1
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	04 2e       	mov	r0, r20
     364:	02 c0       	rjmp	.+4      	; 0x36a <dht_getdata_dht_22+0x38>
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <dht_getdata_dht_22+0x34>
     36e:	2e 2b       	or	r18, r30
     370:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //high
     372:	2b b3       	in	r18, 0x1b	; 27
     374:	2e 2b       	or	r18, r30
     376:	2b bb       	out	0x1b, r18	; 27
     378:	bf ef       	ldi	r27, 0xFF	; 255
     37a:	2f e5       	ldi	r18, 0x5F	; 95
     37c:	33 e0       	ldi	r19, 0x03	; 3
     37e:	b1 50       	subi	r27, 0x01	; 1
     380:	20 40       	sbci	r18, 0x00	; 0
     382:	30 40       	sbci	r19, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <dht_getdata_dht_22+0x4c>
     386:	00 c0       	rjmp	.+0      	; 0x388 <dht_getdata_dht_22+0x56>
     388:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
     38a:	3b b3       	in	r19, 0x1b	; 27
     38c:	2e 2f       	mov	r18, r30
     38e:	20 95       	com	r18
     390:	32 23       	and	r19, r18
     392:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	a6 e6       	ldi	r26, 0x66	; 102
     396:	b5 e0       	ldi	r27, 0x05	; 5
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <dht_getdata_dht_22+0x66>
     39c:	00 00       	nop

		_delay_us(500);
	
	
	
	DHT_PORT |= (1<<channel); //high
     39e:	3b b3       	in	r19, 0x1b	; 27
     3a0:	3e 2b       	or	r19, r30
     3a2:	3b bb       	out	0x1b, r19	; 27
	DHT_DDR &= ~(1<<channel); //input
     3a4:	3a b3       	in	r19, 0x1a	; 26
     3a6:	23 23       	and	r18, r19
     3a8:	2a bb       	out	0x1a, r18	; 26
     3aa:	b3 e9       	ldi	r27, 0x93	; 147
     3ac:	ba 95       	dec	r27
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <dht_getdata_dht_22+0x7a>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <dht_getdata_dht_22+0x80>
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
     3b2:	29 b3       	in	r18, 0x19	; 25
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	04 2e       	mov	r0, r20
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <dht_getdata_dht_22+0x8c>
     3ba:	35 95       	asr	r19
     3bc:	27 95       	ror	r18
     3be:	0a 94       	dec	r0
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <dht_getdata_dht_22+0x88>
     3c2:	20 fd       	sbrc	r18, 0
     3c4:	ac c0       	rjmp	.+344    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     3c6:	ad ed       	ldi	r26, 0xDD	; 221
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <dht_getdata_dht_22+0x98>
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
     3ce:	29 b3       	in	r18, 0x19	; 25
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <dht_getdata_dht_22+0xa6>
     3d4:	35 95       	asr	r19
     3d6:	27 95       	ror	r18
     3d8:	4a 95       	dec	r20
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <dht_getdata_dht_22+0xa2>
     3dc:	20 ff       	sbrs	r18, 0
     3de:	a1 c0       	rjmp	.+322    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     3e0:	ad ed       	ldi	r26, 0xDD	; 221
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	11 97       	sbiw	r26, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <dht_getdata_dht_22+0xb2>
     3e8:	9e 01       	movw	r18, r28
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	79 01       	movw	r14, r18
     3f0:	6e 01       	movw	r12, r28
     3f2:	36 e0       	ldi	r19, 0x06	; 6
     3f4:	c3 0e       	add	r12, r19
     3f6:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
     3f8:	01 e0       	ldi	r16, 0x01	; 1
     3fa:	10 e0       	ldi	r17, 0x00	; 0
     3fc:	33 c0       	rjmp	.+102    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     3fe:	41 50       	subi	r20, 0x01	; 1
     400:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     402:	19 f4       	brne	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     404:	90 c0       	rjmp	.+288    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>

	return -1;
}


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     406:	49 ec       	ldi	r20, 0xC9	; 201
     408:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
     40a:	29 b3       	in	r18, 0x19	; 25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	2e 23       	and	r18, r30
     410:	3f 23       	and	r19, r31
     412:	23 2b       	or	r18, r19
     414:	a1 f3       	breq	.-24     	; 0x3fe <dht_getdata_dht_22+0xcc>
     416:	4e e6       	ldi	r20, 0x6E	; 110
     418:	4a 95       	dec	r20
     41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
     41e:	29 b3       	in	r18, 0x19	; 25
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	2e 23       	and	r18, r30
     424:	3f 23       	and	r19, r31
     426:	23 2b       	or	r18, r19
     428:	41 f0       	breq	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			result |= (1<<(7-i));
     42a:	98 01       	movw	r18, r16
     42c:	0a 2e       	mov	r0, r26
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	22 0f       	add	r18, r18
     432:	33 1f       	adc	r19, r19
     434:	0a 94       	dec	r0
     436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     43a:	49 ec       	ldi	r20, 0xC9	; 201
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     440:	41 50       	subi	r20, 0x01	; 1
     442:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     444:	09 f4       	brne	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	71 c0       	rjmp	.+226    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     448:	29 b3       	in	r18, 0x19	; 25
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	2e 23       	and	r18, r30
     44e:	3f 23       	and	r19, r31
     450:	23 2b       	or	r18, r19
     452:	b1 f7       	brne	.-20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     454:	11 97       	sbiw	r26, 0x01	; 1
     456:	b8 f6       	brcc	.-82     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     458:	d7 01       	movw	r26, r14
     45a:	bd 92       	st	X+, r11
     45c:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     45e:	ca 16       	cp	r12, r26
     460:	db 06       	cpc	r13, r27
     462:	21 f0       	breq	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

	return -1;
}


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     464:	a7 e0       	ldi	r26, 0x07	; 7
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	b1 2c       	mov	r11, r1
     46a:	cd cf       	rjmp	.-102    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
     46c:	2a b3       	in	r18, 0x1a	; 26
     46e:	2e 2b       	or	r18, r30
     470:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //low
     472:	2b b3       	in	r18, 0x1b	; 27
     474:	e2 2b       	or	r30, r18
     476:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     478:	bf ef       	ldi	r27, 0xFF	; 255
     47a:	ef e5       	ldi	r30, 0x5F	; 95
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	b1 50       	subi	r27, 0x01	; 1
     480:	e0 40       	sbci	r30, 0x00	; 0
     482:	f0 40       	sbci	r31, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     488:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     48a:	59 81       	ldd	r21, Y+1	; 0x01
     48c:	0a 81       	ldd	r16, Y+2	; 0x02
     48e:	4b 81       	ldd	r20, Y+3	; 0x03
     490:	2c 81       	ldd	r18, Y+4	; 0x04
     492:	35 2f       	mov	r19, r21
     494:	30 0f       	add	r19, r16
     496:	34 0f       	add	r19, r20
     498:	32 0f       	add	r19, r18
     49a:	ed 81       	ldd	r30, Y+5	; 0x05
     49c:	3e 13       	cpse	r19, r30
     49e:	47 c0       	rjmp	.+142    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     4a0:	7b 01       	movw	r14, r22
     4a2:	6c 01       	movw	r12, r24



			uint16_t rawhumidity = bits[0]<<8 | bits[1];
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	15 2b       	or	r17, r21
			uint16_t rawtemperature = bits[2]<<8 | bits[3];
     4a8:	62 2f       	mov	r22, r18
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	74 2b       	or	r23, r20
			if(rawtemperature & 0x8000) {
     4ae:	77 23       	and	r23, r23
     4b0:	a4 f4       	brge	.+40     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
     4b2:	7f 77       	andi	r23, 0x7F	; 127
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 2c 05 	call	0xa58	; 0xa58 <__floatunsisf>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e2       	ldi	r20, 0x20	; 32
     4c2:	51 e4       	ldi	r21, 0x41	; 65
     4c4:	0e 94 84 04 	call	0x908	; 0x908 <__divsf3>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	b0 58       	subi	r27, 0x80	; 128
     4ce:	f6 01       	movw	r30, r12
     4d0:	80 83       	st	Z, r24
     4d2:	91 83       	std	Z+1, r25	; 0x01
     4d4:	a2 83       	std	Z+2, r26	; 0x02
     4d6:	b3 83       	std	Z+3, r27	; 0x03
     4d8:	10 c0       	rjmp	.+32     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
				} else {
				*temperature = (float)(rawtemperature)/10.0;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 2c 05 	call	0xa58	; 0xa58 <__floatunsisf>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e2       	ldi	r20, 0x20	; 32
     4e8:	51 e4       	ldi	r21, 0x41	; 65
     4ea:	0e 94 84 04 	call	0x908	; 0x908 <__divsf3>
     4ee:	d6 01       	movw	r26, r12
     4f0:	6d 93       	st	X+, r22
     4f2:	7d 93       	st	X+, r23
     4f4:	8d 93       	st	X+, r24
     4f6:	9c 93       	st	X, r25
     4f8:	13 97       	sbiw	r26, 0x03	; 3
			}
			*humidity = (float)(rawhumidity)/10.0;
     4fa:	b8 01       	movw	r22, r16
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 2c 05 	call	0xa58	; 0xa58 <__floatunsisf>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e2       	ldi	r20, 0x20	; 32
     50a:	51 e4       	ldi	r21, 0x41	; 65
     50c:	0e 94 84 04 	call	0x908	; 0x908 <__divsf3>
     510:	f7 01       	movw	r30, r14
     512:	60 83       	st	Z, r22
     514:	71 83       	std	Z+1, r23	; 0x01
     516:	82 83       	std	Z+2, r24	; 0x02
     518:	93 83       	std	Z+3, r25	; 0x03
		

		
		return 0;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	09 c0       	rjmp	.+18     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	07 c0       	rjmp	.+14     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	05 c0       	rjmp	.+10     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	03 c0       	rjmp	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	01 c0       	rjmp	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>

		
		return 0;
	}

	return -1;
     52e:	8f ef       	ldi	r24, 0xFF	; 255
}
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	bf 90       	pop	r11
     54c:	08 95       	ret

0000054e <main>:
#define LED_ON PORTC&=~(1<<LED);
#define LED_OFF PORTC|=(1<<LED);

uint8_t manualflag = 0;
int main(void)
{
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	af 97       	sbiw	r28, 0x2f	; 47
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
    UART_int();
     562:	0e 94 dd 03 	call	0x7ba	; 0x7ba <UART_int>
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	95 e3       	ldi	r25, 0x35	; 53
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <main+0x1c>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x22>
     570:	00 00       	nop
	_delay_ms(5);
	DDRC = 0xFF;
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;
     576:	15 ba       	out	0x15, r1	; 21
		float ftemperature = 0;
     578:	19 82       	std	Y+1, r1	; 0x01
     57a:	1a 82       	std	Y+2, r1	; 0x02
     57c:	1b 82       	std	Y+3, r1	; 0x03
     57e:	1c 82       	std	Y+4, r1	; 0x04
		float fhumidity = 0;
     580:	1d 82       	std	Y+5, r1	; 0x05
     582:	1e 82       	std	Y+6, r1	; 0x06
     584:	1f 82       	std	Y+7, r1	; 0x07
     586:	18 86       	std	Y+8, r1	; 0x08
		int8_t temperature = 0;
     588:	19 86       	std	Y+9, r1	; 0x09
		int8_t humidity = 0;
     58a:	1a 86       	std	Y+10, r1	; 0x0a
		
	unsigned char tempString[] = {'T','e','m','p',' ','=',' ','\0'};
     58c:	88 e0       	ldi	r24, 0x08	; 8
     58e:	e0 e6       	ldi	r30, 0x60	; 96
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	de 01       	movw	r26, r28
     594:	1b 96       	adiw	r26, 0x0b	; 11
     596:	01 90       	ld	r0, Z+
     598:	0d 92       	st	X+, r0
     59a:	8a 95       	dec	r24
     59c:	e1 f7       	brne	.-8      	; 0x596 <main+0x48>
	unsigned char humString[] = {'H','u','m','d',' ','=',' ','\0'};
     59e:	88 e0       	ldi	r24, 0x08	; 8
     5a0:	e8 e6       	ldi	r30, 0x68	; 104
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	de 01       	movw	r26, r28
     5a6:	53 96       	adiw	r26, 0x13	; 19
     5a8:	01 90       	ld	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	8a 95       	dec	r24
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x5a>
	unsigned char sensor0[] = {'S','e','n','s','o','r','1',' ','\0'};
     5b0:	89 e0       	ldi	r24, 0x09	; 9
     5b2:	e0 e7       	ldi	r30, 0x70	; 112
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	de 01       	movw	r26, r28
     5b8:	5b 96       	adiw	r26, 0x1b	; 27
     5ba:	01 90       	ld	r0, Z+
     5bc:	0d 92       	st	X+, r0
     5be:	8a 95       	dec	r24
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <main+0x6c>
	unsigned char sensor1[] = {'S','e','n','s','o','r','2',' ','\0'};			
     5c2:	89 e0       	ldi	r24, 0x09	; 9
     5c4:	e9 e7       	ldi	r30, 0x79	; 121
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	de 01       	movw	r26, r28
     5ca:	94 96       	adiw	r26, 0x24	; 36
     5cc:	01 90       	ld	r0, Z+
     5ce:	0d 92       	st	X+, r0
     5d0:	8a 95       	dec	r24
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0x7e>
	unsigned char buffer[3]; //used in itoa 

	sei();
     5d4:	78 94       	sei
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	2f eb       	ldi	r18, 0xBF	; 191
     5da:	81 e2       	ldi	r24, 0x21	; 33
     5dc:	91 50       	subi	r25, 0x01	; 1
     5de:	20 40       	sbci	r18, 0x00	; 0
     5e0:	80 40       	sbci	r24, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x8e>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x98>
     5e6:	00 00       	nop
					UART_string_tx(buffer);
					UART_tx('\n');		
			
			break;
			
			case '2': FAN_ON;manualflag=1; break;
     5e8:	ff 24       	eor	r15, r15
     5ea:	f3 94       	inc	r15
	sei();
	
	_delay_ms(1000);
	while(1){
		
		if( gUartRFlag == 1 )
     5ec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <gUartRFlag>
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <main+0xa8>
     5f4:	86 c0       	rjmp	.+268    	; 0x702 <main+0x1b4>
		{
				cli();//cretical section 
     5f6:	f8 94       	cli
				UART_tx(gUartData);
     5f8:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <gUartData>
     5fc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <UART_tx>
			switch (gUartData)
     600:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <gUartData>
     604:	82 33       	cpi	r24, 0x32	; 50
     606:	09 f4       	brne	.+2      	; 0x60a <main+0xbc>
     608:	64 c0       	rjmp	.+200    	; 0x6d2 <main+0x184>
     60a:	83 33       	cpi	r24, 0x33	; 51
     60c:	09 f4       	brne	.+2      	; 0x610 <main+0xc2>
     60e:	65 c0       	rjmp	.+202    	; 0x6da <main+0x18c>
     610:	81 33       	cpi	r24, 0x31	; 49
     612:	09 f0       	breq	.+2      	; 0x616 <main+0xc8>
     614:	66 c0       	rjmp	.+204    	; 0x6e2 <main+0x194>
			{
				
			
			case '1':
					dht_getdata_dht_22(&ftemperature,&fhumidity,0);
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	be 01       	movw	r22, r28
     61a:	6b 5f       	subi	r22, 0xFB	; 251
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	ce 01       	movw	r24, r28
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	0e 94 99 01 	call	0x332	; 0x332 <dht_getdata_dht_22>
					dtostrf(ftemperature, 3, 3, buffer);
     626:	69 81       	ldd	r22, Y+1	; 0x01
     628:	7a 81       	ldd	r23, Y+2	; 0x02
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	8e 01       	movw	r16, r28
     630:	03 5d       	subi	r16, 0xD3	; 211
     632:	1f 4f       	sbci	r17, 0xFF	; 255
     634:	23 e0       	ldi	r18, 0x03	; 3
     636:	43 e0       	ldi	r20, 0x03	; 3
     638:	0e 94 27 06 	call	0xc4e	; 0xc4e <dtostrf>
					UART_string_tx(sensor0);
     63c:	ce 01       	movw	r24, r28
     63e:	4b 96       	adiw	r24, 0x1b	; 27
     640:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_string_tx(tempString);
     644:	ce 01       	movw	r24, r28
     646:	0b 96       	adiw	r24, 0x0b	; 11
     648:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_string_tx(buffer);
     64c:	c8 01       	movw	r24, r16
     64e:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					dtostrf(fhumidity, 3, 3, buffer);
     652:	6d 81       	ldd	r22, Y+5	; 0x05
     654:	7e 81       	ldd	r23, Y+6	; 0x06
     656:	8f 81       	ldd	r24, Y+7	; 0x07
     658:	98 85       	ldd	r25, Y+8	; 0x08
     65a:	23 e0       	ldi	r18, 0x03	; 3
     65c:	43 e0       	ldi	r20, 0x03	; 3
     65e:	0e 94 27 06 	call	0xc4e	; 0xc4e <dtostrf>
					UART_string_tx(humString);
     662:	ce 01       	movw	r24, r28
     664:	43 96       	adiw	r24, 0x13	; 19
     666:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_string_tx(buffer);
     66a:	c8 01       	movw	r24, r16
     66c:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_tx('\n');
     670:	8a e0       	ldi	r24, 0x0A	; 10
     672:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <UART_tx>
					dht_getdata_dht_11(&temperature,&humidity,1);
     676:	4f 2d       	mov	r20, r15
     678:	be 01       	movw	r22, r28
     67a:	66 5f       	subi	r22, 0xF6	; 246
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	ce 01       	movw	r24, r28
     680:	09 96       	adiw	r24, 0x09	; 9
     682:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata_dht_11>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     686:	89 85       	ldd	r24, Y+9	; 0x09
     688:	4a e0       	ldi	r20, 0x0A	; 10
     68a:	b8 01       	movw	r22, r16
     68c:	08 2e       	mov	r0, r24
     68e:	00 0c       	add	r0, r0
     690:	99 0b       	sbc	r25, r25
     692:	0e 94 47 06 	call	0xc8e	; 0xc8e <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_string_tx(sensor1);
     696:	ce 01       	movw	r24, r28
     698:	84 96       	adiw	r24, 0x24	; 36
     69a:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_string_tx(tempString);
     69e:	ce 01       	movw	r24, r28
     6a0:	0b 96       	adiw	r24, 0x0b	; 11
     6a2:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_string_tx(buffer);
     6a6:	c8 01       	movw	r24, r16
     6a8:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
     6ac:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ae:	4a e0       	ldi	r20, 0x0A	; 10
     6b0:	b8 01       	movw	r22, r16
     6b2:	08 2e       	mov	r0, r24
     6b4:	00 0c       	add	r0, r0
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 47 06 	call	0xc8e	; 0xc8e <__itoa_ncheck>
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
     6bc:	ce 01       	movw	r24, r28
     6be:	43 96       	adiw	r24, 0x13	; 19
     6c0:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_string_tx(buffer);
     6c4:	c8 01       	movw	r24, r16
     6c6:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
					UART_tx('\n');		
     6ca:	8a e0       	ldi	r24, 0x0A	; 10
     6cc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <UART_tx>
			
			break;
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <main+0x19c>
			
			case '2': FAN_ON;manualflag=1; break;
     6d2:	a8 98       	cbi	0x15, 0	; 21
     6d4:	f0 92 9e 00 	sts	0x009E, r15	; 0x80009e <__data_end>
     6d8:	08 c0       	rjmp	.+16     	; 0x6ea <main+0x19c>
			case '3': FAN_OFF;manualflag=0;break;
     6da:	a8 9a       	sbi	0x15, 0	; 21
     6dc:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <main+0x19c>
			
			default:UART_string_tx("wrong request");
     6e2:	82 e8       	ldi	r24, 0x82	; 130
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
			}
			
	
			
			gUartRFlag=0;
     6ea:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <gUartRFlag>
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	2f eb       	ldi	r18, 0xBF	; 191
     6f2:	81 e2       	ldi	r24, 0x21	; 33
     6f4:	91 50       	subi	r25, 0x01	; 1
     6f6:	20 40       	sbci	r18, 0x00	; 0
     6f8:	80 40       	sbci	r24, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <main+0x1a6>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <main+0x1b0>
     6fe:	00 00       	nop
			_delay_ms(1000);
			sei();
     700:	78 94       	sei
			
		}
		
		if (  dht_getdata_dht_22(&ftemperature,&fhumidity,0)!=-1  && dht_getdata_dht_11(&temperature,&humidity,1)!=-1 )
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	be 01       	movw	r22, r28
     706:	6b 5f       	subi	r22, 0xFB	; 251
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	0e 94 99 01 	call	0x332	; 0x332 <dht_getdata_dht_22>
     712:	8f 3f       	cpi	r24, 0xFF	; 255
     714:	09 f4       	brne	.+2      	; 0x718 <main+0x1ca>
     716:	42 c0       	rjmp	.+132    	; 0x79c <main+0x24e>
     718:	4f 2d       	mov	r20, r15
     71a:	be 01       	movw	r22, r28
     71c:	66 5f       	subi	r22, 0xF6	; 246
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	ce 01       	movw	r24, r28
     722:	09 96       	adiw	r24, 0x09	; 9
     724:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata_dht_11>
     728:	8f 3f       	cpi	r24, 0xFF	; 255
     72a:	c1 f1       	breq	.+112    	; 0x79c <main+0x24e>
				int8_t temp_avr;
				int8_t humd_avr;
				temp_avr = ( (ftemperature+temperature)/2 );
				humd_avr = ((fhumidity+humidity)/2);
				
				if(temp_avr > 30 || humd_avr > 67)
     72c:	69 85       	ldd	r22, Y+9	; 0x09
     72e:	06 2e       	mov	r0, r22
     730:	00 0c       	add	r0, r0
     732:	77 0b       	sbc	r23, r23
     734:	88 0b       	sbc	r24, r24
     736:	99 0b       	sbc	r25, r25
     738:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__floatsisf>
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	3a 81       	ldd	r19, Y+2	; 0x02
     740:	4b 81       	ldd	r20, Y+3	; 0x03
     742:	5c 81       	ldd	r21, Y+4	; 0x04
     744:	0e 94 18 04 	call	0x830	; 0x830 <__addsf3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	5f e3       	ldi	r21, 0x3F	; 63
     750:	0e 94 ba 05 	call	0xb74	; 0xb74 <__mulsf3>
     754:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fixsfsi>
     758:	6f 31       	cpi	r22, 0x1F	; 31
     75a:	c4 f4       	brge	.+48     	; 0x78c <main+0x23e>
     75c:	6a 85       	ldd	r22, Y+10	; 0x0a
     75e:	06 2e       	mov	r0, r22
     760:	00 0c       	add	r0, r0
     762:	77 0b       	sbc	r23, r23
     764:	88 0b       	sbc	r24, r24
     766:	99 0b       	sbc	r25, r25
     768:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__floatsisf>
     76c:	2d 81       	ldd	r18, Y+5	; 0x05
     76e:	3e 81       	ldd	r19, Y+6	; 0x06
     770:	4f 81       	ldd	r20, Y+7	; 0x07
     772:	58 85       	ldd	r21, Y+8	; 0x08
     774:	0e 94 18 04 	call	0x830	; 0x830 <__addsf3>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	5f e3       	ldi	r21, 0x3F	; 63
     780:	0e 94 ba 05 	call	0xb74	; 0xb74 <__mulsf3>
     784:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fixsfsi>
     788:	64 34       	cpi	r22, 0x44	; 68
     78a:	14 f0       	brlt	.+4      	; 0x790 <main+0x242>
				{
					FAN_ON
     78c:	a8 98       	cbi	0x15, 0	; 21
     78e:	0b c0       	rjmp	.+22     	; 0x7a6 <main+0x258>
				}
				
				else if (manualflag == 0)
     790:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
     794:	81 11       	cpse	r24, r1
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <main+0x258>
				{
					FAN_OFF
     798:	a8 9a       	sbi	0x15, 0	; 21
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <main+0x258>
				}
			
		}
		else
		{
						UART_string_tx("FATAL ERROR!");
     79c:	80 e9       	ldi	r24, 0x90	; 144
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 ef 03 	call	0x7de	; 0x7de <UART_string_tx>
						FAN_ON
     7a4:	a8 98       	cbi	0x15, 0	; 21
     7a6:	9f ef       	ldi	r25, 0xFF	; 255
     7a8:	2f eb       	ldi	r18, 0xBF	; 191
     7aa:	81 e2       	ldi	r24, 0x21	; 33
     7ac:	91 50       	subi	r25, 0x01	; 1
     7ae:	20 40       	sbci	r18, 0x00	; 0
     7b0:	80 40       	sbci	r24, 0x00	; 0
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <main+0x25e>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <main+0x268>
     7b6:	00 00       	nop
     7b8:	19 cf       	rjmp	.-462    	; 0x5ec <main+0x9e>

000007ba <UART_int>:
extern volatile unsigned char gUartRFlag;
extern volatile unsigned char gUartData;
void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);   // enable Tx Rx and Rx interrupt
     7ba:	88 e9       	ldi	r24, 0x98	; 152
     7bc:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 bit data
     7be:	86 e8       	ldi	r24, 0x86	; 134
     7c0:	80 bd       	out	0x20, r24	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c2:	85 e2       	ldi	r24, 0x25	; 37
     7c4:	8a 95       	dec	r24
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <UART_int+0xa>
	_delay_us(10);
	UCSRC&=~(1<<URSEL);
     7c8:	80 b5       	in	r24, 0x20	; 32
     7ca:	8f 77       	andi	r24, 0x7F	; 127
     7cc:	80 bd       	out	0x20, r24	; 32
	UBRRH = (unsigned char)(UBRRset>>8);
     7ce:	10 bc       	out	0x20, r1	; 32
	UBRRL= (unsigned char)(UBRRset);
     7d0:	87 e4       	ldi	r24, 0x47	; 71
     7d2:	89 b9       	out	0x09, r24	; 9
     7d4:	08 95       	ret

000007d6 <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSRA & (1<<UDRE)));
     7d6:	5d 9b       	sbis	0x0b, 5	; 11
     7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <UART_tx>
	UDR=x;
     7da:	8c b9       	out	0x0c, r24	; 12
     7dc:	08 95       	ret

000007de <UART_string_tx>:
}

void UART_string_tx(unsigned char *x)
{
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(x[i] !='\0')
     7e6:	80 81       	ld	r24, Z
     7e8:	88 23       	and	r24, r24
     7ea:	59 f0       	breq	.+22     	; 0x802 <UART_string_tx+0x24>
     7ec:	8f 01       	movw	r16, r30
     7ee:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_tx( x[i] );
     7f0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <UART_tx>
		i++;
     7f4:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_string_tx(unsigned char *x)
{
	unsigned char i=0;
	while(x[i] !='\0')
     7f6:	f8 01       	movw	r30, r16
     7f8:	ec 0f       	add	r30, r28
     7fa:	f1 1d       	adc	r31, r1
     7fc:	80 81       	ld	r24, Z
     7fe:	81 11       	cpse	r24, r1
     800:	f7 cf       	rjmp	.-18     	; 0x7f0 <UART_string_tx+0x12>
	{
		UART_tx( x[i] );
		i++;
	}
}
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <__vector_13>:

ISR(USART_RXC_vect)
{
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	8f 93       	push	r24
	//cli();
	
	
	gUartData = UDR;
     816:	8c b1       	in	r24, 0x0c	; 12
     818:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <gUartData>
	gUartRFlag=1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <gUartRFlag>
	
	

	//sei();
	
     822:	8f 91       	pop	r24
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__subsf3>:
     82e:	50 58       	subi	r21, 0x80	; 128

00000830 <__addsf3>:
     830:	bb 27       	eor	r27, r27
     832:	aa 27       	eor	r26, r26
     834:	0e 94 2f 04 	call	0x85e	; 0x85e <__addsf3x>
     838:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_round>
     83c:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscA>
     840:	38 f0       	brcs	.+14     	; 0x850 <__addsf3+0x20>
     842:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_pscB>
     846:	20 f0       	brcs	.+8      	; 0x850 <__addsf3+0x20>
     848:	39 f4       	brne	.+14     	; 0x858 <__addsf3+0x28>
     84a:	9f 3f       	cpi	r25, 0xFF	; 255
     84c:	19 f4       	brne	.+6      	; 0x854 <__addsf3+0x24>
     84e:	26 f4       	brtc	.+8      	; 0x858 <__addsf3+0x28>
     850:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_nan>
     854:	0e f4       	brtc	.+2      	; 0x858 <__addsf3+0x28>
     856:	e0 95       	com	r30
     858:	e7 fb       	bst	r30, 7
     85a:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_inf>

0000085e <__addsf3x>:
     85e:	e9 2f       	mov	r30, r25
     860:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_split3>
     864:	58 f3       	brcs	.-42     	; 0x83c <__addsf3+0xc>
     866:	ba 17       	cp	r27, r26
     868:	62 07       	cpc	r22, r18
     86a:	73 07       	cpc	r23, r19
     86c:	84 07       	cpc	r24, r20
     86e:	95 07       	cpc	r25, r21
     870:	20 f0       	brcs	.+8      	; 0x87a <__stack+0x1b>
     872:	79 f4       	brne	.+30     	; 0x892 <__stack+0x33>
     874:	a6 f5       	brtc	.+104    	; 0x8de <__stack+0x7f>
     876:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_zero>
     87a:	0e f4       	brtc	.+2      	; 0x87e <__stack+0x1f>
     87c:	e0 95       	com	r30
     87e:	0b 2e       	mov	r0, r27
     880:	ba 2f       	mov	r27, r26
     882:	a0 2d       	mov	r26, r0
     884:	0b 01       	movw	r0, r22
     886:	b9 01       	movw	r22, r18
     888:	90 01       	movw	r18, r0
     88a:	0c 01       	movw	r0, r24
     88c:	ca 01       	movw	r24, r20
     88e:	a0 01       	movw	r20, r0
     890:	11 24       	eor	r1, r1
     892:	ff 27       	eor	r31, r31
     894:	59 1b       	sub	r21, r25
     896:	99 f0       	breq	.+38     	; 0x8be <__stack+0x5f>
     898:	59 3f       	cpi	r21, 0xF9	; 249
     89a:	50 f4       	brcc	.+20     	; 0x8b0 <__stack+0x51>
     89c:	50 3e       	cpi	r21, 0xE0	; 224
     89e:	68 f1       	brcs	.+90     	; 0x8fa <__stack+0x9b>
     8a0:	1a 16       	cp	r1, r26
     8a2:	f0 40       	sbci	r31, 0x00	; 0
     8a4:	a2 2f       	mov	r26, r18
     8a6:	23 2f       	mov	r18, r19
     8a8:	34 2f       	mov	r19, r20
     8aa:	44 27       	eor	r20, r20
     8ac:	58 5f       	subi	r21, 0xF8	; 248
     8ae:	f3 cf       	rjmp	.-26     	; 0x896 <__stack+0x37>
     8b0:	46 95       	lsr	r20
     8b2:	37 95       	ror	r19
     8b4:	27 95       	ror	r18
     8b6:	a7 95       	ror	r26
     8b8:	f0 40       	sbci	r31, 0x00	; 0
     8ba:	53 95       	inc	r21
     8bc:	c9 f7       	brne	.-14     	; 0x8b0 <__stack+0x51>
     8be:	7e f4       	brtc	.+30     	; 0x8de <__stack+0x7f>
     8c0:	1f 16       	cp	r1, r31
     8c2:	ba 0b       	sbc	r27, r26
     8c4:	62 0b       	sbc	r22, r18
     8c6:	73 0b       	sbc	r23, r19
     8c8:	84 0b       	sbc	r24, r20
     8ca:	ba f0       	brmi	.+46     	; 0x8fa <__stack+0x9b>
     8cc:	91 50       	subi	r25, 0x01	; 1
     8ce:	a1 f0       	breq	.+40     	; 0x8f8 <__stack+0x99>
     8d0:	ff 0f       	add	r31, r31
     8d2:	bb 1f       	adc	r27, r27
     8d4:	66 1f       	adc	r22, r22
     8d6:	77 1f       	adc	r23, r23
     8d8:	88 1f       	adc	r24, r24
     8da:	c2 f7       	brpl	.-16     	; 0x8cc <__stack+0x6d>
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <__stack+0x9b>
     8de:	ba 0f       	add	r27, r26
     8e0:	62 1f       	adc	r22, r18
     8e2:	73 1f       	adc	r23, r19
     8e4:	84 1f       	adc	r24, r20
     8e6:	48 f4       	brcc	.+18     	; 0x8fa <__stack+0x9b>
     8e8:	87 95       	ror	r24
     8ea:	77 95       	ror	r23
     8ec:	67 95       	ror	r22
     8ee:	b7 95       	ror	r27
     8f0:	f7 95       	ror	r31
     8f2:	9e 3f       	cpi	r25, 0xFE	; 254
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__stack+0x99>
     8f6:	b0 cf       	rjmp	.-160    	; 0x858 <__addsf3+0x28>
     8f8:	93 95       	inc	r25
     8fa:	88 0f       	add	r24, r24
     8fc:	08 f0       	brcs	.+2      	; 0x900 <__stack+0xa1>
     8fe:	99 27       	eor	r25, r25
     900:	ee 0f       	add	r30, r30
     902:	97 95       	ror	r25
     904:	87 95       	ror	r24
     906:	08 95       	ret

00000908 <__divsf3>:
     908:	0e 94 98 04 	call	0x930	; 0x930 <__divsf3x>
     90c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_round>
     910:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_pscB>
     914:	58 f0       	brcs	.+22     	; 0x92c <__divsf3+0x24>
     916:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscA>
     91a:	40 f0       	brcs	.+16     	; 0x92c <__divsf3+0x24>
     91c:	29 f4       	brne	.+10     	; 0x928 <__divsf3+0x20>
     91e:	5f 3f       	cpi	r21, 0xFF	; 255
     920:	29 f0       	breq	.+10     	; 0x92c <__divsf3+0x24>
     922:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_inf>
     926:	51 11       	cpse	r21, r1
     928:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
     92c:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_nan>

00000930 <__divsf3x>:
     930:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_split3>
     934:	68 f3       	brcs	.-38     	; 0x910 <__divsf3+0x8>

00000936 <__divsf3_pse>:
     936:	99 23       	and	r25, r25
     938:	b1 f3       	breq	.-20     	; 0x926 <__divsf3+0x1e>
     93a:	55 23       	and	r21, r21
     93c:	91 f3       	breq	.-28     	; 0x922 <__divsf3+0x1a>
     93e:	95 1b       	sub	r25, r21
     940:	55 0b       	sbc	r21, r21
     942:	bb 27       	eor	r27, r27
     944:	aa 27       	eor	r26, r26
     946:	62 17       	cp	r22, r18
     948:	73 07       	cpc	r23, r19
     94a:	84 07       	cpc	r24, r20
     94c:	38 f0       	brcs	.+14     	; 0x95c <__divsf3_pse+0x26>
     94e:	9f 5f       	subi	r25, 0xFF	; 255
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	22 0f       	add	r18, r18
     954:	33 1f       	adc	r19, r19
     956:	44 1f       	adc	r20, r20
     958:	aa 1f       	adc	r26, r26
     95a:	a9 f3       	breq	.-22     	; 0x946 <__divsf3_pse+0x10>
     95c:	35 d0       	rcall	.+106    	; 0x9c8 <__divsf3_pse+0x92>
     95e:	0e 2e       	mov	r0, r30
     960:	3a f0       	brmi	.+14     	; 0x970 <__divsf3_pse+0x3a>
     962:	e0 e8       	ldi	r30, 0x80	; 128
     964:	32 d0       	rcall	.+100    	; 0x9ca <__divsf3_pse+0x94>
     966:	91 50       	subi	r25, 0x01	; 1
     968:	50 40       	sbci	r21, 0x00	; 0
     96a:	e6 95       	lsr	r30
     96c:	00 1c       	adc	r0, r0
     96e:	ca f7       	brpl	.-14     	; 0x962 <__divsf3_pse+0x2c>
     970:	2b d0       	rcall	.+86     	; 0x9c8 <__divsf3_pse+0x92>
     972:	fe 2f       	mov	r31, r30
     974:	29 d0       	rcall	.+82     	; 0x9c8 <__divsf3_pse+0x92>
     976:	66 0f       	add	r22, r22
     978:	77 1f       	adc	r23, r23
     97a:	88 1f       	adc	r24, r24
     97c:	bb 1f       	adc	r27, r27
     97e:	26 17       	cp	r18, r22
     980:	37 07       	cpc	r19, r23
     982:	48 07       	cpc	r20, r24
     984:	ab 07       	cpc	r26, r27
     986:	b0 e8       	ldi	r27, 0x80	; 128
     988:	09 f0       	breq	.+2      	; 0x98c <__divsf3_pse+0x56>
     98a:	bb 0b       	sbc	r27, r27
     98c:	80 2d       	mov	r24, r0
     98e:	bf 01       	movw	r22, r30
     990:	ff 27       	eor	r31, r31
     992:	93 58       	subi	r25, 0x83	; 131
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	3a f0       	brmi	.+14     	; 0x9a6 <__divsf3_pse+0x70>
     998:	9e 3f       	cpi	r25, 0xFE	; 254
     99a:	51 05       	cpc	r21, r1
     99c:	78 f0       	brcs	.+30     	; 0x9bc <__divsf3_pse+0x86>
     99e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_inf>
     9a2:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
     9a6:	5f 3f       	cpi	r21, 0xFF	; 255
     9a8:	e4 f3       	brlt	.-8      	; 0x9a2 <__divsf3_pse+0x6c>
     9aa:	98 3e       	cpi	r25, 0xE8	; 232
     9ac:	d4 f3       	brlt	.-12     	; 0x9a2 <__divsf3_pse+0x6c>
     9ae:	86 95       	lsr	r24
     9b0:	77 95       	ror	r23
     9b2:	67 95       	ror	r22
     9b4:	b7 95       	ror	r27
     9b6:	f7 95       	ror	r31
     9b8:	9f 5f       	subi	r25, 0xFF	; 255
     9ba:	c9 f7       	brne	.-14     	; 0x9ae <__divsf3_pse+0x78>
     9bc:	88 0f       	add	r24, r24
     9be:	91 1d       	adc	r25, r1
     9c0:	96 95       	lsr	r25
     9c2:	87 95       	ror	r24
     9c4:	97 f9       	bld	r25, 7
     9c6:	08 95       	ret
     9c8:	e1 e0       	ldi	r30, 0x01	; 1
     9ca:	66 0f       	add	r22, r22
     9cc:	77 1f       	adc	r23, r23
     9ce:	88 1f       	adc	r24, r24
     9d0:	bb 1f       	adc	r27, r27
     9d2:	62 17       	cp	r22, r18
     9d4:	73 07       	cpc	r23, r19
     9d6:	84 07       	cpc	r24, r20
     9d8:	ba 07       	cpc	r27, r26
     9da:	20 f0       	brcs	.+8      	; 0x9e4 <__divsf3_pse+0xae>
     9dc:	62 1b       	sub	r22, r18
     9de:	73 0b       	sbc	r23, r19
     9e0:	84 0b       	sbc	r24, r20
     9e2:	ba 0b       	sbc	r27, r26
     9e4:	ee 1f       	adc	r30, r30
     9e6:	88 f7       	brcc	.-30     	; 0x9ca <__divsf3_pse+0x94>
     9e8:	e0 95       	com	r30
     9ea:	08 95       	ret

000009ec <__fixsfsi>:
     9ec:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__fixunssfsi>
     9f0:	68 94       	set
     9f2:	b1 11       	cpse	r27, r1
     9f4:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
     9f8:	08 95       	ret

000009fa <__fixunssfsi>:
     9fa:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_splitA>
     9fe:	88 f0       	brcs	.+34     	; 0xa22 <__fixunssfsi+0x28>
     a00:	9f 57       	subi	r25, 0x7F	; 127
     a02:	98 f0       	brcs	.+38     	; 0xa2a <__fixunssfsi+0x30>
     a04:	b9 2f       	mov	r27, r25
     a06:	99 27       	eor	r25, r25
     a08:	b7 51       	subi	r27, 0x17	; 23
     a0a:	b0 f0       	brcs	.+44     	; 0xa38 <__fixunssfsi+0x3e>
     a0c:	e1 f0       	breq	.+56     	; 0xa46 <__fixunssfsi+0x4c>
     a0e:	66 0f       	add	r22, r22
     a10:	77 1f       	adc	r23, r23
     a12:	88 1f       	adc	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	1a f0       	brmi	.+6      	; 0xa1e <__fixunssfsi+0x24>
     a18:	ba 95       	dec	r27
     a1a:	c9 f7       	brne	.-14     	; 0xa0e <__fixunssfsi+0x14>
     a1c:	14 c0       	rjmp	.+40     	; 0xa46 <__fixunssfsi+0x4c>
     a1e:	b1 30       	cpi	r27, 0x01	; 1
     a20:	91 f0       	breq	.+36     	; 0xa46 <__fixunssfsi+0x4c>
     a22:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_zero>
     a26:	b1 e0       	ldi	r27, 0x01	; 1
     a28:	08 95       	ret
     a2a:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_zero>
     a2e:	67 2f       	mov	r22, r23
     a30:	78 2f       	mov	r23, r24
     a32:	88 27       	eor	r24, r24
     a34:	b8 5f       	subi	r27, 0xF8	; 248
     a36:	39 f0       	breq	.+14     	; 0xa46 <__fixunssfsi+0x4c>
     a38:	b9 3f       	cpi	r27, 0xF9	; 249
     a3a:	cc f3       	brlt	.-14     	; 0xa2e <__fixunssfsi+0x34>
     a3c:	86 95       	lsr	r24
     a3e:	77 95       	ror	r23
     a40:	67 95       	ror	r22
     a42:	b3 95       	inc	r27
     a44:	d9 f7       	brne	.-10     	; 0xa3c <__fixunssfsi+0x42>
     a46:	3e f4       	brtc	.+14     	; 0xa56 <__fixunssfsi+0x5c>
     a48:	90 95       	com	r25
     a4a:	80 95       	com	r24
     a4c:	70 95       	com	r23
     a4e:	61 95       	neg	r22
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	8f 4f       	sbci	r24, 0xFF	; 255
     a54:	9f 4f       	sbci	r25, 0xFF	; 255
     a56:	08 95       	ret

00000a58 <__floatunsisf>:
     a58:	e8 94       	clt
     a5a:	09 c0       	rjmp	.+18     	; 0xa6e <__floatsisf+0x12>

00000a5c <__floatsisf>:
     a5c:	97 fb       	bst	r25, 7
     a5e:	3e f4       	brtc	.+14     	; 0xa6e <__floatsisf+0x12>
     a60:	90 95       	com	r25
     a62:	80 95       	com	r24
     a64:	70 95       	com	r23
     a66:	61 95       	neg	r22
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	8f 4f       	sbci	r24, 0xFF	; 255
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	99 23       	and	r25, r25
     a70:	a9 f0       	breq	.+42     	; 0xa9c <__floatsisf+0x40>
     a72:	f9 2f       	mov	r31, r25
     a74:	96 e9       	ldi	r25, 0x96	; 150
     a76:	bb 27       	eor	r27, r27
     a78:	93 95       	inc	r25
     a7a:	f6 95       	lsr	r31
     a7c:	87 95       	ror	r24
     a7e:	77 95       	ror	r23
     a80:	67 95       	ror	r22
     a82:	b7 95       	ror	r27
     a84:	f1 11       	cpse	r31, r1
     a86:	f8 cf       	rjmp	.-16     	; 0xa78 <__floatsisf+0x1c>
     a88:	fa f4       	brpl	.+62     	; 0xac8 <__floatsisf+0x6c>
     a8a:	bb 0f       	add	r27, r27
     a8c:	11 f4       	brne	.+4      	; 0xa92 <__floatsisf+0x36>
     a8e:	60 ff       	sbrs	r22, 0
     a90:	1b c0       	rjmp	.+54     	; 0xac8 <__floatsisf+0x6c>
     a92:	6f 5f       	subi	r22, 0xFF	; 255
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	8f 4f       	sbci	r24, 0xFF	; 255
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	16 c0       	rjmp	.+44     	; 0xac8 <__floatsisf+0x6c>
     a9c:	88 23       	and	r24, r24
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <__floatsisf+0x48>
     aa0:	96 e9       	ldi	r25, 0x96	; 150
     aa2:	11 c0       	rjmp	.+34     	; 0xac6 <__floatsisf+0x6a>
     aa4:	77 23       	and	r23, r23
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatsisf+0x54>
     aa8:	9e e8       	ldi	r25, 0x8E	; 142
     aaa:	87 2f       	mov	r24, r23
     aac:	76 2f       	mov	r23, r22
     aae:	05 c0       	rjmp	.+10     	; 0xaba <__floatsisf+0x5e>
     ab0:	66 23       	and	r22, r22
     ab2:	71 f0       	breq	.+28     	; 0xad0 <__floatsisf+0x74>
     ab4:	96 e8       	ldi	r25, 0x86	; 134
     ab6:	86 2f       	mov	r24, r22
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	2a f0       	brmi	.+10     	; 0xac8 <__floatsisf+0x6c>
     abe:	9a 95       	dec	r25
     ac0:	66 0f       	add	r22, r22
     ac2:	77 1f       	adc	r23, r23
     ac4:	88 1f       	adc	r24, r24
     ac6:	da f7       	brpl	.-10     	; 0xabe <__floatsisf+0x62>
     ac8:	88 0f       	add	r24, r24
     aca:	96 95       	lsr	r25
     acc:	87 95       	ror	r24
     ace:	97 f9       	bld	r25, 7
     ad0:	08 95       	ret

00000ad2 <__fp_inf>:
     ad2:	97 f9       	bld	r25, 7
     ad4:	9f 67       	ori	r25, 0x7F	; 127
     ad6:	80 e8       	ldi	r24, 0x80	; 128
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	08 95       	ret

00000ade <__fp_nan>:
     ade:	9f ef       	ldi	r25, 0xFF	; 255
     ae0:	80 ec       	ldi	r24, 0xC0	; 192
     ae2:	08 95       	ret

00000ae4 <__fp_pscA>:
     ae4:	00 24       	eor	r0, r0
     ae6:	0a 94       	dec	r0
     ae8:	16 16       	cp	r1, r22
     aea:	17 06       	cpc	r1, r23
     aec:	18 06       	cpc	r1, r24
     aee:	09 06       	cpc	r0, r25
     af0:	08 95       	ret

00000af2 <__fp_pscB>:
     af2:	00 24       	eor	r0, r0
     af4:	0a 94       	dec	r0
     af6:	12 16       	cp	r1, r18
     af8:	13 06       	cpc	r1, r19
     afa:	14 06       	cpc	r1, r20
     afc:	05 06       	cpc	r0, r21
     afe:	08 95       	ret

00000b00 <__fp_round>:
     b00:	09 2e       	mov	r0, r25
     b02:	03 94       	inc	r0
     b04:	00 0c       	add	r0, r0
     b06:	11 f4       	brne	.+4      	; 0xb0c <__fp_round+0xc>
     b08:	88 23       	and	r24, r24
     b0a:	52 f0       	brmi	.+20     	; 0xb20 <__fp_round+0x20>
     b0c:	bb 0f       	add	r27, r27
     b0e:	40 f4       	brcc	.+16     	; 0xb20 <__fp_round+0x20>
     b10:	bf 2b       	or	r27, r31
     b12:	11 f4       	brne	.+4      	; 0xb18 <__fp_round+0x18>
     b14:	60 ff       	sbrs	r22, 0
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__fp_round+0x20>
     b18:	6f 5f       	subi	r22, 0xFF	; 255
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	8f 4f       	sbci	r24, 0xFF	; 255
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	08 95       	ret

00000b22 <__fp_split3>:
     b22:	57 fd       	sbrc	r21, 7
     b24:	90 58       	subi	r25, 0x80	; 128
     b26:	44 0f       	add	r20, r20
     b28:	55 1f       	adc	r21, r21
     b2a:	59 f0       	breq	.+22     	; 0xb42 <__fp_splitA+0x10>
     b2c:	5f 3f       	cpi	r21, 0xFF	; 255
     b2e:	71 f0       	breq	.+28     	; 0xb4c <__fp_splitA+0x1a>
     b30:	47 95       	ror	r20

00000b32 <__fp_splitA>:
     b32:	88 0f       	add	r24, r24
     b34:	97 fb       	bst	r25, 7
     b36:	99 1f       	adc	r25, r25
     b38:	61 f0       	breq	.+24     	; 0xb52 <__fp_splitA+0x20>
     b3a:	9f 3f       	cpi	r25, 0xFF	; 255
     b3c:	79 f0       	breq	.+30     	; 0xb5c <__fp_splitA+0x2a>
     b3e:	87 95       	ror	r24
     b40:	08 95       	ret
     b42:	12 16       	cp	r1, r18
     b44:	13 06       	cpc	r1, r19
     b46:	14 06       	cpc	r1, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	f2 cf       	rjmp	.-28     	; 0xb30 <__fp_split3+0xe>
     b4c:	46 95       	lsr	r20
     b4e:	f1 df       	rcall	.-30     	; 0xb32 <__fp_splitA>
     b50:	08 c0       	rjmp	.+16     	; 0xb62 <__fp_splitA+0x30>
     b52:	16 16       	cp	r1, r22
     b54:	17 06       	cpc	r1, r23
     b56:	18 06       	cpc	r1, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	f1 cf       	rjmp	.-30     	; 0xb3e <__fp_splitA+0xc>
     b5c:	86 95       	lsr	r24
     b5e:	71 05       	cpc	r23, r1
     b60:	61 05       	cpc	r22, r1
     b62:	08 94       	sec
     b64:	08 95       	ret

00000b66 <__fp_zero>:
     b66:	e8 94       	clt

00000b68 <__fp_szero>:
     b68:	bb 27       	eor	r27, r27
     b6a:	66 27       	eor	r22, r22
     b6c:	77 27       	eor	r23, r23
     b6e:	cb 01       	movw	r24, r22
     b70:	97 f9       	bld	r25, 7
     b72:	08 95       	ret

00000b74 <__mulsf3>:
     b74:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3x>
     b78:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_round>
     b7c:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_pscA>
     b80:	38 f0       	brcs	.+14     	; 0xb90 <__mulsf3+0x1c>
     b82:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_pscB>
     b86:	20 f0       	brcs	.+8      	; 0xb90 <__mulsf3+0x1c>
     b88:	95 23       	and	r25, r21
     b8a:	11 f0       	breq	.+4      	; 0xb90 <__mulsf3+0x1c>
     b8c:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_inf>
     b90:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_nan>
     b94:	11 24       	eor	r1, r1
     b96:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>

00000b9a <__mulsf3x>:
     b9a:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_split3>
     b9e:	70 f3       	brcs	.-36     	; 0xb7c <__mulsf3+0x8>

00000ba0 <__mulsf3_pse>:
     ba0:	95 9f       	mul	r25, r21
     ba2:	c1 f3       	breq	.-16     	; 0xb94 <__mulsf3+0x20>
     ba4:	95 0f       	add	r25, r21
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	55 1f       	adc	r21, r21
     baa:	62 9f       	mul	r22, r18
     bac:	f0 01       	movw	r30, r0
     bae:	72 9f       	mul	r23, r18
     bb0:	bb 27       	eor	r27, r27
     bb2:	f0 0d       	add	r31, r0
     bb4:	b1 1d       	adc	r27, r1
     bb6:	63 9f       	mul	r22, r19
     bb8:	aa 27       	eor	r26, r26
     bba:	f0 0d       	add	r31, r0
     bbc:	b1 1d       	adc	r27, r1
     bbe:	aa 1f       	adc	r26, r26
     bc0:	64 9f       	mul	r22, r20
     bc2:	66 27       	eor	r22, r22
     bc4:	b0 0d       	add	r27, r0
     bc6:	a1 1d       	adc	r26, r1
     bc8:	66 1f       	adc	r22, r22
     bca:	82 9f       	mul	r24, r18
     bcc:	22 27       	eor	r18, r18
     bce:	b0 0d       	add	r27, r0
     bd0:	a1 1d       	adc	r26, r1
     bd2:	62 1f       	adc	r22, r18
     bd4:	73 9f       	mul	r23, r19
     bd6:	b0 0d       	add	r27, r0
     bd8:	a1 1d       	adc	r26, r1
     bda:	62 1f       	adc	r22, r18
     bdc:	83 9f       	mul	r24, r19
     bde:	a0 0d       	add	r26, r0
     be0:	61 1d       	adc	r22, r1
     be2:	22 1f       	adc	r18, r18
     be4:	74 9f       	mul	r23, r20
     be6:	33 27       	eor	r19, r19
     be8:	a0 0d       	add	r26, r0
     bea:	61 1d       	adc	r22, r1
     bec:	23 1f       	adc	r18, r19
     bee:	84 9f       	mul	r24, r20
     bf0:	60 0d       	add	r22, r0
     bf2:	21 1d       	adc	r18, r1
     bf4:	82 2f       	mov	r24, r18
     bf6:	76 2f       	mov	r23, r22
     bf8:	6a 2f       	mov	r22, r26
     bfa:	11 24       	eor	r1, r1
     bfc:	9f 57       	subi	r25, 0x7F	; 127
     bfe:	50 40       	sbci	r21, 0x00	; 0
     c00:	9a f0       	brmi	.+38     	; 0xc28 <__mulsf3_pse+0x88>
     c02:	f1 f0       	breq	.+60     	; 0xc40 <__mulsf3_pse+0xa0>
     c04:	88 23       	and	r24, r24
     c06:	4a f0       	brmi	.+18     	; 0xc1a <__mulsf3_pse+0x7a>
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	bb 1f       	adc	r27, r27
     c0e:	66 1f       	adc	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	91 50       	subi	r25, 0x01	; 1
     c16:	50 40       	sbci	r21, 0x00	; 0
     c18:	a9 f7       	brne	.-22     	; 0xc04 <__mulsf3_pse+0x64>
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	51 05       	cpc	r21, r1
     c1e:	80 f0       	brcs	.+32     	; 0xc40 <__mulsf3_pse+0xa0>
     c20:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_inf>
     c24:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
     c28:	5f 3f       	cpi	r21, 0xFF	; 255
     c2a:	e4 f3       	brlt	.-8      	; 0xc24 <__mulsf3_pse+0x84>
     c2c:	98 3e       	cpi	r25, 0xE8	; 232
     c2e:	d4 f3       	brlt	.-12     	; 0xc24 <__mulsf3_pse+0x84>
     c30:	86 95       	lsr	r24
     c32:	77 95       	ror	r23
     c34:	67 95       	ror	r22
     c36:	b7 95       	ror	r27
     c38:	f7 95       	ror	r31
     c3a:	e7 95       	ror	r30
     c3c:	9f 5f       	subi	r25, 0xFF	; 255
     c3e:	c1 f7       	brne	.-16     	; 0xc30 <__mulsf3_pse+0x90>
     c40:	fe 2b       	or	r31, r30
     c42:	88 0f       	add	r24, r24
     c44:	91 1d       	adc	r25, r1
     c46:	96 95       	lsr	r25
     c48:	87 95       	ror	r24
     c4a:	97 f9       	bld	r25, 7
     c4c:	08 95       	ret

00000c4e <dtostrf>:
     c4e:	ef 92       	push	r14
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	e8 01       	movw	r28, r16
     c5a:	47 fd       	sbrc	r20, 7
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <dtostrf+0x14>
     c5e:	34 e0       	ldi	r19, 0x04	; 4
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <dtostrf+0x16>
     c62:	34 e1       	ldi	r19, 0x14	; 20
     c64:	04 2e       	mov	r0, r20
     c66:	00 0c       	add	r0, r0
     c68:	55 0b       	sbc	r21, r21
     c6a:	57 ff       	sbrs	r21, 7
     c6c:	03 c0       	rjmp	.+6      	; 0xc74 <dtostrf+0x26>
     c6e:	51 95       	neg	r21
     c70:	41 95       	neg	r20
     c72:	51 09       	sbc	r21, r1
     c74:	e3 2e       	mov	r14, r19
     c76:	02 2f       	mov	r16, r18
     c78:	24 2f       	mov	r18, r20
     c7a:	ae 01       	movw	r20, r28
     c7c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <dtoa_prf>
     c80:	ce 01       	movw	r24, r28
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ef 90       	pop	r14
     c8c:	08 95       	ret

00000c8e <__itoa_ncheck>:
     c8e:	bb 27       	eor	r27, r27
     c90:	4a 30       	cpi	r20, 0x0A	; 10
     c92:	31 f4       	brne	.+12     	; 0xca0 <__itoa_ncheck+0x12>
     c94:	99 23       	and	r25, r25
     c96:	22 f4       	brpl	.+8      	; 0xca0 <__itoa_ncheck+0x12>
     c98:	bd e2       	ldi	r27, 0x2D	; 45
     c9a:	90 95       	com	r25
     c9c:	81 95       	neg	r24
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__utoa_common>

00000ca4 <__utoa_ncheck>:
     ca4:	bb 27       	eor	r27, r27

00000ca6 <__utoa_common>:
     ca6:	fb 01       	movw	r30, r22
     ca8:	55 27       	eor	r21, r21
     caa:	aa 27       	eor	r26, r26
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	aa 1f       	adc	r26, r26
     cb2:	a4 17       	cp	r26, r20
     cb4:	10 f0       	brcs	.+4      	; 0xcba <__utoa_common+0x14>
     cb6:	a4 1b       	sub	r26, r20
     cb8:	83 95       	inc	r24
     cba:	50 51       	subi	r21, 0x10	; 16
     cbc:	b9 f7       	brne	.-18     	; 0xcac <__utoa_common+0x6>
     cbe:	a0 5d       	subi	r26, 0xD0	; 208
     cc0:	aa 33       	cpi	r26, 0x3A	; 58
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <__utoa_common+0x20>
     cc4:	a9 5d       	subi	r26, 0xD9	; 217
     cc6:	a1 93       	st	Z+, r26
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	79 f7       	brne	.-34     	; 0xcaa <__utoa_common+0x4>
     ccc:	b1 11       	cpse	r27, r1
     cce:	b1 93       	st	Z+, r27
     cd0:	11 92       	st	Z+, r1
     cd2:	cb 01       	movw	r24, r22
     cd4:	0c 94 9e 08 	jmp	0x113c	; 0x113c <strrev>

00000cd8 <dtoa_prf>:
     cd8:	a9 e0       	ldi	r26, 0x09	; 9
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e2 e7       	ldi	r30, 0x72	; 114
     cde:	f6 e0       	ldi	r31, 0x06	; 6
     ce0:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__prologue_saves__+0xc>
     ce4:	6a 01       	movw	r12, r20
     ce6:	12 2f       	mov	r17, r18
     ce8:	b0 2e       	mov	r11, r16
     cea:	2b e3       	ldi	r18, 0x3B	; 59
     cec:	20 17       	cp	r18, r16
     cee:	20 f0       	brcs	.+8      	; 0xcf8 <dtoa_prf+0x20>
     cf0:	ff 24       	eor	r15, r15
     cf2:	f3 94       	inc	r15
     cf4:	f0 0e       	add	r15, r16
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <dtoa_prf+0x24>
     cf8:	2c e3       	ldi	r18, 0x3C	; 60
     cfa:	f2 2e       	mov	r15, r18
     cfc:	0f 2d       	mov	r16, r15
     cfe:	27 e0       	ldi	r18, 0x07	; 7
     d00:	ae 01       	movw	r20, r28
     d02:	4f 5f       	subi	r20, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__ftoa_engine>
     d0a:	bc 01       	movw	r22, r24
     d0c:	49 81       	ldd	r20, Y+1	; 0x01
     d0e:	84 2f       	mov	r24, r20
     d10:	89 70       	andi	r24, 0x09	; 9
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	31 f0       	breq	.+12     	; 0xd22 <dtoa_prf+0x4a>
     d16:	e1 fc       	sbrc	r14, 1
     d18:	06 c0       	rjmp	.+12     	; 0xd26 <dtoa_prf+0x4e>
     d1a:	e0 fe       	sbrs	r14, 0
     d1c:	06 c0       	rjmp	.+12     	; 0xd2a <dtoa_prf+0x52>
     d1e:	90 e2       	ldi	r25, 0x20	; 32
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <dtoa_prf+0x54>
     d22:	9d e2       	ldi	r25, 0x2D	; 45
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <dtoa_prf+0x54>
     d26:	9b e2       	ldi	r25, 0x2B	; 43
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <dtoa_prf+0x54>
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	5e 2d       	mov	r21, r14
     d2e:	50 71       	andi	r21, 0x10	; 16
     d30:	43 ff       	sbrs	r20, 3
     d32:	3c c0       	rjmp	.+120    	; 0xdac <dtoa_prf+0xd4>
     d34:	91 11       	cpse	r25, r1
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <dtoa_prf+0x64>
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <dtoa_prf+0x66>
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	81 17       	cp	r24, r17
     d40:	18 f4       	brcc	.+6      	; 0xd48 <dtoa_prf+0x70>
     d42:	21 2f       	mov	r18, r17
     d44:	28 1b       	sub	r18, r24
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <dtoa_prf+0x72>
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	51 11       	cpse	r21, r1
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <dtoa_prf+0x8c>
     d4e:	f6 01       	movw	r30, r12
     d50:	82 2f       	mov	r24, r18
     d52:	30 e2       	ldi	r19, 0x20	; 32
     d54:	88 23       	and	r24, r24
     d56:	19 f0       	breq	.+6      	; 0xd5e <dtoa_prf+0x86>
     d58:	31 93       	st	Z+, r19
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	fb cf       	rjmp	.-10     	; 0xd54 <dtoa_prf+0x7c>
     d5e:	c2 0e       	add	r12, r18
     d60:	d1 1c       	adc	r13, r1
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	99 23       	and	r25, r25
     d66:	29 f0       	breq	.+10     	; 0xd72 <dtoa_prf+0x9a>
     d68:	d6 01       	movw	r26, r12
     d6a:	9c 93       	st	X, r25
     d6c:	f6 01       	movw	r30, r12
     d6e:	31 96       	adiw	r30, 0x01	; 1
     d70:	6f 01       	movw	r12, r30
     d72:	c6 01       	movw	r24, r12
     d74:	03 96       	adiw	r24, 0x03	; 3
     d76:	e2 fe       	sbrs	r14, 2
     d78:	0a c0       	rjmp	.+20     	; 0xd8e <dtoa_prf+0xb6>
     d7a:	3e e4       	ldi	r19, 0x4E	; 78
     d7c:	d6 01       	movw	r26, r12
     d7e:	3c 93       	st	X, r19
     d80:	41 e4       	ldi	r20, 0x41	; 65
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	4c 93       	st	X, r20
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	3c 93       	st	X, r19
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <dtoa_prf+0xc2>
     d8e:	3e e6       	ldi	r19, 0x6E	; 110
     d90:	f6 01       	movw	r30, r12
     d92:	30 83       	st	Z, r19
     d94:	41 e6       	ldi	r20, 0x61	; 97
     d96:	41 83       	std	Z+1, r20	; 0x01
     d98:	32 83       	std	Z+2, r19	; 0x02
     d9a:	fc 01       	movw	r30, r24
     d9c:	32 2f       	mov	r19, r18
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	33 23       	and	r19, r19
     da2:	09 f4       	brne	.+2      	; 0xda6 <dtoa_prf+0xce>
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <dtoa_prf+0x152>
     da6:	41 93       	st	Z+, r20
     da8:	31 50       	subi	r19, 0x01	; 1
     daa:	fa cf       	rjmp	.-12     	; 0xda0 <dtoa_prf+0xc8>
     dac:	42 ff       	sbrs	r20, 2
     dae:	44 c0       	rjmp	.+136    	; 0xe38 <dtoa_prf+0x160>
     db0:	91 11       	cpse	r25, r1
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <dtoa_prf+0xe0>
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	01 c0       	rjmp	.+2      	; 0xdba <dtoa_prf+0xe2>
     db8:	84 e0       	ldi	r24, 0x04	; 4
     dba:	81 17       	cp	r24, r17
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <dtoa_prf+0xec>
     dbe:	21 2f       	mov	r18, r17
     dc0:	28 1b       	sub	r18, r24
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <dtoa_prf+0xee>
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	51 11       	cpse	r21, r1
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <dtoa_prf+0x108>
     dca:	f6 01       	movw	r30, r12
     dcc:	82 2f       	mov	r24, r18
     dce:	30 e2       	ldi	r19, 0x20	; 32
     dd0:	88 23       	and	r24, r24
     dd2:	19 f0       	breq	.+6      	; 0xdda <dtoa_prf+0x102>
     dd4:	31 93       	st	Z+, r19
     dd6:	81 50       	subi	r24, 0x01	; 1
     dd8:	fb cf       	rjmp	.-10     	; 0xdd0 <dtoa_prf+0xf8>
     dda:	c2 0e       	add	r12, r18
     ddc:	d1 1c       	adc	r13, r1
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	99 23       	and	r25, r25
     de2:	29 f0       	breq	.+10     	; 0xdee <dtoa_prf+0x116>
     de4:	d6 01       	movw	r26, r12
     de6:	9c 93       	st	X, r25
     de8:	f6 01       	movw	r30, r12
     dea:	31 96       	adiw	r30, 0x01	; 1
     dec:	6f 01       	movw	r12, r30
     dee:	c6 01       	movw	r24, r12
     df0:	03 96       	adiw	r24, 0x03	; 3
     df2:	e2 fe       	sbrs	r14, 2
     df4:	0b c0       	rjmp	.+22     	; 0xe0c <dtoa_prf+0x134>
     df6:	39 e4       	ldi	r19, 0x49	; 73
     df8:	d6 01       	movw	r26, r12
     dfa:	3c 93       	st	X, r19
     dfc:	3e e4       	ldi	r19, 0x4E	; 78
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	3c 93       	st	X, r19
     e02:	11 97       	sbiw	r26, 0x01	; 1
     e04:	36 e4       	ldi	r19, 0x46	; 70
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	3c 93       	st	X, r19
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <dtoa_prf+0x142>
     e0c:	39 e6       	ldi	r19, 0x69	; 105
     e0e:	f6 01       	movw	r30, r12
     e10:	30 83       	st	Z, r19
     e12:	3e e6       	ldi	r19, 0x6E	; 110
     e14:	31 83       	std	Z+1, r19	; 0x01
     e16:	36 e6       	ldi	r19, 0x66	; 102
     e18:	32 83       	std	Z+2, r19	; 0x02
     e1a:	fc 01       	movw	r30, r24
     e1c:	32 2f       	mov	r19, r18
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	33 23       	and	r19, r19
     e22:	19 f0       	breq	.+6      	; 0xe2a <dtoa_prf+0x152>
     e24:	41 93       	st	Z+, r20
     e26:	31 50       	subi	r19, 0x01	; 1
     e28:	fb cf       	rjmp	.-10     	; 0xe20 <dtoa_prf+0x148>
     e2a:	fc 01       	movw	r30, r24
     e2c:	e2 0f       	add	r30, r18
     e2e:	f1 1d       	adc	r31, r1
     e30:	10 82       	st	Z, r1
     e32:	8e ef       	ldi	r24, 0xFE	; 254
     e34:	9f ef       	ldi	r25, 0xFF	; 255
     e36:	a6 c0       	rjmp	.+332    	; 0xf84 <dtoa_prf+0x2ac>
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	91 11       	cpse	r25, r1
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <dtoa_prf+0x16c>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	16 16       	cp	r1, r22
     e46:	17 06       	cpc	r1, r23
     e48:	1c f4       	brge	.+6      	; 0xe50 <dtoa_prf+0x178>
     e4a:	fb 01       	movw	r30, r22
     e4c:	31 96       	adiw	r30, 0x01	; 1
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <dtoa_prf+0x17c>
     e50:	e1 e0       	ldi	r30, 0x01	; 1
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	2e 0f       	add	r18, r30
     e56:	3f 1f       	adc	r19, r31
     e58:	bb 20       	and	r11, r11
     e5a:	21 f0       	breq	.+8      	; 0xe64 <dtoa_prf+0x18c>
     e5c:	eb 2d       	mov	r30, r11
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	31 96       	adiw	r30, 0x01	; 1
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <dtoa_prf+0x190>
     e64:	e0 e0       	ldi	r30, 0x00	; 0
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	2e 0f       	add	r18, r30
     e6a:	3f 1f       	adc	r19, r31
     e6c:	e1 2f       	mov	r30, r17
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	2e 17       	cp	r18, r30
     e72:	3f 07       	cpc	r19, r31
     e74:	1c f4       	brge	.+6      	; 0xe7c <dtoa_prf+0x1a4>
     e76:	12 1b       	sub	r17, r18
     e78:	21 2f       	mov	r18, r17
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <dtoa_prf+0x1a6>
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	8e 2d       	mov	r24, r14
     e80:	88 71       	andi	r24, 0x18	; 24
     e82:	59 f4       	brne	.+22     	; 0xe9a <dtoa_prf+0x1c2>
     e84:	f6 01       	movw	r30, r12
     e86:	82 2f       	mov	r24, r18
     e88:	30 e2       	ldi	r19, 0x20	; 32
     e8a:	88 23       	and	r24, r24
     e8c:	19 f0       	breq	.+6      	; 0xe94 <dtoa_prf+0x1bc>
     e8e:	31 93       	st	Z+, r19
     e90:	81 50       	subi	r24, 0x01	; 1
     e92:	fb cf       	rjmp	.-10     	; 0xe8a <dtoa_prf+0x1b2>
     e94:	c2 0e       	add	r12, r18
     e96:	d1 1c       	adc	r13, r1
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	99 23       	and	r25, r25
     e9c:	29 f0       	breq	.+10     	; 0xea8 <dtoa_prf+0x1d0>
     e9e:	d6 01       	movw	r26, r12
     ea0:	9c 93       	st	X, r25
     ea2:	f6 01       	movw	r30, r12
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	6f 01       	movw	r12, r30
     ea8:	51 11       	cpse	r21, r1
     eaa:	0b c0       	rjmp	.+22     	; 0xec2 <dtoa_prf+0x1ea>
     eac:	f6 01       	movw	r30, r12
     eae:	82 2f       	mov	r24, r18
     eb0:	90 e3       	ldi	r25, 0x30	; 48
     eb2:	88 23       	and	r24, r24
     eb4:	19 f0       	breq	.+6      	; 0xebc <dtoa_prf+0x1e4>
     eb6:	91 93       	st	Z+, r25
     eb8:	81 50       	subi	r24, 0x01	; 1
     eba:	fb cf       	rjmp	.-10     	; 0xeb2 <dtoa_prf+0x1da>
     ebc:	c2 0e       	add	r12, r18
     ebe:	d1 1c       	adc	r13, r1
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	0f 2d       	mov	r16, r15
     ec4:	06 0f       	add	r16, r22
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	34 2f       	mov	r19, r20
     eca:	30 71       	andi	r19, 0x10	; 16
     ecc:	44 ff       	sbrs	r20, 4
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <dtoa_prf+0x1fe>
     ed0:	91 33       	cpi	r25, 0x31	; 49
     ed2:	09 f4       	brne	.+2      	; 0xed6 <dtoa_prf+0x1fe>
     ed4:	01 50       	subi	r16, 0x01	; 1
     ed6:	10 16       	cp	r1, r16
     ed8:	24 f4       	brge	.+8      	; 0xee2 <dtoa_prf+0x20a>
     eda:	09 30       	cpi	r16, 0x09	; 9
     edc:	18 f0       	brcs	.+6      	; 0xee4 <dtoa_prf+0x20c>
     ede:	08 e0       	ldi	r16, 0x08	; 8
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <dtoa_prf+0x20c>
     ee2:	01 e0       	ldi	r16, 0x01	; 1
     ee4:	ab 01       	movw	r20, r22
     ee6:	77 ff       	sbrs	r23, 7
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <dtoa_prf+0x216>
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	fb 01       	movw	r30, r22
     ef0:	e4 1b       	sub	r30, r20
     ef2:	f5 0b       	sbc	r31, r21
     ef4:	a1 e0       	ldi	r26, 0x01	; 1
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ac 0f       	add	r26, r28
     efa:	bd 1f       	adc	r27, r29
     efc:	ea 0f       	add	r30, r26
     efe:	fb 1f       	adc	r31, r27
     f00:	8e e2       	ldi	r24, 0x2E	; 46
     f02:	a8 2e       	mov	r10, r24
     f04:	4b 01       	movw	r8, r22
     f06:	80 1a       	sub	r8, r16
     f08:	91 08       	sbc	r9, r1
     f0a:	0b 2d       	mov	r16, r11
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	11 95       	neg	r17
     f10:	01 95       	neg	r16
     f12:	11 09       	sbc	r17, r1
     f14:	4f 3f       	cpi	r20, 0xFF	; 255
     f16:	bf ef       	ldi	r27, 0xFF	; 255
     f18:	5b 07       	cpc	r21, r27
     f1a:	21 f4       	brne	.+8      	; 0xf24 <dtoa_prf+0x24c>
     f1c:	d6 01       	movw	r26, r12
     f1e:	ac 92       	st	X, r10
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	6d 01       	movw	r12, r26
     f24:	64 17       	cp	r22, r20
     f26:	75 07       	cpc	r23, r21
     f28:	2c f0       	brlt	.+10     	; 0xf34 <dtoa_prf+0x25c>
     f2a:	84 16       	cp	r8, r20
     f2c:	95 06       	cpc	r9, r21
     f2e:	14 f4       	brge	.+4      	; 0xf34 <dtoa_prf+0x25c>
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <dtoa_prf+0x25e>
     f34:	80 e3       	ldi	r24, 0x30	; 48
     f36:	41 50       	subi	r20, 0x01	; 1
     f38:	51 09       	sbc	r21, r1
     f3a:	31 96       	adiw	r30, 0x01	; 1
     f3c:	d6 01       	movw	r26, r12
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	7d 01       	movw	r14, r26
     f42:	40 17       	cp	r20, r16
     f44:	51 07       	cpc	r21, r17
     f46:	24 f0       	brlt	.+8      	; 0xf50 <dtoa_prf+0x278>
     f48:	d6 01       	movw	r26, r12
     f4a:	8c 93       	st	X, r24
     f4c:	67 01       	movw	r12, r14
     f4e:	e2 cf       	rjmp	.-60     	; 0xf14 <dtoa_prf+0x23c>
     f50:	64 17       	cp	r22, r20
     f52:	75 07       	cpc	r23, r21
     f54:	39 f4       	brne	.+14     	; 0xf64 <dtoa_prf+0x28c>
     f56:	96 33       	cpi	r25, 0x36	; 54
     f58:	20 f4       	brcc	.+8      	; 0xf62 <dtoa_prf+0x28a>
     f5a:	95 33       	cpi	r25, 0x35	; 53
     f5c:	19 f4       	brne	.+6      	; 0xf64 <dtoa_prf+0x28c>
     f5e:	31 11       	cpse	r19, r1
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <dtoa_prf+0x28c>
     f62:	81 e3       	ldi	r24, 0x31	; 49
     f64:	f6 01       	movw	r30, r12
     f66:	80 83       	st	Z, r24
     f68:	f7 01       	movw	r30, r14
     f6a:	82 2f       	mov	r24, r18
     f6c:	90 e2       	ldi	r25, 0x20	; 32
     f6e:	88 23       	and	r24, r24
     f70:	19 f0       	breq	.+6      	; 0xf78 <dtoa_prf+0x2a0>
     f72:	91 93       	st	Z+, r25
     f74:	81 50       	subi	r24, 0x01	; 1
     f76:	fb cf       	rjmp	.-10     	; 0xf6e <dtoa_prf+0x296>
     f78:	f7 01       	movw	r30, r14
     f7a:	e2 0f       	add	r30, r18
     f7c:	f1 1d       	adc	r31, r1
     f7e:	10 82       	st	Z, r1
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	29 96       	adiw	r28, 0x09	; 9
     f86:	ec e0       	ldi	r30, 0x0C	; 12
     f88:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__epilogue_restores__+0xc>

00000f8c <__ftoa_engine>:
     f8c:	28 30       	cpi	r18, 0x08	; 8
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <__ftoa_engine+0x6>
     f90:	27 e0       	ldi	r18, 0x07	; 7
     f92:	33 27       	eor	r19, r19
     f94:	da 01       	movw	r26, r20
     f96:	99 0f       	add	r25, r25
     f98:	31 1d       	adc	r19, r1
     f9a:	87 fd       	sbrc	r24, 7
     f9c:	91 60       	ori	r25, 0x01	; 1
     f9e:	00 96       	adiw	r24, 0x00	; 0
     fa0:	61 05       	cpc	r22, r1
     fa2:	71 05       	cpc	r23, r1
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <__ftoa_engine+0x28>
     fa6:	32 60       	ori	r19, 0x02	; 2
     fa8:	2e 5f       	subi	r18, 0xFE	; 254
     faa:	3d 93       	st	X+, r19
     fac:	30 e3       	ldi	r19, 0x30	; 48
     fae:	2a 95       	dec	r18
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <__ftoa_engine+0x1e>
     fb2:	08 95       	ret
     fb4:	9f 3f       	cpi	r25, 0xFF	; 255
     fb6:	30 f0       	brcs	.+12     	; 0xfc4 <__ftoa_engine+0x38>
     fb8:	80 38       	cpi	r24, 0x80	; 128
     fba:	71 05       	cpc	r23, r1
     fbc:	61 05       	cpc	r22, r1
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <__ftoa_engine+0x36>
     fc0:	3c 5f       	subi	r19, 0xFC	; 252
     fc2:	3c 5f       	subi	r19, 0xFC	; 252
     fc4:	3d 93       	st	X+, r19
     fc6:	91 30       	cpi	r25, 0x01	; 1
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <__ftoa_engine+0x40>
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	91 1d       	adc	r25, r1
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	1f 93       	push	r17
     fd4:	0f 93       	push	r16
     fd6:	ff 92       	push	r15
     fd8:	ef 92       	push	r14
     fda:	19 2f       	mov	r17, r25
     fdc:	98 7f       	andi	r25, 0xF8	; 248
     fde:	96 95       	lsr	r25
     fe0:	e9 2f       	mov	r30, r25
     fe2:	96 95       	lsr	r25
     fe4:	96 95       	lsr	r25
     fe6:	e9 0f       	add	r30, r25
     fe8:	ff 27       	eor	r31, r31
     fea:	e2 55       	subi	r30, 0x52	; 82
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	99 27       	eor	r25, r25
     ff0:	33 27       	eor	r19, r19
     ff2:	ee 24       	eor	r14, r14
     ff4:	ff 24       	eor	r15, r15
     ff6:	a7 01       	movw	r20, r14
     ff8:	e7 01       	movw	r28, r14
     ffa:	05 90       	lpm	r0, Z+
     ffc:	08 94       	sec
     ffe:	07 94       	ror	r0
    1000:	28 f4       	brcc	.+10     	; 0x100c <__ftoa_engine+0x80>
    1002:	36 0f       	add	r19, r22
    1004:	e7 1e       	adc	r14, r23
    1006:	f8 1e       	adc	r15, r24
    1008:	49 1f       	adc	r20, r25
    100a:	51 1d       	adc	r21, r1
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	06 94       	lsr	r0
    1016:	a1 f7       	brne	.-24     	; 0x1000 <__ftoa_engine+0x74>
    1018:	05 90       	lpm	r0, Z+
    101a:	07 94       	ror	r0
    101c:	28 f4       	brcc	.+10     	; 0x1028 <__ftoa_engine+0x9c>
    101e:	e7 0e       	add	r14, r23
    1020:	f8 1e       	adc	r15, r24
    1022:	49 1f       	adc	r20, r25
    1024:	56 1f       	adc	r21, r22
    1026:	c1 1d       	adc	r28, r1
    1028:	77 0f       	add	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	66 1f       	adc	r22, r22
    1030:	06 94       	lsr	r0
    1032:	a1 f7       	brne	.-24     	; 0x101c <__ftoa_engine+0x90>
    1034:	05 90       	lpm	r0, Z+
    1036:	07 94       	ror	r0
    1038:	28 f4       	brcc	.+10     	; 0x1044 <__ftoa_engine+0xb8>
    103a:	f8 0e       	add	r15, r24
    103c:	49 1f       	adc	r20, r25
    103e:	56 1f       	adc	r21, r22
    1040:	c7 1f       	adc	r28, r23
    1042:	d1 1d       	adc	r29, r1
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	06 94       	lsr	r0
    104e:	a1 f7       	brne	.-24     	; 0x1038 <__ftoa_engine+0xac>
    1050:	05 90       	lpm	r0, Z+
    1052:	07 94       	ror	r0
    1054:	20 f4       	brcc	.+8      	; 0x105e <__ftoa_engine+0xd2>
    1056:	49 0f       	add	r20, r25
    1058:	56 1f       	adc	r21, r22
    105a:	c7 1f       	adc	r28, r23
    105c:	d8 1f       	adc	r29, r24
    105e:	99 0f       	add	r25, r25
    1060:	66 1f       	adc	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	06 94       	lsr	r0
    1068:	a9 f7       	brne	.-22     	; 0x1054 <__ftoa_engine+0xc8>
    106a:	84 91       	lpm	r24, Z
    106c:	10 95       	com	r17
    106e:	17 70       	andi	r17, 0x07	; 7
    1070:	41 f0       	breq	.+16     	; 0x1082 <__ftoa_engine+0xf6>
    1072:	d6 95       	lsr	r29
    1074:	c7 95       	ror	r28
    1076:	57 95       	ror	r21
    1078:	47 95       	ror	r20
    107a:	f7 94       	ror	r15
    107c:	e7 94       	ror	r14
    107e:	1a 95       	dec	r17
    1080:	c1 f7       	brne	.-16     	; 0x1072 <__ftoa_engine+0xe6>
    1082:	e4 e5       	ldi	r30, 0x54	; 84
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	68 94       	set
    1088:	15 90       	lpm	r1, Z+
    108a:	15 91       	lpm	r17, Z+
    108c:	35 91       	lpm	r19, Z+
    108e:	65 91       	lpm	r22, Z+
    1090:	95 91       	lpm	r25, Z+
    1092:	05 90       	lpm	r0, Z+
    1094:	7f e2       	ldi	r23, 0x2F	; 47
    1096:	73 95       	inc	r23
    1098:	e1 18       	sub	r14, r1
    109a:	f1 0a       	sbc	r15, r17
    109c:	43 0b       	sbc	r20, r19
    109e:	56 0b       	sbc	r21, r22
    10a0:	c9 0b       	sbc	r28, r25
    10a2:	d0 09       	sbc	r29, r0
    10a4:	c0 f7       	brcc	.-16     	; 0x1096 <__ftoa_engine+0x10a>
    10a6:	e1 0c       	add	r14, r1
    10a8:	f1 1e       	adc	r15, r17
    10aa:	43 1f       	adc	r20, r19
    10ac:	56 1f       	adc	r21, r22
    10ae:	c9 1f       	adc	r28, r25
    10b0:	d0 1d       	adc	r29, r0
    10b2:	7e f4       	brtc	.+30     	; 0x10d2 <__ftoa_engine+0x146>
    10b4:	70 33       	cpi	r23, 0x30	; 48
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__ftoa_engine+0x130>
    10b8:	8a 95       	dec	r24
    10ba:	e6 cf       	rjmp	.-52     	; 0x1088 <__ftoa_engine+0xfc>
    10bc:	e8 94       	clt
    10be:	01 50       	subi	r16, 0x01	; 1
    10c0:	30 f0       	brcs	.+12     	; 0x10ce <__ftoa_engine+0x142>
    10c2:	08 0f       	add	r16, r24
    10c4:	0a f4       	brpl	.+2      	; 0x10c8 <__ftoa_engine+0x13c>
    10c6:	00 27       	eor	r16, r16
    10c8:	02 17       	cp	r16, r18
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <__ftoa_engine+0x142>
    10cc:	20 2f       	mov	r18, r16
    10ce:	23 95       	inc	r18
    10d0:	02 2f       	mov	r16, r18
    10d2:	7a 33       	cpi	r23, 0x3A	; 58
    10d4:	28 f0       	brcs	.+10     	; 0x10e0 <__ftoa_engine+0x154>
    10d6:	79 e3       	ldi	r23, 0x39	; 57
    10d8:	7d 93       	st	X+, r23
    10da:	2a 95       	dec	r18
    10dc:	e9 f7       	brne	.-6      	; 0x10d8 <__ftoa_engine+0x14c>
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <__ftoa_engine+0x174>
    10e0:	7d 93       	st	X+, r23
    10e2:	2a 95       	dec	r18
    10e4:	89 f6       	brne	.-94     	; 0x1088 <__ftoa_engine+0xfc>
    10e6:	06 94       	lsr	r0
    10e8:	97 95       	ror	r25
    10ea:	67 95       	ror	r22
    10ec:	37 95       	ror	r19
    10ee:	17 95       	ror	r17
    10f0:	17 94       	ror	r1
    10f2:	e1 18       	sub	r14, r1
    10f4:	f1 0a       	sbc	r15, r17
    10f6:	43 0b       	sbc	r20, r19
    10f8:	56 0b       	sbc	r21, r22
    10fa:	c9 0b       	sbc	r28, r25
    10fc:	d0 09       	sbc	r29, r0
    10fe:	98 f0       	brcs	.+38     	; 0x1126 <__ftoa_engine+0x19a>
    1100:	23 95       	inc	r18
    1102:	7e 91       	ld	r23, -X
    1104:	73 95       	inc	r23
    1106:	7a 33       	cpi	r23, 0x3A	; 58
    1108:	08 f0       	brcs	.+2      	; 0x110c <__ftoa_engine+0x180>
    110a:	70 e3       	ldi	r23, 0x30	; 48
    110c:	7c 93       	st	X, r23
    110e:	20 13       	cpse	r18, r16
    1110:	b8 f7       	brcc	.-18     	; 0x1100 <__ftoa_engine+0x174>
    1112:	7e 91       	ld	r23, -X
    1114:	70 61       	ori	r23, 0x10	; 16
    1116:	7d 93       	st	X+, r23
    1118:	30 f0       	brcs	.+12     	; 0x1126 <__ftoa_engine+0x19a>
    111a:	83 95       	inc	r24
    111c:	71 e3       	ldi	r23, 0x31	; 49
    111e:	7d 93       	st	X+, r23
    1120:	70 e3       	ldi	r23, 0x30	; 48
    1122:	2a 95       	dec	r18
    1124:	e1 f7       	brne	.-8      	; 0x111e <__ftoa_engine+0x192>
    1126:	11 24       	eor	r1, r1
    1128:	ef 90       	pop	r14
    112a:	ff 90       	pop	r15
    112c:	0f 91       	pop	r16
    112e:	1f 91       	pop	r17
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	99 27       	eor	r25, r25
    1136:	87 fd       	sbrc	r24, 7
    1138:	90 95       	com	r25
    113a:	08 95       	ret

0000113c <strrev>:
    113c:	dc 01       	movw	r26, r24
    113e:	fc 01       	movw	r30, r24
    1140:	67 2f       	mov	r22, r23
    1142:	71 91       	ld	r23, Z+
    1144:	77 23       	and	r23, r23
    1146:	e1 f7       	brne	.-8      	; 0x1140 <strrev+0x4>
    1148:	32 97       	sbiw	r30, 0x02	; 2
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <strrev+0x18>
    114c:	7c 91       	ld	r23, X
    114e:	6d 93       	st	X+, r22
    1150:	70 83       	st	Z, r23
    1152:	62 91       	ld	r22, -Z
    1154:	ae 17       	cp	r26, r30
    1156:	bf 07       	cpc	r27, r31
    1158:	c8 f3       	brcs	.-14     	; 0x114c <strrev+0x10>
    115a:	08 95       	ret

0000115c <__prologue_saves__>:
    115c:	2f 92       	push	r2
    115e:	3f 92       	push	r3
    1160:	4f 92       	push	r4
    1162:	5f 92       	push	r5
    1164:	6f 92       	push	r6
    1166:	7f 92       	push	r7
    1168:	8f 92       	push	r8
    116a:	9f 92       	push	r9
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	ca 1b       	sub	r28, r26
    1186:	db 0b       	sbc	r29, r27
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	09 94       	ijmp

00001194 <__epilogue_restores__>:
    1194:	2a 88       	ldd	r2, Y+18	; 0x12
    1196:	39 88       	ldd	r3, Y+17	; 0x11
    1198:	48 88       	ldd	r4, Y+16	; 0x10
    119a:	5f 84       	ldd	r5, Y+15	; 0x0f
    119c:	6e 84       	ldd	r6, Y+14	; 0x0e
    119e:	7d 84       	ldd	r7, Y+13	; 0x0d
    11a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    11a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a6:	b9 84       	ldd	r11, Y+9	; 0x09
    11a8:	c8 84       	ldd	r12, Y+8	; 0x08
    11aa:	df 80       	ldd	r13, Y+7	; 0x07
    11ac:	ee 80       	ldd	r14, Y+6	; 0x06
    11ae:	fd 80       	ldd	r15, Y+5	; 0x05
    11b0:	0c 81       	ldd	r16, Y+4	; 0x04
    11b2:	1b 81       	ldd	r17, Y+3	; 0x03
    11b4:	aa 81       	ldd	r26, Y+2	; 0x02
    11b6:	b9 81       	ldd	r27, Y+1	; 0x01
    11b8:	ce 0f       	add	r28, r30
    11ba:	d1 1d       	adc	r29, r1
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	ed 01       	movw	r28, r26
    11c8:	08 95       	ret

000011ca <_exit>:
    11ca:	f8 94       	cli

000011cc <__stop_program>:
    11cc:	ff cf       	rjmp	.-2      	; 0x11cc <__stop_program>
