
Farm_01062019_v3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800200  00000a82  00000b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008002a0  008002a0  00000bb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000225e  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000144c  00000000  00000000  00002fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fad  00000000  00000000  00004422  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  000053d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000851  00000000  00000000  00005670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001192  00000000  00000000  00005ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00007053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	ae c2       	rjmp	.+1372   	; 0x5a2 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	03 c3       	rjmp	.+1542   	; 0x66c <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e8       	ldi	r30, 0x82	; 130
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3a       	cpi	r26, 0xA0	; 160
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ea       	ldi	r26, 0xA0	; 160
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 3d       	cpi	r26, 0xD5	; 213
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	22 d1       	rcall	.+580    	; 0x364 <main>
 120:	ae c4       	rjmp	.+2396   	; 0xa7e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <dht_getdata_dht_11>:

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 124:	bf 92       	push	r11
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <dht_getdata_dht_11+0x14>
 138:	1f 92       	push	r1
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
 140:	fe 01       	movw	r30, r28
 142:	31 96       	adiw	r30, 0x01	; 1
 144:	25 e0       	ldi	r18, 0x05	; 5
 146:	df 01       	movw	r26, r30
 148:	1d 92       	st	X+, r1
 14a:	2a 95       	dec	r18
 14c:	e9 f7       	brne	.-6      	; 0x148 <dht_getdata_dht_11+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
 14e:	21 b1       	in	r18, 0x01	; 1
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	04 2e       	mov	r0, r20
 156:	02 c0       	rjmp	.+4      	; 0x15c <dht_getdata_dht_11+0x38>
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <dht_getdata_dht_11+0x34>
 160:	2e 2b       	or	r18, r30
 162:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //high
 164:	22 b1       	in	r18, 0x02	; 2
 166:	2e 2b       	or	r18, r30
 168:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	bf ef       	ldi	r27, 0xFF	; 255
 16c:	21 ee       	ldi	r18, 0xE1	; 225
 16e:	34 e0       	ldi	r19, 0x04	; 4
 170:	b1 50       	subi	r27, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <dht_getdata_dht_11+0x4c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <dht_getdata_dht_11+0x56>
 17a:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
 17c:	32 b1       	in	r19, 0x02	; 2
 17e:	2e 2f       	mov	r18, r30
 180:	20 95       	com	r18
 182:	32 23       	and	r19, r18
 184:	32 b9       	out	0x02, r19	; 2
 186:	5f ef       	ldi	r21, 0xFF	; 255
 188:	a0 ee       	ldi	r26, 0xE0	; 224
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	51 50       	subi	r21, 0x01	; 1
 18e:	a0 40       	sbci	r26, 0x00	; 0
 190:	b0 40       	sbci	r27, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <dht_getdata_dht_11+0x68>
 194:	00 c0       	rjmp	.+0      	; 0x196 <dht_getdata_dht_11+0x72>
 196:	00 00       	nop
	
		_delay_ms(18);
	
	
	
	DHT_PORT |= (1<<channel); //high
 198:	32 b1       	in	r19, 0x02	; 2
 19a:	3e 2b       	or	r19, r30
 19c:	32 b9       	out	0x02, r19	; 2
	DHT_DDR &= ~(1<<channel); //input
 19e:	31 b1       	in	r19, 0x01	; 1
 1a0:	23 23       	and	r18, r19
 1a2:	21 b9       	out	0x01, r18	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	25 ed       	ldi	r18, 0xD5	; 213
 1a6:	2a 95       	dec	r18
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <dht_getdata_dht_11+0x82>
 1aa:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
 1ac:	20 b1       	in	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	04 2e       	mov	r0, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <dht_getdata_dht_11+0x94>
 1b4:	35 95       	asr	r19
 1b6:	27 95       	ror	r18
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <dht_getdata_dht_11+0x90>
 1bc:	20 fd       	sbrc	r18, 0
 1be:	74 c0       	rjmp	.+232    	; 0x2a8 <dht_getdata_dht_11+0x184>
 1c0:	af e3       	ldi	r26, 0x3F	; 63
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	11 97       	sbiw	r26, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <dht_getdata_dht_11+0xa0>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <dht_getdata_dht_11+0xa6>
 1ca:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
 1cc:	20 b1       	in	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <dht_getdata_dht_11+0xb2>
 1d2:	35 95       	asr	r19
 1d4:	27 95       	ror	r18
 1d6:	4a 95       	dec	r20
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <dht_getdata_dht_11+0xae>
 1da:	20 ff       	sbrs	r18, 0
 1dc:	67 c0       	rjmp	.+206    	; 0x2ac <dht_getdata_dht_11+0x188>
 1de:	af e3       	ldi	r26, 0x3F	; 63
 1e0:	b1 e0       	ldi	r27, 0x01	; 1
 1e2:	11 97       	sbiw	r26, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <dht_getdata_dht_11+0xbe>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <dht_getdata_dht_11+0xc4>
 1e8:	00 00       	nop
 1ea:	9e 01       	movw	r18, r28
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	79 01       	movw	r14, r18
 1f2:	6e 01       	movw	r12, r28
 1f4:	36 e0       	ldi	r19, 0x06	; 6
 1f6:	c3 0e       	add	r12, r19
 1f8:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
 1fa:	01 e0       	ldi	r16, 0x01	; 1
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	31 c0       	rjmp	.+98     	; 0x262 <dht_getdata_dht_11+0x13e>
 200:	41 50       	subi	r20, 0x01	; 1
 202:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 204:	19 f4       	brne	.+6      	; 0x20c <dht_getdata_dht_11+0xe8>
 206:	54 c0       	rjmp	.+168    	; 0x2b0 <dht_getdata_dht_11+0x18c>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 208:	49 ec       	ldi	r20, 0xC9	; 201
 20a:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
 20c:	20 b1       	in	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2e 23       	and	r18, r30
 212:	3f 23       	and	r19, r31
 214:	23 2b       	or	r18, r19
 216:	a1 f3       	breq	.-24     	; 0x200 <dht_getdata_dht_11+0xdc>
 218:	40 ea       	ldi	r20, 0xA0	; 160
 21a:	4a 95       	dec	r20
 21c:	f1 f7       	brne	.-4      	; 0x21a <dht_getdata_dht_11+0xf6>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
 21e:	20 b1       	in	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	2e 23       	and	r18, r30
 224:	3f 23       	and	r19, r31
 226:	23 2b       	or	r18, r19
 228:	41 f0       	breq	.+16     	; 0x23a <dht_getdata_dht_11+0x116>
				result |= (1<<(7-i));
 22a:	98 01       	movw	r18, r16
 22c:	0a 2e       	mov	r0, r26
 22e:	02 c0       	rjmp	.+4      	; 0x234 <dht_getdata_dht_11+0x110>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <dht_getdata_dht_11+0x10c>
 238:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
 23a:	49 ec       	ldi	r20, 0xC9	; 201
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	03 c0       	rjmp	.+6      	; 0x246 <dht_getdata_dht_11+0x122>
 240:	41 50       	subi	r20, 0x01	; 1
 242:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
 244:	b9 f1       	breq	.+110    	; 0x2b4 <dht_getdata_dht_11+0x190>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
 246:	20 b1       	in	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	2e 23       	and	r18, r30
 24c:	3f 23       	and	r19, r31
 24e:	23 2b       	or	r18, r19
 250:	b9 f7       	brne	.-18     	; 0x240 <dht_getdata_dht_11+0x11c>
 252:	11 97       	sbiw	r26, 0x01	; 1
 254:	c8 f6       	brcc	.-78     	; 0x208 <dht_getdata_dht_11+0xe4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
 256:	d7 01       	movw	r26, r14
 258:	bd 92       	st	X+, r11
 25a:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
 25c:	ca 16       	cp	r12, r26
 25e:	db 06       	cpc	r13, r27
 260:	21 f0       	breq	.+8      	; 0x26a <dht_getdata_dht_11+0x146>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
 262:	a7 e0       	ldi	r26, 0x07	; 7
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	b1 2c       	mov	r11, r1
 268:	cf cf       	rjmp	.-98     	; 0x208 <dht_getdata_dht_11+0xe4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
 26a:	21 b1       	in	r18, 0x01	; 1
 26c:	2e 2b       	or	r18, r30
 26e:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //low
 270:	22 b1       	in	r18, 0x02	; 2
 272:	e2 2b       	or	r30, r18
 274:	e2 b9       	out	0x02, r30	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	bf ef       	ldi	r27, 0xFF	; 255
 278:	e1 ee       	ldi	r30, 0xE1	; 225
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	b1 50       	subi	r27, 0x01	; 1
 27e:	e0 40       	sbci	r30, 0x00	; 0
 280:	f0 40       	sbci	r31, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <dht_getdata_dht_11+0x158>
 284:	00 c0       	rjmp	.+0      	; 0x286 <dht_getdata_dht_11+0x162>
 286:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
 288:	49 81       	ldd	r20, Y+1	; 0x01
 28a:	5b 81       	ldd	r21, Y+3	; 0x03
 28c:	2a 81       	ldd	r18, Y+2	; 0x02
 28e:	24 0f       	add	r18, r20
 290:	25 0f       	add	r18, r21
 292:	3c 81       	ldd	r19, Y+4	; 0x04
 294:	23 0f       	add	r18, r19
 296:	3d 81       	ldd	r19, Y+5	; 0x05
 298:	23 13       	cpse	r18, r19
 29a:	0e c0       	rjmp	.+28     	; 0x2b8 <dht_getdata_dht_11+0x194>
		//return temperature and humidity
		
			*temperature = bits[2];
 29c:	dc 01       	movw	r26, r24
 29e:	5c 93       	st	X, r21
			*humidity = bits[0];
 2a0:	fb 01       	movw	r30, r22
 2a2:	40 83       	st	Z, r20
		



		
		return 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <dht_getdata_dht_11+0x196>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	07 c0       	rjmp	.+14     	; 0x2ba <dht_getdata_dht_11+0x196>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <dht_getdata_dht_11+0x196>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <dht_getdata_dht_11+0x196>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <dht_getdata_dht_11+0x196>

		
		return 0;
	}

	return -1;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	bf 90       	pop	r11
 2d6:	08 95       	ret

000002d8 <relayModuleControl>:
 *  Author: aelnabty
 */ 
#include "GPIOcontrol.h"

void relayModuleControl(unsigned char * data)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	1f 92       	push	r1
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	uartPacket packet;
	
	
	packetSplitter_2Bytes(data, &packet);
 2e4:	be 01       	movw	r22, r28
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	41 d1       	rcall	.+642    	; 0x56e <packetSplitter_2Bytes>
	
	
	switch(packet.id)
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	82 33       	cpi	r24, 0x32	; 50
 2f0:	99 f0       	breq	.+38     	; 0x318 <relayModuleControl+0x40>
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <relayModuleControl+0x22>
 2f4:	81 33       	cpi	r24, 0x31	; 49
 2f6:	31 f0       	breq	.+12     	; 0x304 <relayModuleControl+0x2c>
 2f8:	2d c0       	rjmp	.+90     	; 0x354 <relayModuleControl+0x7c>
 2fa:	83 33       	cpi	r24, 0x33	; 51
 2fc:	b9 f0       	breq	.+46     	; 0x32c <relayModuleControl+0x54>
 2fe:	84 33       	cpi	r24, 0x34	; 52
 300:	f9 f0       	breq	.+62     	; 0x340 <relayModuleControl+0x68>
 302:	28 c0       	rjmp	.+80     	; 0x354 <relayModuleControl+0x7c>
	{
		case MED_1_TABLE+'0':
							if (packet.data == ('0'+1u))
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	81 33       	cpi	r24, 0x31	; 49
 308:	11 f4       	brne	.+4      	; 0x30e <relayModuleControl+0x36>
							{
									MED_1_ON;
 30a:	40 98       	cbi	0x08, 0	; 8
 30c:	01 c0       	rjmp	.+2      	; 0x310 <relayModuleControl+0x38>
							}
							else
							{
								MED_1_OFF;
 30e:	40 9a       	sbi	0x08, 0	; 8
							}
							UART_string_tx("[ERROR Receiving:MED1 Ok]");
 310:	84 e1       	ldi	r24, 0x14	; 20
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	6f d1       	rcall	.+734    	; 0x5f4 <UART_string_tx>
							break;
 316:	21 c0       	rjmp	.+66     	; 0x35a <relayModuleControl+0x82>

		case MED_2_TABLE+'0':
							if (packet.data == ('0'+1u))
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	81 33       	cpi	r24, 0x31	; 49
 31c:	11 f4       	brne	.+4      	; 0x322 <relayModuleControl+0x4a>
							{
								MED_2_ON;
 31e:	41 98       	cbi	0x08, 1	; 8
 320:	01 c0       	rjmp	.+2      	; 0x324 <relayModuleControl+0x4c>
							}
							else
							{
								MED_2_OFF;
 322:	41 9a       	sbi	0x08, 1	; 8
							}
							UART_string_tx("[ERROR Receiving:MED2 Ok]");
 324:	8e e2       	ldi	r24, 0x2E	; 46
 326:	92 e0       	ldi	r25, 0x02	; 2
 328:	65 d1       	rcall	.+714    	; 0x5f4 <UART_string_tx>
							break;
 32a:	17 c0       	rjmp	.+46     	; 0x35a <relayModuleControl+0x82>
							
		case MED_3_TABLE+'0':
							if (packet.data == ('0'+1u))
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	81 33       	cpi	r24, 0x31	; 49
 330:	11 f4       	brne	.+4      	; 0x336 <relayModuleControl+0x5e>
							{
								MED_3_ON;
 332:	42 98       	cbi	0x08, 2	; 8
 334:	01 c0       	rjmp	.+2      	; 0x338 <relayModuleControl+0x60>
							}
							else
							{
								MED_3_OFF;
							}
							UART_string_tx("[ERROR Receiving:MED3 Ok]");
 336:	42 9a       	sbi	0x08, 2	; 8
 338:	88 e4       	ldi	r24, 0x48	; 72
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	5b d1       	rcall	.+694    	; 0x5f4 <UART_string_tx>
							break;
 33e:	0d c0       	rjmp	.+26     	; 0x35a <relayModuleControl+0x82>
							
							
		case MED_4_TABLE+'0':
							if (packet.data == ('0'+1u))
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	81 33       	cpi	r24, 0x31	; 49
 344:	11 f4       	brne	.+4      	; 0x34a <relayModuleControl+0x72>
							{
								MED_4_ON;
 346:	43 98       	cbi	0x08, 3	; 8
							}
							else
							{
								MED_4_OFF;
 348:	01 c0       	rjmp	.+2      	; 0x34c <relayModuleControl+0x74>
							}
							UART_string_tx("[ERROR Receiving:MED4 Ok]");
 34a:	43 9a       	sbi	0x08, 3	; 8
 34c:	82 e6       	ldi	r24, 0x62	; 98
 34e:	92 e0       	ldi	r25, 0x02	; 2
							break;														
 350:	51 d1       	rcall	.+674    	; 0x5f4 <UART_string_tx>
						
		default: UART_string_tx("[ERROR Receiving:YES]");																					
 352:	03 c0       	rjmp	.+6      	; 0x35a <relayModuleControl+0x82>
 354:	8c e7       	ldi	r24, 0x7C	; 124
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	4d d1       	rcall	.+666    	; 0x5f4 <UART_string_tx>
						
	}
	
}
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <main>:

extern volatile unsigned char oneSec;

int main(void)
{
	DDRB_CONFIG;
 364:	8f e1       	ldi	r24, 0x1F	; 31
 366:	84 b9       	out	0x04, r24	; 4
	PORTB_COMFIG;
 368:	15 b8       	out	0x05, r1	; 5
	DDRC_CONFIG;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	87 b9       	out	0x07, r24	; 7
	PORTC_COMFIG;
 36e:	18 b8       	out	0x08, r1	; 8
	timer1_init();
 370:	07 d1       	rcall	.+526    	; 0x580 <timer1_init>
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
	
	
     UART_int();
 372:	28 d1       	rcall	.+592    	; 0x5c4 <UART_int>
 374:	8f e1       	ldi	r24, 0x1F	; 31
 376:	9e e4       	ldi	r25, 0x4E	; 78
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0x14>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x1a>
 37e:	00 00       	nop
 380:	f8 94       	cli



	//sei();
	cli();
	PORTB = 0u;
 382:	15 b8       	out	0x05, r1	; 5
	usound_init();	
 384:	9e d1       	rcall	.+828    	; 0x6c2 <usound_init>
 386:	9f ef       	ldi	r25, 0xFF	; 255
 388:	23 ed       	ldi	r18, 0xD3	; 211
 38a:	80 e3       	ldi	r24, 0x30	; 48
 38c:	91 50       	subi	r25, 0x01	; 1
 38e:	20 40       	sbci	r18, 0x00	; 0
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x28>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x32>
 396:	00 00       	nop
 398:	9f ef       	ldi	r25, 0xFF	; 255
 39a:	23 ed       	ldi	r18, 0xD3	; 211
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	91 50       	subi	r25, 0x01	; 1
 3a0:	20 40       	sbci	r18, 0x00	; 0
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x3a>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x44>
 3a8:	00 00       	nop
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	23 ed       	ldi	r18, 0xD3	; 211
 3ae:	80 e3       	ldi	r24, 0x30	; 48
 3b0:	91 50       	subi	r25, 0x01	; 1
 3b2:	20 40       	sbci	r18, 0x00	; 0
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0x4c>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x56>
 3ba:	00 00       	nop
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	23 ed       	ldi	r18, 0xD3	; 211
 3c0:	80 e3       	ldi	r24, 0x30	; 48
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	20 40       	sbci	r18, 0x00	; 0
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x5e>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x68>
 3cc:	00 00       	nop
 3ce:	9f ef       	ldi	r25, 0xFF	; 255
 3d0:	23 ed       	ldi	r18, 0xD3	; 211
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	20 40       	sbci	r18, 0x00	; 0
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x70>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x7a>
 3de:	00 00       	nop
 3e0:	c0 91 b0 02 	lds	r28, 0x02B0	; 0x8002b0 <oneSec>
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	oldTime = oneSec;
 3e4:	78 94       	sei
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
	PORTB_COMFIG;
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
 3e8:	10 e0       	ldi	r17, 0x00	; 0
		
	sei();
	while(1){
			
		
		task_PERIODIC();
 3ea:	6c d0       	rcall	.+216    	; 0x4c4 <task_PERIODIC>
 3ec:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <oneSec>
		
		if(oneSec != oldTime)
 3f0:	8c 17       	cp	r24, r28
 3f2:	d9 f3       	breq	.-10     	; 0x3ea <main+0x86>
 3f4:	c0 91 b0 02 	lds	r28, 0x02B0	; 0x8002b0 <oneSec>
		{
			oldTime = oneSec;
			
			if(five_sec == 5u)
 3f8:	15 30       	cpi	r17, 0x05	; 5
 3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
			{		
				task_5sec();
 3fc:	09 d0       	rcall	.+18     	; 0x410 <task_5sec>
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
					
			}
			else
			{
				five_sec++;
 400:	1f 5f       	subi	r17, 0xFF	; 255
			}

			if(sec_3 == 3u)
 402:	d3 30       	cpi	r29, 0x03	; 3
 404:	19 f4       	brne	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	
			{
				task_10sec();
 406:	6a d0       	rcall	.+212    	; 0x4dc <task_10sec>
 408:	d0 e0       	ldi	r29, 0x00	; 0
				sec_3=0u;
 40a:	ef cf       	rjmp	.-34     	; 0x3ea <main+0x86>
 40c:	df 5f       	subi	r29, 0xFF	; 255
		
			}

			else{
				
				sec_3++;
 40e:	ed cf       	rjmp	.-38     	; 0x3ea <main+0x86>

00000410 <task_5sec>:
 410:	f8 94       	cli
					dtostrf(fhumidity, 3, 3, buffer);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');*/
					
					dht_getdata_dht_11(&temperature,&humidity,1);
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	65 ea       	ldi	r22, 0xA5	; 165
 416:	72 e0       	ldi	r23, 0x02	; 2
 418:	86 ea       	ldi	r24, 0xA6	; 166
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	83 de       	rcall	.-762    	; 0x124 <dht_getdata_dht_11>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 41e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <temperature>
 422:	4a e0       	ldi	r20, 0x0A	; 10
 424:	63 eb       	ldi	r22, 0xB3	; 179
 426:	72 e0       	ldi	r23, 0x02	; 2
 428:	08 2e       	mov	r0, r24
 42a:	00 0c       	add	r0, r0
 42c:	99 0b       	sbc	r25, r25
 42e:	f4 d2       	rcall	.+1512   	; 0xa18 <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_tx('[');
 430:	8b e5       	ldi	r24, 0x5B	; 91
 432:	d8 d0       	rcall	.+432    	; 0x5e4 <UART_tx>
					UART_string_tx(sensor1);
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	92 e0       	ldi	r25, 0x02	; 2
 438:	dd d0       	rcall	.+442    	; 0x5f4 <UART_string_tx>
					UART_string_tx(tempString);
 43a:	8e e0       	ldi	r24, 0x0E	; 14
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	da d0       	rcall	.+436    	; 0x5f4 <UART_string_tx>
					UART_string_tx(buffer);
 440:	83 eb       	ldi	r24, 0xB3	; 179
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	d7 d0       	rcall	.+430    	; 0x5f4 <UART_string_tx>
					UART_tx(']');
 446:	8d e5       	ldi	r24, 0x5D	; 93
 448:	cd d0       	rcall	.+410    	; 0x5e4 <UART_tx>
 44a:	8a e0       	ldi	r24, 0x0A	; 10
					UART_tx('\n');
 44c:	cb d0       	rcall	.+406    	; 0x5e4 <UART_tx>
 44e:	8f e3       	ldi	r24, 0x3F	; 63
 450:	9c e9       	ldi	r25, 0x9C	; 156
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <task_5sec+0x42>
 456:	00 c0       	rjmp	.+0      	; 0x458 <task_5sec+0x48>
 458:	00 00       	nop
 45a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <humidity>
 45e:	4a e0       	ldi	r20, 0x0A	; 10
 460:	63 eb       	ldi	r22, 0xB3	; 179
 462:	72 e0       	ldi	r23, 0x02	; 2
 464:	08 2e       	mov	r0, r24
 466:	00 0c       	add	r0, r0
 468:	99 0b       	sbc	r25, r25
 46a:	d6 d2       	rcall	.+1452   	; 0xa18 <__itoa_ncheck>
					_delay_ms(10);
					itoa(humidity, buffer, 10);
					UART_tx('[');
 46c:	8b e5       	ldi	r24, 0x5B	; 91
 46e:	ba d0       	rcall	.+372    	; 0x5e4 <UART_tx>
					UART_string_tx(sensor1);
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	92 e0       	ldi	r25, 0x02	; 2
					UART_string_tx(humString);
 474:	bf d0       	rcall	.+382    	; 0x5f4 <UART_string_tx>
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	92 e0       	ldi	r25, 0x02	; 2
 47a:	bc d0       	rcall	.+376    	; 0x5f4 <UART_string_tx>
					UART_string_tx(buffer);
 47c:	83 eb       	ldi	r24, 0xB3	; 179
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	b9 d0       	rcall	.+370    	; 0x5f4 <UART_string_tx>
 482:	8d e5       	ldi	r24, 0x5D	; 93
					UART_tx(']');
 484:	af d0       	rcall	.+350    	; 0x5e4 <UART_tx>
 486:	8a e0       	ldi	r24, 0x0A	; 10
 488:	ad d0       	rcall	.+346    	; 0x5e4 <UART_tx>
					UART_tx('\n');
 48a:	1e d1       	rcall	.+572    	; 0x6c8 <readDistance>
 48c:	dc 01       	movw	r26, r24
					
					waterLevel=readDistance();
 48e:	cb 01       	movw	r24, r22
 490:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <waterLevel>
 494:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <waterLevel+0x1>
 498:	a0 93 a3 02 	sts	0x02A3, r26	; 0x8002a3 <waterLevel+0x2>
 49c:	b0 93 a4 02 	sts	0x02A4, r27	; 0x8002a4 <waterLevel+0x3>
 4a0:	4a e0       	ldi	r20, 0x0A	; 10
 4a2:	63 eb       	ldi	r22, 0xB3	; 179
 4a4:	72 e0       	ldi	r23, 0x02	; 2
 4a6:	b8 d2       	rcall	.+1392   	; 0xa18 <__itoa_ncheck>
 4a8:	8b e5       	ldi	r24, 0x5B	; 91
					itoa(waterLevel, buffer, 10);
					UART_tx('[');
 4aa:	9c d0       	rcall	.+312    	; 0x5e4 <UART_tx>
 4ac:	82 e9       	ldi	r24, 0x92	; 146
 4ae:	92 e0       	ldi	r25, 0x02	; 2
					UART_string_tx("water level: ");
 4b0:	a1 d0       	rcall	.+322    	; 0x5f4 <UART_string_tx>
 4b2:	83 eb       	ldi	r24, 0xB3	; 179
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	9e d0       	rcall	.+316    	; 0x5f4 <UART_string_tx>
					UART_string_tx(buffer);
 4b8:	8d e5       	ldi	r24, 0x5D	; 93
 4ba:	94 d0       	rcall	.+296    	; 0x5e4 <UART_tx>
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	92 d0       	rcall	.+292    	; 0x5e4 <UART_tx>
					UART_tx(']');
 4c0:	78 94       	sei
 4c2:	08 95       	ret

000004c4 <task_PERIODIC>:
 4c4:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end>
					UART_tx('\n');
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	39 f4       	brne	.+14     	; 0x4da <task_PERIODIC+0x16>
					
						
					sei();	
 4cc:	f8 94       	cli
 4ce:	86 eb       	ldi	r24, 0xB6	; 182
{
	if( newData	 == TRUE )
		{
				cli();//cretical section 
				//UART_tx('[');UART_tx(receivedChars[0]);UART_tx(receivedChars[1]);UART_tx(']');
				relayModuleControl( receivedChars);
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	02 df       	rcall	.-508    	; 0x2d8 <relayModuleControl>
				newData = FALSE;			
 4d4:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>
				sei();
 4d8:	78 94       	sei
 4da:	08 95       	ret

000004dc <task_10sec>:

}
void task_10sec (void)
{
	
			cli();
 4dc:	f8 94       	cli

			if (  /*dht_getdata_dht_22(&ftemperature,&fhumidity,0)!=-1  &&*/ dht_getdata_dht_11(&temperature,&humidity,1) == 0 )
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	65 ea       	ldi	r22, 0xA5	; 165
 4e2:	72 e0       	ldi	r23, 0x02	; 2
 4e4:	86 ea       	ldi	r24, 0xA6	; 166
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	1d de       	rcall	.-966    	; 0x124 <dht_getdata_dht_11>
 4ea:	81 11       	cpse	r24, r1
 4ec:	3c c0       	rjmp	.+120    	; 0x566 <task_10sec+0x8a>
				int8_t temp_avr;
				int8_t humd_avr;
				temp_avr = ( (ftemperature+temperature)/2 );
				humd_avr = ((fhumidity+humidity)/2);
				
				if(temp_avr > 30 || humd_avr > 67)
 4ee:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <temperature>
 4f2:	06 2e       	mov	r0, r22
 4f4:	00 0c       	add	r0, r0
 4f6:	77 0b       	sbc	r23, r23
 4f8:	88 0b       	sbc	r24, r24
 4fa:	99 0b       	sbc	r25, r25
 4fc:	9e d1       	rcall	.+828    	; 0x83a <__floatsisf>
 4fe:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <ftemperature>
 502:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <ftemperature+0x1>
 506:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <ftemperature+0x2>
 50a:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <ftemperature+0x3>
 50e:	fe d0       	rcall	.+508    	; 0x70c <__addsf3>
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	5f e3       	ldi	r21, 0x3F	; 63
 518:	1c d2       	rcall	.+1080   	; 0x952 <__mulsf3>
 51a:	5c d1       	rcall	.+696    	; 0x7d4 <__fixsfsi>
 51c:	6f 31       	cpi	r22, 0x1F	; 31
 51e:	cc f4       	brge	.+50     	; 0x552 <task_10sec+0x76>
 520:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <humidity>
 524:	06 2e       	mov	r0, r22
 526:	00 0c       	add	r0, r0
 528:	77 0b       	sbc	r23, r23
 52a:	88 0b       	sbc	r24, r24
 52c:	99 0b       	sbc	r25, r25
 52e:	85 d1       	rcall	.+778    	; 0x83a <__floatsisf>
 530:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <fhumidity>
 534:	30 91 a8 02 	lds	r19, 0x02A8	; 0x8002a8 <fhumidity+0x1>
 538:	40 91 a9 02 	lds	r20, 0x02A9	; 0x8002a9 <fhumidity+0x2>
 53c:	50 91 aa 02 	lds	r21, 0x02AA	; 0x8002aa <fhumidity+0x3>
 540:	e5 d0       	rcall	.+458    	; 0x70c <__addsf3>
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	5f e3       	ldi	r21, 0x3F	; 63
 54a:	03 d2       	rcall	.+1030   	; 0x952 <__mulsf3>
 54c:	43 d1       	rcall	.+646    	; 0x7d4 <__fixsfsi>
 54e:	64 34       	cpi	r22, 0x44	; 68
 550:	1c f0       	brlt	.+6      	; 0x558 <task_10sec+0x7c>
				{
					VENTILATION_ON;
 552:	29 98       	cbi	0x05, 1	; 5
					FAN_ON;
 554:	2c 98       	cbi	0x05, 4	; 5
 556:	09 c0       	rjmp	.+18     	; 0x56a <task_10sec+0x8e>
				}
				
				else if (manualflag == 0)
 558:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <manualflag>
 55c:	81 11       	cpse	r24, r1
 55e:	05 c0       	rjmp	.+10     	; 0x56a <task_10sec+0x8e>
				{
					VENTILATION_OFF;
 560:	29 9a       	sbi	0x05, 1	; 5
					FAN_OFF;
 562:	2c 9a       	sbi	0x05, 4	; 5
 564:	02 c0       	rjmp	.+4      	; 0x56a <task_10sec+0x8e>
				
			}
			else
			{
				//UART_string_tx("FATAL ERROR!");
				FAN_ON;
 566:	2c 98       	cbi	0x05, 4	; 5
				VENTILATION_ON;
 568:	29 98       	cbi	0x05, 1	; 5
			}
			sei();
 56a:	78 94       	sei
 56c:	08 95       	ret

0000056e <packetSplitter_2Bytes>:
	
}

void packetSplitter_2Bytes( unsigned char* packet, uartPacket *packetDataId )
{
		packetDataId->id = packet[0];
 56e:	fc 01       	movw	r30, r24
 570:	20 81       	ld	r18, Z
 572:	fb 01       	movw	r30, r22
 574:	20 83       	st	Z, r18
		packetDataId->data = packet[1];
 576:	fc 01       	movw	r30, r24
 578:	81 81       	ldd	r24, Z+1	; 0x01
 57a:	fb 01       	movw	r30, r22
 57c:	81 83       	std	Z+1, r24	; 0x01
 57e:	08 95       	ret

00000580 <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
 580:	e1 e8       	ldi	r30, 0x81	; 129
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	8d 60       	ori	r24, 0x0D	; 13
 588:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
 58a:	ef e6       	ldi	r30, 0x6F	; 111
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	83 60       	ori	r24, 0x03	; 3
 592:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
 594:	8d e3       	ldi	r24, 0x3D	; 61
 596:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
 59a:	89 e0       	ldi	r24, 0x09	; 9
 59c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 5a0:	08 95       	ret

000005a2 <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	8f 93       	push	r24
	
	
	oneSec ++;
 5ae:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <oneSec>
 5b2:	8f 5f       	subi	r24, 0xFF	; 255
 5b4:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <oneSec>
	
	
 5b8:	8f 91       	pop	r24
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <UART_int>:


void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);   // enable Tx Rx and Rx interrupt
 5c4:	88 e9       	ldi	r24, 0x98	; 152
 5c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00); // 8 bit data
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d0:	85 e3       	ldi	r24, 0x35	; 53
 5d2:	8a 95       	dec	r24
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <UART_int+0xe>
 5d6:	00 00       	nop
	_delay_us(10);
	UBRR0H = (unsigned char)(UBRRset>>8);
 5d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L= (unsigned char)(UBRRset);
 5dc:	83 e0       	ldi	r24, 0x03	; 3
 5de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 5e2:	08 95       	ret

000005e4 <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSR0A & (1<<UDRE0)));
 5e4:	e0 ec       	ldi	r30, 0xC0	; 192
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	90 81       	ld	r25, Z
 5ea:	95 ff       	sbrs	r25, 5
 5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <UART_tx+0x4>
	UDR0=x;
 5ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 5f2:	08 95       	ret

000005f4 <UART_string_tx>:
}

void UART_string_tx(unsigned char *x)
{
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(x[i] !='\0')
 5fc:	80 81       	ld	r24, Z
 5fe:	88 23       	and	r24, r24
 600:	51 f0       	breq	.+20     	; 0x616 <UART_string_tx+0x22>
 602:	8f 01       	movw	r16, r30
 604:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_tx( x[i] );
 606:	ee df       	rcall	.-36     	; 0x5e4 <UART_tx>
		i++;
 608:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_string_tx(unsigned char *x)
{
	unsigned char i=0;
	while(x[i] !='\0')
 60a:	f8 01       	movw	r30, r16
 60c:	ec 0f       	add	r30, r28
 60e:	f1 1d       	adc	r31, r1
 610:	80 81       	ld	r24, Z
 612:	81 11       	cpse	r24, r1
 614:	f8 cf       	rjmp	.-16     	; 0x606 <UART_string_tx+0x12>
	{
		UART_tx( x[i] );
		i++;
	}
}
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

0000061e <recvWithStartEndMarkers>:
	char startMarker = '[';
	char endMarker = ']';
	

		char rc = Data;
		if (recvInProgress == TRUE)
 61e:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <recvInProgress.1950>
 622:	91 30       	cpi	r25, 0x01	; 1
 624:	e9 f4       	brne	.+58     	; 0x660 <recvWithStartEndMarkers+0x42>
		{
			if (rc != endMarker)
 626:	8d 35       	cpi	r24, 0x5D	; 93
 628:	69 f0       	breq	.+26     	; 0x644 <recvWithStartEndMarkers+0x26>
			{
				if (ndx < MAXDATALENGTH) { receivedChars[ndx] = rc; ndx++;  }
 62a:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <ndx.1951>
 62e:	9e 31       	cpi	r25, 0x1E	; 30
 630:	e0 f4       	brcc	.+56     	; 0x66a <recvWithStartEndMarkers+0x4c>
 632:	e9 2f       	mov	r30, r25
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	ea 54       	subi	r30, 0x4A	; 74
 638:	fd 4f       	sbci	r31, 0xFD	; 253
 63a:	80 83       	st	Z, r24
 63c:	9f 5f       	subi	r25, 0xFF	; 255
 63e:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <ndx.1951>
 642:	08 95       	ret
			}
			else
			{
				receivedChars[ndx] = '\0'; // terminate the string
 644:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <ndx.1951>
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	ea 54       	subi	r30, 0x4A	; 74
 64c:	fd 4f       	sbci	r31, 0xFD	; 253
 64e:	10 82       	st	Z, r1
				recvInProgress = FALSE;
 650:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <recvInProgress.1950>
				ndx = 0;
 654:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <ndx.1951>
				newData = TRUE;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end>
 65e:	08 95       	ret
			}
		}
		else if (rc == startMarker) { recvInProgress = TRUE; }
 660:	8b 35       	cpi	r24, 0x5B	; 91
 662:	19 f4       	brne	.+6      	; 0x66a <recvWithStartEndMarkers+0x4c>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <recvInProgress.1950>
 66a:	08 95       	ret

0000066c <__vector_25>:
	}
	


ISR(USART0_RX_vect)
{
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	0b b6       	in	r0, 0x3b	; 59
 678:	0f 92       	push	r0
 67a:	2f 93       	push	r18
 67c:	3f 93       	push	r19
 67e:	4f 93       	push	r20
 680:	5f 93       	push	r21
 682:	6f 93       	push	r22
 684:	7f 93       	push	r23
 686:	8f 93       	push	r24
 688:	9f 93       	push	r25
 68a:	af 93       	push	r26
 68c:	bf 93       	push	r27
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
	cli();
 692:	f8 94       	cli
	
	

	
	recvWithStartEndMarkers(UDR0);
 694:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 698:	c2 df       	rcall	.-124    	; 0x61e <recvWithStartEndMarkers>

	sei();
 69a:	78 94       	sei
	
}
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	bf 91       	pop	r27
 6a2:	af 91       	pop	r26
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	7f 91       	pop	r23
 6aa:	6f 91       	pop	r22
 6ac:	5f 91       	pop	r21
 6ae:	4f 91       	pop	r20
 6b0:	3f 91       	pop	r19
 6b2:	2f 91       	pop	r18
 6b4:	0f 90       	pop	r0
 6b6:	0b be       	out	0x3b, r0	; 59
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <usound_init>:
#include "usound.h"

void usound_init(void)
{
	US_DDR |= (1 << US_TRIGER)|(0 << US_ECHO);
 6c2:	0c 9a       	sbi	0x01, 4	; 1
	US_PIN |= (1<<US_ECHO);
 6c4:	05 9a       	sbi	0x00, 5	; 0
 6c6:	08 95       	ret

000006c8 <readDistance>:
 6c8:	8a e0       	ldi	r24, 0x0A	; 10
 6ca:	8a 95       	dec	r24
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <readDistance+0x2>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <readDistance+0x8>
{
	uint8_t readStatus=0;
	uint32_t disTime=0;

	_delay_us(2);
	US_PORT |= (1 << US_TRIGER);
 6d0:	14 9a       	sbi	0x02, 4	; 2
 6d2:	85 e3       	ldi	r24, 0x35	; 53
 6d4:	8a 95       	dec	r24
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <readDistance+0xc>
 6d8:	00 00       	nop
	_delay_us(10);
	US_PORT &= ~(1 << US_TRIGER);
 6da:	14 98       	cbi	0x02, 4	; 2
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <readDistance+0x28>

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	dc 01       	movw	r26, r24
		{
			disTime++;
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	a1 1d       	adc	r26, r1
 6e8:	b1 1d       	adc	r27, r1
	US_PORT &= ~(1 << US_TRIGER);

	
	while(readStatus == 0)
	{
		while(US_PIN&(1<<US_ECHO))
 6ea:	05 99       	sbic	0x00, 5	; 0
 6ec:	fb cf       	rjmp	.-10     	; 0x6e4 <readDistance+0x1c>
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <readDistance+0x2e>
 6f0:	05 99       	sbic	0x00, 5	; 0
 6f2:	f5 cf       	rjmp	.-22     	; 0x6de <readDistance+0x16>
 6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <readDistance+0x28>
			disTime++;
			readStatus = 1;
		}
	}	

	return disTime * 0.00862;	//return data in cm	
 6f6:	bc 01       	movw	r22, r24
 6f8:	cd 01       	movw	r24, r26
 6fa:	9d d0       	rcall	.+314    	; 0x836 <__floatunsisf>
 6fc:	27 ee       	ldi	r18, 0xE7	; 231
 6fe:	3a e3       	ldi	r19, 0x3A	; 58
 700:	4d e0       	ldi	r20, 0x0D	; 13
 702:	5c e3       	ldi	r21, 0x3C	; 60
 704:	26 d1       	rcall	.+588    	; 0x952 <__mulsf3>
 706:	6b c0       	rjmp	.+214    	; 0x7de <__fixunssfsi>
}
 708:	08 95       	ret

0000070a <__subsf3>:
 70a:	50 58       	subi	r21, 0x80	; 128

0000070c <__addsf3>:
 70c:	bb 27       	eor	r27, r27
 70e:	aa 27       	eor	r26, r26
 710:	0e d0       	rcall	.+28     	; 0x72e <__addsf3x>
 712:	e5 c0       	rjmp	.+458    	; 0x8de <__fp_round>
 714:	d6 d0       	rcall	.+428    	; 0x8c2 <__fp_pscA>
 716:	30 f0       	brcs	.+12     	; 0x724 <__addsf3+0x18>
 718:	db d0       	rcall	.+438    	; 0x8d0 <__fp_pscB>
 71a:	20 f0       	brcs	.+8      	; 0x724 <__addsf3+0x18>
 71c:	31 f4       	brne	.+12     	; 0x72a <__addsf3+0x1e>
 71e:	9f 3f       	cpi	r25, 0xFF	; 255
 720:	11 f4       	brne	.+4      	; 0x726 <__addsf3+0x1a>
 722:	1e f4       	brtc	.+6      	; 0x72a <__addsf3+0x1e>
 724:	cb c0       	rjmp	.+406    	; 0x8bc <__fp_nan>
 726:	0e f4       	brtc	.+2      	; 0x72a <__addsf3+0x1e>
 728:	e0 95       	com	r30
 72a:	e7 fb       	bst	r30, 7
 72c:	c1 c0       	rjmp	.+386    	; 0x8b0 <__fp_inf>

0000072e <__addsf3x>:
 72e:	e9 2f       	mov	r30, r25
 730:	e7 d0       	rcall	.+462    	; 0x900 <__fp_split3>
 732:	80 f3       	brcs	.-32     	; 0x714 <__addsf3+0x8>
 734:	ba 17       	cp	r27, r26
 736:	62 07       	cpc	r22, r18
 738:	73 07       	cpc	r23, r19
 73a:	84 07       	cpc	r24, r20
 73c:	95 07       	cpc	r25, r21
 73e:	18 f0       	brcs	.+6      	; 0x746 <__addsf3x+0x18>
 740:	71 f4       	brne	.+28     	; 0x75e <__addsf3x+0x30>
 742:	9e f5       	brtc	.+102    	; 0x7aa <__addsf3x+0x7c>
 744:	ff c0       	rjmp	.+510    	; 0x944 <__fp_zero>
 746:	0e f4       	brtc	.+2      	; 0x74a <__addsf3x+0x1c>
 748:	e0 95       	com	r30
 74a:	0b 2e       	mov	r0, r27
 74c:	ba 2f       	mov	r27, r26
 74e:	a0 2d       	mov	r26, r0
 750:	0b 01       	movw	r0, r22
 752:	b9 01       	movw	r22, r18
 754:	90 01       	movw	r18, r0
 756:	0c 01       	movw	r0, r24
 758:	ca 01       	movw	r24, r20
 75a:	a0 01       	movw	r20, r0
 75c:	11 24       	eor	r1, r1
 75e:	ff 27       	eor	r31, r31
 760:	59 1b       	sub	r21, r25
 762:	99 f0       	breq	.+38     	; 0x78a <__addsf3x+0x5c>
 764:	59 3f       	cpi	r21, 0xF9	; 249
 766:	50 f4       	brcc	.+20     	; 0x77c <__addsf3x+0x4e>
 768:	50 3e       	cpi	r21, 0xE0	; 224
 76a:	68 f1       	brcs	.+90     	; 0x7c6 <__addsf3x+0x98>
 76c:	1a 16       	cp	r1, r26
 76e:	f0 40       	sbci	r31, 0x00	; 0
 770:	a2 2f       	mov	r26, r18
 772:	23 2f       	mov	r18, r19
 774:	34 2f       	mov	r19, r20
 776:	44 27       	eor	r20, r20
 778:	58 5f       	subi	r21, 0xF8	; 248
 77a:	f3 cf       	rjmp	.-26     	; 0x762 <__addsf3x+0x34>
 77c:	46 95       	lsr	r20
 77e:	37 95       	ror	r19
 780:	27 95       	ror	r18
 782:	a7 95       	ror	r26
 784:	f0 40       	sbci	r31, 0x00	; 0
 786:	53 95       	inc	r21
 788:	c9 f7       	brne	.-14     	; 0x77c <__addsf3x+0x4e>
 78a:	7e f4       	brtc	.+30     	; 0x7aa <__addsf3x+0x7c>
 78c:	1f 16       	cp	r1, r31
 78e:	ba 0b       	sbc	r27, r26
 790:	62 0b       	sbc	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	ba f0       	brmi	.+46     	; 0x7c6 <__addsf3x+0x98>
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	a1 f0       	breq	.+40     	; 0x7c4 <__addsf3x+0x96>
 79c:	ff 0f       	add	r31, r31
 79e:	bb 1f       	adc	r27, r27
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	c2 f7       	brpl	.-16     	; 0x798 <__addsf3x+0x6a>
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <__addsf3x+0x98>
 7aa:	ba 0f       	add	r27, r26
 7ac:	62 1f       	adc	r22, r18
 7ae:	73 1f       	adc	r23, r19
 7b0:	84 1f       	adc	r24, r20
 7b2:	48 f4       	brcc	.+18     	; 0x7c6 <__addsf3x+0x98>
 7b4:	87 95       	ror	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b7 95       	ror	r27
 7bc:	f7 95       	ror	r31
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	08 f0       	brcs	.+2      	; 0x7c4 <__addsf3x+0x96>
 7c2:	b3 cf       	rjmp	.-154    	; 0x72a <__addsf3+0x1e>
 7c4:	93 95       	inc	r25
 7c6:	88 0f       	add	r24, r24
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__addsf3x+0x9e>
 7ca:	99 27       	eor	r25, r25
 7cc:	ee 0f       	add	r30, r30
 7ce:	97 95       	ror	r25
 7d0:	87 95       	ror	r24
 7d2:	08 95       	ret

000007d4 <__fixsfsi>:
 7d4:	04 d0       	rcall	.+8      	; 0x7de <__fixunssfsi>
 7d6:	68 94       	set
 7d8:	b1 11       	cpse	r27, r1
 7da:	b5 c0       	rjmp	.+362    	; 0x946 <__fp_szero>
 7dc:	08 95       	ret

000007de <__fixunssfsi>:
 7de:	98 d0       	rcall	.+304    	; 0x910 <__fp_splitA>
 7e0:	88 f0       	brcs	.+34     	; 0x804 <__fixunssfsi+0x26>
 7e2:	9f 57       	subi	r25, 0x7F	; 127
 7e4:	90 f0       	brcs	.+36     	; 0x80a <__fixunssfsi+0x2c>
 7e6:	b9 2f       	mov	r27, r25
 7e8:	99 27       	eor	r25, r25
 7ea:	b7 51       	subi	r27, 0x17	; 23
 7ec:	a0 f0       	brcs	.+40     	; 0x816 <__fixunssfsi+0x38>
 7ee:	d1 f0       	breq	.+52     	; 0x824 <__fixunssfsi+0x46>
 7f0:	66 0f       	add	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	88 1f       	adc	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	1a f0       	brmi	.+6      	; 0x800 <__fixunssfsi+0x22>
 7fa:	ba 95       	dec	r27
 7fc:	c9 f7       	brne	.-14     	; 0x7f0 <__fixunssfsi+0x12>
 7fe:	12 c0       	rjmp	.+36     	; 0x824 <__fixunssfsi+0x46>
 800:	b1 30       	cpi	r27, 0x01	; 1
 802:	81 f0       	breq	.+32     	; 0x824 <__fixunssfsi+0x46>
 804:	9f d0       	rcall	.+318    	; 0x944 <__fp_zero>
 806:	b1 e0       	ldi	r27, 0x01	; 1
 808:	08 95       	ret
 80a:	9c c0       	rjmp	.+312    	; 0x944 <__fp_zero>
 80c:	67 2f       	mov	r22, r23
 80e:	78 2f       	mov	r23, r24
 810:	88 27       	eor	r24, r24
 812:	b8 5f       	subi	r27, 0xF8	; 248
 814:	39 f0       	breq	.+14     	; 0x824 <__fixunssfsi+0x46>
 816:	b9 3f       	cpi	r27, 0xF9	; 249
 818:	cc f3       	brlt	.-14     	; 0x80c <__fixunssfsi+0x2e>
 81a:	86 95       	lsr	r24
 81c:	77 95       	ror	r23
 81e:	67 95       	ror	r22
 820:	b3 95       	inc	r27
 822:	d9 f7       	brne	.-10     	; 0x81a <__fixunssfsi+0x3c>
 824:	3e f4       	brtc	.+14     	; 0x834 <__fixunssfsi+0x56>
 826:	90 95       	com	r25
 828:	80 95       	com	r24
 82a:	70 95       	com	r23
 82c:	61 95       	neg	r22
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	08 95       	ret

00000836 <__floatunsisf>:
 836:	e8 94       	clt
 838:	09 c0       	rjmp	.+18     	; 0x84c <__floatsisf+0x12>

0000083a <__floatsisf>:
 83a:	97 fb       	bst	r25, 7
 83c:	3e f4       	brtc	.+14     	; 0x84c <__floatsisf+0x12>
 83e:	90 95       	com	r25
 840:	80 95       	com	r24
 842:	70 95       	com	r23
 844:	61 95       	neg	r22
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	99 23       	and	r25, r25
 84e:	a9 f0       	breq	.+42     	; 0x87a <__floatsisf+0x40>
 850:	f9 2f       	mov	r31, r25
 852:	96 e9       	ldi	r25, 0x96	; 150
 854:	bb 27       	eor	r27, r27
 856:	93 95       	inc	r25
 858:	f6 95       	lsr	r31
 85a:	87 95       	ror	r24
 85c:	77 95       	ror	r23
 85e:	67 95       	ror	r22
 860:	b7 95       	ror	r27
 862:	f1 11       	cpse	r31, r1
 864:	f8 cf       	rjmp	.-16     	; 0x856 <__floatsisf+0x1c>
 866:	fa f4       	brpl	.+62     	; 0x8a6 <__floatsisf+0x6c>
 868:	bb 0f       	add	r27, r27
 86a:	11 f4       	brne	.+4      	; 0x870 <__floatsisf+0x36>
 86c:	60 ff       	sbrs	r22, 0
 86e:	1b c0       	rjmp	.+54     	; 0x8a6 <__floatsisf+0x6c>
 870:	6f 5f       	subi	r22, 0xFF	; 255
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <__floatsisf+0x6c>
 87a:	88 23       	and	r24, r24
 87c:	11 f0       	breq	.+4      	; 0x882 <__floatsisf+0x48>
 87e:	96 e9       	ldi	r25, 0x96	; 150
 880:	11 c0       	rjmp	.+34     	; 0x8a4 <__floatsisf+0x6a>
 882:	77 23       	and	r23, r23
 884:	21 f0       	breq	.+8      	; 0x88e <__floatsisf+0x54>
 886:	9e e8       	ldi	r25, 0x8E	; 142
 888:	87 2f       	mov	r24, r23
 88a:	76 2f       	mov	r23, r22
 88c:	05 c0       	rjmp	.+10     	; 0x898 <__floatsisf+0x5e>
 88e:	66 23       	and	r22, r22
 890:	71 f0       	breq	.+28     	; 0x8ae <__floatsisf+0x74>
 892:	96 e8       	ldi	r25, 0x86	; 134
 894:	86 2f       	mov	r24, r22
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	2a f0       	brmi	.+10     	; 0x8a6 <__floatsisf+0x6c>
 89c:	9a 95       	dec	r25
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	da f7       	brpl	.-10     	; 0x89c <__floatsisf+0x62>
 8a6:	88 0f       	add	r24, r24
 8a8:	96 95       	lsr	r25
 8aa:	87 95       	ror	r24
 8ac:	97 f9       	bld	r25, 7
 8ae:	08 95       	ret

000008b0 <__fp_inf>:
 8b0:	97 f9       	bld	r25, 7
 8b2:	9f 67       	ori	r25, 0x7F	; 127
 8b4:	80 e8       	ldi	r24, 0x80	; 128
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	08 95       	ret

000008bc <__fp_nan>:
 8bc:	9f ef       	ldi	r25, 0xFF	; 255
 8be:	80 ec       	ldi	r24, 0xC0	; 192
 8c0:	08 95       	ret

000008c2 <__fp_pscA>:
 8c2:	00 24       	eor	r0, r0
 8c4:	0a 94       	dec	r0
 8c6:	16 16       	cp	r1, r22
 8c8:	17 06       	cpc	r1, r23
 8ca:	18 06       	cpc	r1, r24
 8cc:	09 06       	cpc	r0, r25
 8ce:	08 95       	ret

000008d0 <__fp_pscB>:
 8d0:	00 24       	eor	r0, r0
 8d2:	0a 94       	dec	r0
 8d4:	12 16       	cp	r1, r18
 8d6:	13 06       	cpc	r1, r19
 8d8:	14 06       	cpc	r1, r20
 8da:	05 06       	cpc	r0, r21
 8dc:	08 95       	ret

000008de <__fp_round>:
 8de:	09 2e       	mov	r0, r25
 8e0:	03 94       	inc	r0
 8e2:	00 0c       	add	r0, r0
 8e4:	11 f4       	brne	.+4      	; 0x8ea <__fp_round+0xc>
 8e6:	88 23       	and	r24, r24
 8e8:	52 f0       	brmi	.+20     	; 0x8fe <__fp_round+0x20>
 8ea:	bb 0f       	add	r27, r27
 8ec:	40 f4       	brcc	.+16     	; 0x8fe <__fp_round+0x20>
 8ee:	bf 2b       	or	r27, r31
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__fp_round+0x18>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <__fp_round+0x20>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	08 95       	ret

00000900 <__fp_split3>:
 900:	57 fd       	sbrc	r21, 7
 902:	90 58       	subi	r25, 0x80	; 128
 904:	44 0f       	add	r20, r20
 906:	55 1f       	adc	r21, r21
 908:	59 f0       	breq	.+22     	; 0x920 <__fp_splitA+0x10>
 90a:	5f 3f       	cpi	r21, 0xFF	; 255
 90c:	71 f0       	breq	.+28     	; 0x92a <__fp_splitA+0x1a>
 90e:	47 95       	ror	r20

00000910 <__fp_splitA>:
 910:	88 0f       	add	r24, r24
 912:	97 fb       	bst	r25, 7
 914:	99 1f       	adc	r25, r25
 916:	61 f0       	breq	.+24     	; 0x930 <__fp_splitA+0x20>
 918:	9f 3f       	cpi	r25, 0xFF	; 255
 91a:	79 f0       	breq	.+30     	; 0x93a <__fp_splitA+0x2a>
 91c:	87 95       	ror	r24
 91e:	08 95       	ret
 920:	12 16       	cp	r1, r18
 922:	13 06       	cpc	r1, r19
 924:	14 06       	cpc	r1, r20
 926:	55 1f       	adc	r21, r21
 928:	f2 cf       	rjmp	.-28     	; 0x90e <__fp_split3+0xe>
 92a:	46 95       	lsr	r20
 92c:	f1 df       	rcall	.-30     	; 0x910 <__fp_splitA>
 92e:	08 c0       	rjmp	.+16     	; 0x940 <__fp_splitA+0x30>
 930:	16 16       	cp	r1, r22
 932:	17 06       	cpc	r1, r23
 934:	18 06       	cpc	r1, r24
 936:	99 1f       	adc	r25, r25
 938:	f1 cf       	rjmp	.-30     	; 0x91c <__fp_splitA+0xc>
 93a:	86 95       	lsr	r24
 93c:	71 05       	cpc	r23, r1
 93e:	61 05       	cpc	r22, r1
 940:	08 94       	sec
 942:	08 95       	ret

00000944 <__fp_zero>:
 944:	e8 94       	clt

00000946 <__fp_szero>:
 946:	bb 27       	eor	r27, r27
 948:	66 27       	eor	r22, r22
 94a:	77 27       	eor	r23, r23
 94c:	cb 01       	movw	r24, r22
 94e:	97 f9       	bld	r25, 7
 950:	08 95       	ret

00000952 <__mulsf3>:
 952:	0b d0       	rcall	.+22     	; 0x96a <__mulsf3x>
 954:	c4 cf       	rjmp	.-120    	; 0x8de <__fp_round>
 956:	b5 df       	rcall	.-150    	; 0x8c2 <__fp_pscA>
 958:	28 f0       	brcs	.+10     	; 0x964 <__mulsf3+0x12>
 95a:	ba df       	rcall	.-140    	; 0x8d0 <__fp_pscB>
 95c:	18 f0       	brcs	.+6      	; 0x964 <__mulsf3+0x12>
 95e:	95 23       	and	r25, r21
 960:	09 f0       	breq	.+2      	; 0x964 <__mulsf3+0x12>
 962:	a6 cf       	rjmp	.-180    	; 0x8b0 <__fp_inf>
 964:	ab cf       	rjmp	.-170    	; 0x8bc <__fp_nan>
 966:	11 24       	eor	r1, r1
 968:	ee cf       	rjmp	.-36     	; 0x946 <__fp_szero>

0000096a <__mulsf3x>:
 96a:	ca df       	rcall	.-108    	; 0x900 <__fp_split3>
 96c:	a0 f3       	brcs	.-24     	; 0x956 <__mulsf3+0x4>

0000096e <__mulsf3_pse>:
 96e:	95 9f       	mul	r25, r21
 970:	d1 f3       	breq	.-12     	; 0x966 <__mulsf3+0x14>
 972:	95 0f       	add	r25, r21
 974:	50 e0       	ldi	r21, 0x00	; 0
 976:	55 1f       	adc	r21, r21
 978:	62 9f       	mul	r22, r18
 97a:	f0 01       	movw	r30, r0
 97c:	72 9f       	mul	r23, r18
 97e:	bb 27       	eor	r27, r27
 980:	f0 0d       	add	r31, r0
 982:	b1 1d       	adc	r27, r1
 984:	63 9f       	mul	r22, r19
 986:	aa 27       	eor	r26, r26
 988:	f0 0d       	add	r31, r0
 98a:	b1 1d       	adc	r27, r1
 98c:	aa 1f       	adc	r26, r26
 98e:	64 9f       	mul	r22, r20
 990:	66 27       	eor	r22, r22
 992:	b0 0d       	add	r27, r0
 994:	a1 1d       	adc	r26, r1
 996:	66 1f       	adc	r22, r22
 998:	82 9f       	mul	r24, r18
 99a:	22 27       	eor	r18, r18
 99c:	b0 0d       	add	r27, r0
 99e:	a1 1d       	adc	r26, r1
 9a0:	62 1f       	adc	r22, r18
 9a2:	73 9f       	mul	r23, r19
 9a4:	b0 0d       	add	r27, r0
 9a6:	a1 1d       	adc	r26, r1
 9a8:	62 1f       	adc	r22, r18
 9aa:	83 9f       	mul	r24, r19
 9ac:	a0 0d       	add	r26, r0
 9ae:	61 1d       	adc	r22, r1
 9b0:	22 1f       	adc	r18, r18
 9b2:	74 9f       	mul	r23, r20
 9b4:	33 27       	eor	r19, r19
 9b6:	a0 0d       	add	r26, r0
 9b8:	61 1d       	adc	r22, r1
 9ba:	23 1f       	adc	r18, r19
 9bc:	84 9f       	mul	r24, r20
 9be:	60 0d       	add	r22, r0
 9c0:	21 1d       	adc	r18, r1
 9c2:	82 2f       	mov	r24, r18
 9c4:	76 2f       	mov	r23, r22
 9c6:	6a 2f       	mov	r22, r26
 9c8:	11 24       	eor	r1, r1
 9ca:	9f 57       	subi	r25, 0x7F	; 127
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	8a f0       	brmi	.+34     	; 0x9f2 <__mulsf3_pse+0x84>
 9d0:	e1 f0       	breq	.+56     	; 0xa0a <__mulsf3_pse+0x9c>
 9d2:	88 23       	and	r24, r24
 9d4:	4a f0       	brmi	.+18     	; 0x9e8 <__mulsf3_pse+0x7a>
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	bb 1f       	adc	r27, r27
 9dc:	66 1f       	adc	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	91 50       	subi	r25, 0x01	; 1
 9e4:	50 40       	sbci	r21, 0x00	; 0
 9e6:	a9 f7       	brne	.-22     	; 0x9d2 <__mulsf3_pse+0x64>
 9e8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ea:	51 05       	cpc	r21, r1
 9ec:	70 f0       	brcs	.+28     	; 0xa0a <__mulsf3_pse+0x9c>
 9ee:	60 cf       	rjmp	.-320    	; 0x8b0 <__fp_inf>
 9f0:	aa cf       	rjmp	.-172    	; 0x946 <__fp_szero>
 9f2:	5f 3f       	cpi	r21, 0xFF	; 255
 9f4:	ec f3       	brlt	.-6      	; 0x9f0 <__mulsf3_pse+0x82>
 9f6:	98 3e       	cpi	r25, 0xE8	; 232
 9f8:	dc f3       	brlt	.-10     	; 0x9f0 <__mulsf3_pse+0x82>
 9fa:	86 95       	lsr	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b7 95       	ror	r27
 a02:	f7 95       	ror	r31
 a04:	e7 95       	ror	r30
 a06:	9f 5f       	subi	r25, 0xFF	; 255
 a08:	c1 f7       	brne	.-16     	; 0x9fa <__mulsf3_pse+0x8c>
 a0a:	fe 2b       	or	r31, r30
 a0c:	88 0f       	add	r24, r24
 a0e:	91 1d       	adc	r25, r1
 a10:	96 95       	lsr	r25
 a12:	87 95       	ror	r24
 a14:	97 f9       	bld	r25, 7
 a16:	08 95       	ret

00000a18 <__itoa_ncheck>:
 a18:	bb 27       	eor	r27, r27
 a1a:	4a 30       	cpi	r20, 0x0A	; 10
 a1c:	31 f4       	brne	.+12     	; 0xa2a <__itoa_ncheck+0x12>
 a1e:	99 23       	and	r25, r25
 a20:	22 f4       	brpl	.+8      	; 0xa2a <__itoa_ncheck+0x12>
 a22:	bd e2       	ldi	r27, 0x2D	; 45
 a24:	90 95       	com	r25
 a26:	81 95       	neg	r24
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <__utoa_common>

00000a2c <__utoa_ncheck>:
 a2c:	bb 27       	eor	r27, r27

00000a2e <__utoa_common>:
 a2e:	fb 01       	movw	r30, r22
 a30:	55 27       	eor	r21, r21
 a32:	aa 27       	eor	r26, r26
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	aa 1f       	adc	r26, r26
 a3a:	a4 17       	cp	r26, r20
 a3c:	10 f0       	brcs	.+4      	; 0xa42 <__utoa_common+0x14>
 a3e:	a4 1b       	sub	r26, r20
 a40:	83 95       	inc	r24
 a42:	50 51       	subi	r21, 0x10	; 16
 a44:	b9 f7       	brne	.-18     	; 0xa34 <__utoa_common+0x6>
 a46:	a0 5d       	subi	r26, 0xD0	; 208
 a48:	aa 33       	cpi	r26, 0x3A	; 58
 a4a:	08 f0       	brcs	.+2      	; 0xa4e <__utoa_common+0x20>
 a4c:	a9 5d       	subi	r26, 0xD9	; 217
 a4e:	a1 93       	st	Z+, r26
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	79 f7       	brne	.-34     	; 0xa32 <__utoa_common+0x4>
 a54:	b1 11       	cpse	r27, r1
 a56:	b1 93       	st	Z+, r27
 a58:	11 92       	st	Z+, r1
 a5a:	cb 01       	movw	r24, r22
 a5c:	00 c0       	rjmp	.+0      	; 0xa5e <strrev>

00000a5e <strrev>:
 a5e:	dc 01       	movw	r26, r24
 a60:	fc 01       	movw	r30, r24
 a62:	67 2f       	mov	r22, r23
 a64:	71 91       	ld	r23, Z+
 a66:	77 23       	and	r23, r23
 a68:	e1 f7       	brne	.-8      	; 0xa62 <strrev+0x4>
 a6a:	32 97       	sbiw	r30, 0x02	; 2
 a6c:	04 c0       	rjmp	.+8      	; 0xa76 <strrev+0x18>
 a6e:	7c 91       	ld	r23, X
 a70:	6d 93       	st	X+, r22
 a72:	70 83       	st	Z, r23
 a74:	62 91       	ld	r22, -Z
 a76:	ae 17       	cp	r26, r30
 a78:	bf 07       	cpc	r27, r31
 a7a:	c8 f3       	brcs	.-14     	; 0xa6e <strrev+0x10>
 a7c:	08 95       	ret

00000a7e <_exit>:
 a7e:	f8 94       	cli

00000a80 <__stop_program>:
 a80:	ff cf       	rjmp	.-2      	; 0xa80 <__stop_program>
