
Farm_01062019_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  000012b8  0000134c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800230  00800230  0000137c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c9f  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001054  00000000  00000000  00003133  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b18  00000000  00000000  00004187  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00004ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000725  00000000  00000000  00004e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001052  00000000  00000000  0000554d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000659f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ee c0       	rjmp	.+476    	; 0x1de <__ctors_end>
       2:	00 00       	nop
       4:	0c c1       	rjmp	.+536    	; 0x21e <__bad_interrupt>
       6:	00 00       	nop
       8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
       a:	00 00       	nop
       c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
       e:	00 00       	nop
      10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
      12:	00 00       	nop
      14:	04 c1       	rjmp	.+520    	; 0x21e <__bad_interrupt>
      16:	00 00       	nop
      18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>
      1e:	00 00       	nop
      20:	fe c0       	rjmp	.+508    	; 0x21e <__bad_interrupt>
      22:	00 00       	nop
      24:	fc c0       	rjmp	.+504    	; 0x21e <__bad_interrupt>
      26:	00 00       	nop
      28:	fa c0       	rjmp	.+500    	; 0x21e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c0       	rjmp	.+496    	; 0x21e <__bad_interrupt>
      2e:	00 00       	nop
      30:	f6 c0       	rjmp	.+492    	; 0x21e <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
      36:	00 00       	nop
      38:	f2 c0       	rjmp	.+484    	; 0x21e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f0 c0       	rjmp	.+480    	; 0x21e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ee c0       	rjmp	.+476    	; 0x21e <__bad_interrupt>
      42:	00 00       	nop
      44:	57 c4       	rjmp	.+2222   	; 0x8f4 <__vector_17>
      46:	00 00       	nop
      48:	ea c0       	rjmp	.+468    	; 0x21e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e8 c0       	rjmp	.+464    	; 0x21e <__bad_interrupt>
      4e:	00 00       	nop
      50:	e6 c0       	rjmp	.+460    	; 0x21e <__bad_interrupt>
      52:	00 00       	nop
      54:	e4 c0       	rjmp	.+456    	; 0x21e <__bad_interrupt>
      56:	00 00       	nop
      58:	e2 c0       	rjmp	.+452    	; 0x21e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e0 c0       	rjmp	.+448    	; 0x21e <__bad_interrupt>
      5e:	00 00       	nop
      60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c4       	rjmp	.+2314   	; 0x970 <__vector_25>
      66:	00 00       	nop
      68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
      6e:	00 00       	nop
      70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
      72:	00 00       	nop
      74:	d4 c0       	rjmp	.+424    	; 0x21e <__bad_interrupt>
      76:	00 00       	nop
      78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
      82:	00 00       	nop
      84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
      86:	00 00       	nop
      88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c8 c0       	rjmp	.+400    	; 0x21e <__bad_interrupt>
      8e:	00 00       	nop
      90:	c6 c0       	rjmp	.+396    	; 0x21e <__bad_interrupt>
      92:	00 00       	nop
      94:	c4 c0       	rjmp	.+392    	; 0x21e <__bad_interrupt>
      96:	00 00       	nop
      98:	c2 c0       	rjmp	.+388    	; 0x21e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c0 c0       	rjmp	.+384    	; 0x21e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	be c0       	rjmp	.+380    	; 0x21e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bc c0       	rjmp	.+376    	; 0x21e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ba c0       	rjmp	.+372    	; 0x21e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b8 c0       	rjmp	.+368    	; 0x21e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b6 c0       	rjmp	.+364    	; 0x21e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b4 c0       	rjmp	.+360    	; 0x21e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b2 c0       	rjmp	.+356    	; 0x21e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b0 c0       	rjmp	.+352    	; 0x21e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ae c0       	rjmp	.+348    	; 0x21e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ac c0       	rjmp	.+344    	; 0x21e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	aa c0       	rjmp	.+340    	; 0x21e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a8 c0       	rjmp	.+336    	; 0x21e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a6 c0       	rjmp	.+332    	; 0x21e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a4 c0       	rjmp	.+328    	; 0x21e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a2 c0       	rjmp	.+324    	; 0x21e <__bad_interrupt>
      da:	00 00       	nop
      dc:	a0 c0       	rjmp	.+320    	; 0x21e <__bad_interrupt>
      de:	00 00       	nop
      e0:	9e c0       	rjmp	.+316    	; 0x21e <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	00 40       	sbci	r16, 0x00	; 0
      e6:	7a 10       	cpse	r7, r10
      e8:	f3 5a       	subi	r31, 0xA3	; 163
      ea:	00 a0       	ldd	r0, Z+32	; 0x20
      ec:	72 4e       	sbci	r23, 0xE2	; 226
      ee:	18 09       	sbc	r17, r8
      f0:	00 10       	cpse	r0, r0
      f2:	a5 d4       	rcall	.+2378   	; 0xa3e <__addsf3x+0x84>
      f4:	e8 00       	.word	0x00e8	; ????
      f6:	00 e8       	ldi	r16, 0x80	; 128
      f8:	76 48       	sbci	r23, 0x86	; 134
      fa:	17 00       	.word	0x0017	; ????
      fc:	00 e4       	ldi	r16, 0x40	; 64
      fe:	0b 54       	subi	r16, 0x4B	; 75
     100:	02 00       	.word	0x0002	; ????
     102:	00 ca       	rjmp	.-3072   	; 0xfffff504 <__eeprom_end+0xff7ef504>
     104:	9a 3b       	cpi	r25, 0xBA	; 186
     106:	00 00       	nop
     108:	00 e1       	ldi	r16, 0x10	; 16
     10a:	f5 05       	cpc	r31, r5
     10c:	00 00       	nop
     10e:	80 96       	adiw	r24, 0x20	; 32
     110:	98 00       	.word	0x0098	; ????
     112:	00 00       	nop
     114:	40 42       	sbci	r20, 0x20	; 32
     116:	0f 00       	.word	0x000f	; ????
     118:	00 00       	nop
     11a:	a0 86       	std	Z+8, r10	; 0x08
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	10 27       	eor	r17, r16
     122:	00 00       	nop
     124:	00 00       	nop
     126:	e8 03       	fmulsu	r22, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	64 00       	.word	0x0064	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	0a 00       	.word	0x000a	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	01 00       	.word	0x0001	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	2c 76       	andi	r18, 0x6C	; 108
     140:	d8 88       	ldd	r13, Y+16	; 0x10
     142:	dc 67       	ori	r29, 0x7C	; 124
     144:	4f 08       	sbc	r4, r15
     146:	23 df       	rcall	.-442    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     148:	c1 df       	rcall	.-126    	; 0xcc <__SREG__+0x8d>
     14a:	ae 59       	subi	r26, 0x9E	; 158
     14c:	e1 b1       	in	r30, 0x01	; 1
     14e:	b7 96       	adiw	r30, 0x27	; 39
     150:	e5 e3       	ldi	r30, 0x35	; 53
     152:	e4 53       	subi	r30, 0x34	; 52
     154:	c6 3a       	cpi	r28, 0xA6	; 166
     156:	e6 51       	subi	r30, 0x16	; 22
     158:	99 76       	andi	r25, 0x69	; 105
     15a:	96 e8       	ldi	r25, 0x86	; 134
     15c:	e6 c2       	rjmp	.+1484   	; 0x72a <main+0x13e>
     15e:	84 26       	eor	r8, r20
     160:	eb 89       	ldd	r30, Y+19	; 0x13
     162:	8c 9b       	sbis	0x11, 4	; 17
     164:	62 ed       	ldi	r22, 0xD2	; 210
     166:	40 7c       	andi	r20, 0xC0	; 192
     168:	6f fc       	.word	0xfc6f	; ????
     16a:	ef bc       	out	0x2f, r14	; 47
     16c:	9c 9f       	mul	r25, r28
     16e:	40 f2       	brcs	.-112    	; 0x100 <__trampolines_end+0x1c>
     170:	ba a5       	ldd	r27, Y+42	; 0x2a
     172:	6f a5       	ldd	r22, Y+47	; 0x2f
     174:	f4 90       	lpm	r15, Z
     176:	05 5a       	subi	r16, 0xA5	; 165
     178:	2a f7       	brpl	.-54     	; 0x144 <__trampolines_end+0x60>
     17a:	5c 93       	st	X, r21
     17c:	6b 6c       	ori	r22, 0xCB	; 203
     17e:	f9 67       	ori	r31, 0x79	; 121
     180:	6d c1       	rjmp	.+730    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     182:	1b fc       	.word	0xfc1b	; ????
     184:	e0 e4       	ldi	r30, 0x40	; 64
     186:	0d 47       	sbci	r16, 0x7D	; 125
     188:	fe f5       	brtc	.+126    	; 0x208 <__do_clear_bss>
     18a:	20 e6       	ldi	r18, 0x60	; 96
     18c:	b5 00       	.word	0x00b5	; ????
     18e:	d0 ed       	ldi	r29, 0xD0	; 208
     190:	90 2e       	mov	r9, r16
     192:	03 00       	.word	0x0003	; ????
     194:	94 35       	cpi	r25, 0x54	; 84
     196:	77 05       	cpc	r23, r7
     198:	00 80       	ld	r0, Z
     19a:	84 1e       	adc	r8, r20
     19c:	08 00       	.word	0x0008	; ????
     19e:	00 20       	and	r0, r0
     1a0:	4e 0a       	sbc	r4, r30
     1a2:	00 00       	nop
     1a4:	00 c8       	rjmp	.-4096   	; 0xfffff1a6 <__eeprom_end+0xff7ef1a6>
     1a6:	0c 33       	cpi	r16, 0x3C	; 60
     1a8:	33 33       	cpi	r19, 0x33	; 51
     1aa:	33 0f       	add	r19, r19
     1ac:	98 6e       	ori	r25, 0xE8	; 232
     1ae:	12 83       	std	Z+2, r17	; 0x02
     1b0:	11 41       	sbci	r17, 0x11	; 17
     1b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b4:	21 14       	cp	r2, r1
     1b6:	89 3b       	cpi	r24, 0xB9	; 185
     1b8:	e6 55       	subi	r30, 0x56	; 86
     1ba:	16 cf       	rjmp	.-468    	; 0xffffffe8 <__eeprom_end+0xff7effe8>
     1bc:	fe e6       	ldi	r31, 0x6E	; 110
     1be:	db 18       	sub	r13, r11
     1c0:	d1 84       	ldd	r13, Z+9	; 0x09
     1c2:	4b 38       	cpi	r20, 0x8B	; 139
     1c4:	1b f7       	brvc	.-58     	; 0x18c <__trampolines_end+0xa8>
     1c6:	7c 1d       	adc	r23, r12
     1c8:	90 1d       	adc	r25, r0
     1ca:	a4 bb       	out	0x14, r26	; 20
     1cc:	e4 24       	eor	r14, r4
     1ce:	20 32       	cpi	r18, 0x20	; 32
     1d0:	84 72       	andi	r24, 0x24	; 36
     1d2:	5e 22       	and	r5, r30
     1d4:	81 00       	.word	0x0081	; ????
     1d6:	c9 f1       	breq	.+114    	; 0x24a <dht_getdata_dht_11+0x2a>
     1d8:	24 ec       	ldi	r18, 0xC4	; 196
     1da:	a1 e5       	ldi	r26, 0x51	; 81
     1dc:	3d 27       	eor	r19, r29

000001de <__ctors_end>:
     1de:	11 24       	eor	r1, r1
     1e0:	1f be       	out	0x3f, r1	; 63
     1e2:	cf ef       	ldi	r28, 0xFF	; 255
     1e4:	d1 e2       	ldi	r29, 0x21	; 33
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	0c bf       	out	0x3c, r16	; 60

000001ee <__do_copy_data>:
     1ee:	12 e0       	ldi	r17, 0x02	; 2
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b2 e0       	ldi	r27, 0x02	; 2
     1f4:	e8 eb       	ldi	r30, 0xB8	; 184
     1f6:	f2 e1       	ldi	r31, 0x12	; 18
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	0b bf       	out	0x3b, r16	; 59
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x14>
     1fe:	07 90       	elpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a0 33       	cpi	r26, 0x30	; 48
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0x10>

00000208 <__do_clear_bss>:
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	a0 e3       	ldi	r26, 0x30	; 48
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a4 33       	cpi	r26, 0x34	; 52
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	e9 d1       	rcall	.+978    	; 0x5ec <main>
     21a:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <_exit>

0000021e <__bad_interrupt>:
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <dht_getdata_dht_11>:

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     220:	bf 92       	push	r11
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	00 d0       	rcall	.+0      	; 0x234 <dht_getdata_dht_11+0x14>
     234:	1f 92       	push	r1
     236:	1f 92       	push	r1
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     23c:	fe 01       	movw	r30, r28
     23e:	31 96       	adiw	r30, 0x01	; 1
     240:	25 e0       	ldi	r18, 0x05	; 5
     242:	df 01       	movw	r26, r30
     244:	1d 92       	st	X+, r1
     246:	2a 95       	dec	r18
     248:	e9 f7       	brne	.-6      	; 0x244 <dht_getdata_dht_11+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
     24a:	21 b1       	in	r18, 0x01	; 1
     24c:	e1 e0       	ldi	r30, 0x01	; 1
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	04 2e       	mov	r0, r20
     252:	02 c0       	rjmp	.+4      	; 0x258 <dht_getdata_dht_11+0x38>
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <dht_getdata_dht_11+0x34>
     25c:	2e 2b       	or	r18, r30
     25e:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //high
     260:	22 b1       	in	r18, 0x02	; 2
     262:	2e 2b       	or	r18, r30
     264:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     266:	bf ef       	ldi	r27, 0xFF	; 255
     268:	21 ee       	ldi	r18, 0xE1	; 225
     26a:	34 e0       	ldi	r19, 0x04	; 4
     26c:	b1 50       	subi	r27, 0x01	; 1
     26e:	20 40       	sbci	r18, 0x00	; 0
     270:	30 40       	sbci	r19, 0x00	; 0
     272:	e1 f7       	brne	.-8      	; 0x26c <dht_getdata_dht_11+0x4c>
     274:	00 c0       	rjmp	.+0      	; 0x276 <dht_getdata_dht_11+0x56>
     276:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
     278:	32 b1       	in	r19, 0x02	; 2
     27a:	2e 2f       	mov	r18, r30
     27c:	20 95       	com	r18
     27e:	32 23       	and	r19, r18
     280:	32 b9       	out	0x02, r19	; 2
     282:	5f ef       	ldi	r21, 0xFF	; 255
     284:	a0 ee       	ldi	r26, 0xE0	; 224
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	51 50       	subi	r21, 0x01	; 1
     28a:	a0 40       	sbci	r26, 0x00	; 0
     28c:	b0 40       	sbci	r27, 0x00	; 0
     28e:	e1 f7       	brne	.-8      	; 0x288 <dht_getdata_dht_11+0x68>
     290:	00 c0       	rjmp	.+0      	; 0x292 <dht_getdata_dht_11+0x72>
     292:	00 00       	nop
	
		_delay_ms(18);
	
	
	
	DHT_PORT |= (1<<channel); //high
     294:	32 b1       	in	r19, 0x02	; 2
     296:	3e 2b       	or	r19, r30
     298:	32 b9       	out	0x02, r19	; 2
	DHT_DDR &= ~(1<<channel); //input
     29a:	31 b1       	in	r19, 0x01	; 1
     29c:	23 23       	and	r18, r19
     29e:	21 b9       	out	0x01, r18	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	25 ed       	ldi	r18, 0xD5	; 213
     2a2:	2a 95       	dec	r18
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <dht_getdata_dht_11+0x82>
     2a6:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
     2a8:	20 b1       	in	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	04 2e       	mov	r0, r20
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <dht_getdata_dht_11+0x94>
     2b0:	35 95       	asr	r19
     2b2:	27 95       	ror	r18
     2b4:	0a 94       	dec	r0
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <dht_getdata_dht_11+0x90>
     2b8:	20 fd       	sbrc	r18, 0
     2ba:	74 c0       	rjmp	.+232    	; 0x3a4 <dht_getdata_dht_11+0x184>
     2bc:	af e3       	ldi	r26, 0x3F	; 63
     2be:	b1 e0       	ldi	r27, 0x01	; 1
     2c0:	11 97       	sbiw	r26, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <dht_getdata_dht_11+0xa0>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <dht_getdata_dht_11+0xa6>
     2c6:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
     2c8:	20 b1       	in	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <dht_getdata_dht_11+0xb2>
     2ce:	35 95       	asr	r19
     2d0:	27 95       	ror	r18
     2d2:	4a 95       	dec	r20
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <dht_getdata_dht_11+0xae>
     2d6:	20 ff       	sbrs	r18, 0
     2d8:	67 c0       	rjmp	.+206    	; 0x3a8 <dht_getdata_dht_11+0x188>
     2da:	af e3       	ldi	r26, 0x3F	; 63
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	11 97       	sbiw	r26, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <dht_getdata_dht_11+0xbe>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <dht_getdata_dht_11+0xc4>
     2e4:	00 00       	nop
     2e6:	9e 01       	movw	r18, r28
     2e8:	2f 5f       	subi	r18, 0xFF	; 255
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	79 01       	movw	r14, r18
     2ee:	6e 01       	movw	r12, r28
     2f0:	36 e0       	ldi	r19, 0x06	; 6
     2f2:	c3 0e       	add	r12, r19
     2f4:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
     2f6:	01 e0       	ldi	r16, 0x01	; 1
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	31 c0       	rjmp	.+98     	; 0x35e <dht_getdata_dht_11+0x13e>
     2fc:	41 50       	subi	r20, 0x01	; 1
     2fe:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     300:	19 f4       	brne	.+6      	; 0x308 <dht_getdata_dht_11+0xe8>
     302:	54 c0       	rjmp	.+168    	; 0x3ac <dht_getdata_dht_11+0x18c>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     304:	49 ec       	ldi	r20, 0xC9	; 201
     306:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
     308:	20 b1       	in	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	2e 23       	and	r18, r30
     30e:	3f 23       	and	r19, r31
     310:	23 2b       	or	r18, r19
     312:	a1 f3       	breq	.-24     	; 0x2fc <dht_getdata_dht_11+0xdc>
     314:	40 ea       	ldi	r20, 0xA0	; 160
     316:	4a 95       	dec	r20
     318:	f1 f7       	brne	.-4      	; 0x316 <dht_getdata_dht_11+0xf6>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
     31a:	20 b1       	in	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	2e 23       	and	r18, r30
     320:	3f 23       	and	r19, r31
     322:	23 2b       	or	r18, r19
     324:	41 f0       	breq	.+16     	; 0x336 <dht_getdata_dht_11+0x116>
				result |= (1<<(7-i));
     326:	98 01       	movw	r18, r16
     328:	0a 2e       	mov	r0, r26
     32a:	02 c0       	rjmp	.+4      	; 0x330 <dht_getdata_dht_11+0x110>
     32c:	22 0f       	add	r18, r18
     32e:	33 1f       	adc	r19, r19
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <dht_getdata_dht_11+0x10c>
     334:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     336:	49 ec       	ldi	r20, 0xC9	; 201
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	03 c0       	rjmp	.+6      	; 0x342 <dht_getdata_dht_11+0x122>
     33c:	41 50       	subi	r20, 0x01	; 1
     33e:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     340:	b9 f1       	breq	.+110    	; 0x3b0 <dht_getdata_dht_11+0x190>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     342:	20 b1       	in	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	2e 23       	and	r18, r30
     348:	3f 23       	and	r19, r31
     34a:	23 2b       	or	r18, r19
     34c:	b9 f7       	brne	.-18     	; 0x33c <dht_getdata_dht_11+0x11c>
     34e:	11 97       	sbiw	r26, 0x01	; 1
     350:	c8 f6       	brcc	.-78     	; 0x304 <dht_getdata_dht_11+0xe4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     352:	d7 01       	movw	r26, r14
     354:	bd 92       	st	X+, r11
     356:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     358:	ca 16       	cp	r12, r26
     35a:	db 06       	cpc	r13, r27
     35c:	21 f0       	breq	.+8      	; 0x366 <dht_getdata_dht_11+0x146>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     35e:	a7 e0       	ldi	r26, 0x07	; 7
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	b1 2c       	mov	r11, r1
     364:	cf cf       	rjmp	.-98     	; 0x304 <dht_getdata_dht_11+0xe4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
     366:	21 b1       	in	r18, 0x01	; 1
     368:	2e 2b       	or	r18, r30
     36a:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //low
     36c:	22 b1       	in	r18, 0x02	; 2
     36e:	e2 2b       	or	r30, r18
     370:	e2 b9       	out	0x02, r30	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     372:	bf ef       	ldi	r27, 0xFF	; 255
     374:	e1 ee       	ldi	r30, 0xE1	; 225
     376:	f4 e0       	ldi	r31, 0x04	; 4
     378:	b1 50       	subi	r27, 0x01	; 1
     37a:	e0 40       	sbci	r30, 0x00	; 0
     37c:	f0 40       	sbci	r31, 0x00	; 0
     37e:	e1 f7       	brne	.-8      	; 0x378 <dht_getdata_dht_11+0x158>
     380:	00 c0       	rjmp	.+0      	; 0x382 <dht_getdata_dht_11+0x162>
     382:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     384:	49 81       	ldd	r20, Y+1	; 0x01
     386:	5b 81       	ldd	r21, Y+3	; 0x03
     388:	2a 81       	ldd	r18, Y+2	; 0x02
     38a:	24 0f       	add	r18, r20
     38c:	25 0f       	add	r18, r21
     38e:	3c 81       	ldd	r19, Y+4	; 0x04
     390:	23 0f       	add	r18, r19
     392:	3d 81       	ldd	r19, Y+5	; 0x05
     394:	23 13       	cpse	r18, r19
     396:	0e c0       	rjmp	.+28     	; 0x3b4 <dht_getdata_dht_11+0x194>
		//return temperature and humidity
		
			*temperature = bits[2];
     398:	dc 01       	movw	r26, r24
     39a:	5c 93       	st	X, r21
			*humidity = bits[0];
     39c:	fb 01       	movw	r30, r22
     39e:	40 83       	st	Z, r20
		



		
		return 0;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <dht_getdata_dht_11+0x196>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <dht_getdata_dht_11+0x196>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <dht_getdata_dht_11+0x196>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <dht_getdata_dht_11+0x196>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <dht_getdata_dht_11+0x196>

		
		return 0;
	}

	return -1;
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	df 90       	pop	r13
     3ce:	cf 90       	pop	r12
     3d0:	bf 90       	pop	r11
     3d2:	08 95       	ret

000003d4 <dht_getdata_dht_22>:


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     3d4:	bf 92       	push	r11
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <dht_getdata_dht_22+0x14>
     3e8:	1f 92       	push	r1
     3ea:	1f 92       	push	r1
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     3f0:	fe 01       	movw	r30, r28
     3f2:	31 96       	adiw	r30, 0x01	; 1
     3f4:	25 e0       	ldi	r18, 0x05	; 5
     3f6:	df 01       	movw	r26, r30
     3f8:	1d 92       	st	X+, r1
     3fa:	2a 95       	dec	r18
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <dht_getdata_dht_22+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
     3fe:	21 b1       	in	r18, 0x01	; 1
     400:	e1 e0       	ldi	r30, 0x01	; 1
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	04 2e       	mov	r0, r20
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	2e 2b       	or	r18, r30
     412:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //high
     414:	22 b1       	in	r18, 0x02	; 2
     416:	2e 2b       	or	r18, r30
     418:	22 b9       	out	0x02, r18	; 2
     41a:	bf ef       	ldi	r27, 0xFF	; 255
     41c:	21 ee       	ldi	r18, 0xE1	; 225
     41e:	34 e0       	ldi	r19, 0x04	; 4
     420:	b1 50       	subi	r27, 0x01	; 1
     422:	20 40       	sbci	r18, 0x00	; 0
     424:	30 40       	sbci	r19, 0x00	; 0
     426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
     42c:	32 b1       	in	r19, 0x02	; 2
     42e:	2e 2f       	mov	r18, r30
     430:	20 95       	com	r18
     432:	32 23       	and	r19, r18
     434:	32 b9       	out	0x02, r19	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     436:	af ec       	ldi	r26, 0xCF	; 207
     438:	b7 e0       	ldi	r27, 0x07	; 7
     43a:	11 97       	sbiw	r26, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     440:	00 00       	nop

		_delay_us(500);
	
	
	
	DHT_PORT |= (1<<channel); //high
     442:	32 b1       	in	r19, 0x02	; 2
     444:	3e 2b       	or	r19, r30
     446:	32 b9       	out	0x02, r19	; 2
	DHT_DDR &= ~(1<<channel); //input
     448:	31 b1       	in	r19, 0x01	; 1
     44a:	23 23       	and	r18, r19
     44c:	21 b9       	out	0x01, r18	; 1
     44e:	b5 ed       	ldi	r27, 0xD5	; 213
     450:	ba 95       	dec	r27
     452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     454:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
     456:	20 b1       	in	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	04 2e       	mov	r0, r20
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	35 95       	asr	r19
     460:	27 95       	ror	r18
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	20 fd       	sbrc	r18, 0
     468:	a9 c0       	rjmp	.+338    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     46a:	af e3       	ldi	r26, 0x3F	; 63
     46c:	b1 e0       	ldi	r27, 0x01	; 1
     46e:	11 97       	sbiw	r26, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     474:	00 00       	nop
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
     476:	20 b1       	in	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47c:	35 95       	asr	r19
     47e:	27 95       	ror	r18
     480:	4a 95       	dec	r20
     482:	e2 f7       	brpl	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     484:	20 ff       	sbrs	r18, 0
     486:	9c c0       	rjmp	.+312    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     488:	af e3       	ldi	r26, 0x3F	; 63
     48a:	b1 e0       	ldi	r27, 0x01	; 1
     48c:	11 97       	sbiw	r26, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     492:	00 00       	nop
     494:	9e 01       	movw	r18, r28
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	79 01       	movw	r14, r18
     49c:	6e 01       	movw	r12, r28
     49e:	36 e0       	ldi	r19, 0x06	; 6
     4a0:	c3 0e       	add	r12, r19
     4a2:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
     4a4:	01 e0       	ldi	r16, 0x01	; 1
     4a6:	10 e0       	ldi	r17, 0x00	; 0
     4a8:	32 c0       	rjmp	.+100    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     4aa:	41 50       	subi	r20, 0x01	; 1
     4ac:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     4ae:	19 f4       	brne	.+6      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b0:	89 c0       	rjmp	.+274    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>

	return -1;
}


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     4b2:	49 ec       	ldi	r20, 0xC9	; 201
     4b4:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
     4b6:	20 b1       	in	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	2e 23       	and	r18, r30
     4bc:	3f 23       	and	r19, r31
     4be:	23 2b       	or	r18, r19
     4c0:	a1 f3       	breq	.-24     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4c2:	40 ea       	ldi	r20, 0xA0	; 160
     4c4:	4a 95       	dec	r20
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
     4c8:	20 b1       	in	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	2e 23       	and	r18, r30
     4ce:	3f 23       	and	r19, r31
     4d0:	23 2b       	or	r18, r19
     4d2:	41 f0       	breq	.+16     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			result |= (1<<(7-i));
     4d4:	98 01       	movw	r18, r16
     4d6:	0a 2e       	mov	r0, r26
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	0a 94       	dec	r0
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4e2:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     4e4:	49 ec       	ldi	r20, 0xC9	; 201
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4ea:	41 50       	subi	r20, 0x01	; 1
     4ec:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4f0:	6b c0       	rjmp	.+214    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     4f2:	20 b1       	in	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	2e 23       	and	r18, r30
     4f8:	3f 23       	and	r19, r31
     4fa:	23 2b       	or	r18, r19
     4fc:	b1 f7       	brne	.-20     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4fe:	11 97       	sbiw	r26, 0x01	; 1
     500:	c0 f6       	brcc	.-80     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     502:	d7 01       	movw	r26, r14
     504:	bd 92       	st	X+, r11
     506:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     508:	ca 16       	cp	r12, r26
     50a:	db 06       	cpc	r13, r27
     50c:	21 f0       	breq	.+8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>

	return -1;
}


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     50e:	a7 e0       	ldi	r26, 0x07	; 7
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	b1 2c       	mov	r11, r1
     514:	ce cf       	rjmp	.-100    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
     516:	21 b1       	in	r18, 0x01	; 1
     518:	2e 2b       	or	r18, r30
     51a:	21 b9       	out	0x01, r18	; 1
	DHT_PORT |= (1<<channel); //low
     51c:	22 b1       	in	r18, 0x02	; 2
     51e:	e2 2b       	or	r30, r18
     520:	e2 b9       	out	0x02, r30	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	bf ef       	ldi	r27, 0xFF	; 255
     524:	e1 ee       	ldi	r30, 0xE1	; 225
     526:	f4 e0       	ldi	r31, 0x04	; 4
     528:	b1 50       	subi	r27, 0x01	; 1
     52a:	e0 40       	sbci	r30, 0x00	; 0
     52c:	f0 40       	sbci	r31, 0x00	; 0
     52e:	e1 f7       	brne	.-8      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     530:	00 c0       	rjmp	.+0      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     532:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     534:	59 81       	ldd	r21, Y+1	; 0x01
     536:	0a 81       	ldd	r16, Y+2	; 0x02
     538:	4b 81       	ldd	r20, Y+3	; 0x03
     53a:	2c 81       	ldd	r18, Y+4	; 0x04
     53c:	35 2f       	mov	r19, r21
     53e:	30 0f       	add	r19, r16
     540:	34 0f       	add	r19, r20
     542:	32 0f       	add	r19, r18
     544:	ed 81       	ldd	r30, Y+5	; 0x05
     546:	3e 13       	cpse	r19, r30
     548:	41 c0       	rjmp	.+130    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     54a:	7b 01       	movw	r14, r22
     54c:	6c 01       	movw	r12, r24



			uint16_t rawhumidity = bits[0]<<8 | bits[1];
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	15 2b       	or	r17, r21
			uint16_t rawtemperature = bits[2]<<8 | bits[3];
     552:	62 2f       	mov	r22, r18
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	74 2b       	or	r23, r20
			if(rawtemperature & 0x8000) {
     558:	77 23       	and	r23, r23
     55a:	94 f4       	brge	.+36     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
				*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
     55c:	7f 77       	andi	r23, 0x7F	; 127
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	17 d3       	rcall	.+1582   	; 0xb92 <__floatunsisf>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	79 d2       	rcall	.+1266   	; 0xa60 <__divsf3>
     56e:	dc 01       	movw	r26, r24
     570:	cb 01       	movw	r24, r22
     572:	b0 58       	subi	r27, 0x80	; 128
     574:	f6 01       	movw	r30, r12
     576:	80 83       	st	Z, r24
     578:	91 83       	std	Z+1, r25	; 0x01
     57a:	a2 83       	std	Z+2, r26	; 0x02
     57c:	b3 83       	std	Z+3, r27	; 0x03
     57e:	0e c0       	rjmp	.+28     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
				} else {
				*temperature = (float)(rawtemperature)/10.0;
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	06 d3       	rcall	.+1548   	; 0xb92 <__floatunsisf>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e2       	ldi	r20, 0x20	; 32
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	68 d2       	rcall	.+1232   	; 0xa60 <__divsf3>
     590:	d6 01       	movw	r26, r12
     592:	6d 93       	st	X+, r22
     594:	7d 93       	st	X+, r23
     596:	8d 93       	st	X+, r24
     598:	9c 93       	st	X, r25
     59a:	13 97       	sbiw	r26, 0x03	; 3
			}
			*humidity = (float)(rawhumidity)/10.0;
     59c:	b8 01       	movw	r22, r16
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	f7 d2       	rcall	.+1518   	; 0xb92 <__floatunsisf>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e2       	ldi	r20, 0x20	; 32
     5aa:	51 e4       	ldi	r21, 0x41	; 65
     5ac:	59 d2       	rcall	.+1202   	; 0xa60 <__divsf3>
     5ae:	f7 01       	movw	r30, r14
     5b0:	60 83       	st	Z, r22
     5b2:	71 83       	std	Z+1, r23	; 0x01
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	93 83       	std	Z+3, r25	; 0x03
     5b8:	80 e0       	ldi	r24, 0x00	; 0
		

		
		return 0;
     5ba:	09 c0       	rjmp	.+18     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
     5be:	07 c0       	rjmp	.+14     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5cc:	8f ef       	ldi	r24, 0xFF	; 255

		
		return 0;
	}

	return -1;
     5ce:	0f 90       	pop	r0
}
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	08 95       	ret

000005ec <main>:
     5ec:	cf 93       	push	r28
volatile unsigned char gUartRFlag=0;
volatile unsigned char gUartData=0;
extern volatile unsigned char oneSec;
uint8_t manualflag = 0;
int main(void)
{
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	af 97       	sbiw	r28, 0x2f	; 47
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
	DDRB_CONFIG;
     600:	8f e1       	ldi	r24, 0x1F	; 31
     602:	84 b9       	out	0x04, r24	; 4
	PORTB_COMFIG;
     604:	15 b8       	out	0x05, r1	; 5
	DDRC_CONFIG;
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	87 b9       	out	0x07, r24	; 7
	PORTC_COMFIG;
     60a:	18 b8       	out	0x08, r1	; 8
	timer1_init();
     60c:	62 d1       	rcall	.+708    	; 0x8d2 <timer1_init>
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
	
	
     UART_int();
     60e:	83 d1       	rcall	.+774    	; 0x916 <UART_int>
     610:	8f e1       	ldi	r24, 0x1F	; 31
     612:	9e e4       	ldi	r25, 0x4E	; 78
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <main+0x28>
     618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x2e>
     61a:	00 00       	nop
     61c:	19 82       	std	Y+1, r1	; 0x01
	_delay_ms(5);
	

		float ftemperature = 0;
     61e:	1a 82       	std	Y+2, r1	; 0x02
     620:	1b 82       	std	Y+3, r1	; 0x03
     622:	1c 82       	std	Y+4, r1	; 0x04
     624:	1d 82       	std	Y+5, r1	; 0x05
		float fhumidity = 0;
     626:	1e 82       	std	Y+6, r1	; 0x06
     628:	1f 82       	std	Y+7, r1	; 0x07
     62a:	18 86       	std	Y+8, r1	; 0x08
     62c:	19 86       	std	Y+9, r1	; 0x09
		int8_t temperature = 0;
     62e:	1a 86       	std	Y+10, r1	; 0x0a
		int8_t humidity = 0;
     630:	88 e0       	ldi	r24, 0x08	; 8
		
	unsigned char tempString[] = {'T','e','m','p',' ','=',' ','\0'};
     632:	e0 e0       	ldi	r30, 0x00	; 0
     634:	f2 e0       	ldi	r31, 0x02	; 2
     636:	de 01       	movw	r26, r28
     638:	1b 96       	adiw	r26, 0x0b	; 11
     63a:	01 90       	ld	r0, Z+
     63c:	0d 92       	st	X+, r0
     63e:	8a 95       	dec	r24
     640:	e1 f7       	brne	.-8      	; 0x63a <main+0x4e>
     642:	88 e0       	ldi	r24, 0x08	; 8
	unsigned char humString[] = {'H','u','m','d',' ','=',' ','\0'};
     644:	e8 e0       	ldi	r30, 0x08	; 8
     646:	f2 e0       	ldi	r31, 0x02	; 2
     648:	de 01       	movw	r26, r28
     64a:	53 96       	adiw	r26, 0x13	; 19
     64c:	01 90       	ld	r0, Z+
     64e:	0d 92       	st	X+, r0
     650:	8a 95       	dec	r24
     652:	e1 f7       	brne	.-8      	; 0x64c <main+0x60>
     654:	89 e0       	ldi	r24, 0x09	; 9
	unsigned char sensor0[] = {'S','e','n','s','o','r','1',' ','\0'};
     656:	e0 e1       	ldi	r30, 0x10	; 16
     658:	f2 e0       	ldi	r31, 0x02	; 2
     65a:	de 01       	movw	r26, r28
     65c:	5b 96       	adiw	r26, 0x1b	; 27
     65e:	01 90       	ld	r0, Z+
     660:	0d 92       	st	X+, r0
     662:	8a 95       	dec	r24
     664:	e1 f7       	brne	.-8      	; 0x65e <main+0x72>
     666:	89 e0       	ldi	r24, 0x09	; 9
	unsigned char sensor1[] = {'S','e','n','s','o','r','2',' ','\0'};			
     668:	e9 e1       	ldi	r30, 0x19	; 25
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	de 01       	movw	r26, r28
     66e:	94 96       	adiw	r26, 0x24	; 36
     670:	01 90       	ld	r0, Z+
     672:	0d 92       	st	X+, r0
     674:	8a 95       	dec	r24
     676:	e1 f7       	brne	.-8      	; 0x670 <main+0x84>
     678:	f8 94       	cli
	unsigned char buffer[3]; //used in itoa 

	//sei();
	cli();
     67a:	15 b8       	out	0x05, r1	; 5
	PORTB = 0u;
     67c:	9f ef       	ldi	r25, 0xFF	; 255
     67e:	23 ed       	ldi	r18, 0xD3	; 211
     680:	80 e3       	ldi	r24, 0x30	; 48
     682:	91 50       	subi	r25, 0x01	; 1
     684:	20 40       	sbci	r18, 0x00	; 0
     686:	80 40       	sbci	r24, 0x00	; 0
     688:	e1 f7       	brne	.-8      	; 0x682 <main+0x96>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <main+0xa0>
     68c:	00 00       	nop
     68e:	9f ef       	ldi	r25, 0xFF	; 255
     690:	23 ed       	ldi	r18, 0xD3	; 211
     692:	80 e3       	ldi	r24, 0x30	; 48
     694:	91 50       	subi	r25, 0x01	; 1
     696:	20 40       	sbci	r18, 0x00	; 0
     698:	80 40       	sbci	r24, 0x00	; 0
     69a:	e1 f7       	brne	.-8      	; 0x694 <main+0xa8>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <main+0xb2>
     69e:	00 00       	nop
     6a0:	9f ef       	ldi	r25, 0xFF	; 255
     6a2:	23 ed       	ldi	r18, 0xD3	; 211
     6a4:	80 e3       	ldi	r24, 0x30	; 48
     6a6:	91 50       	subi	r25, 0x01	; 1
     6a8:	20 40       	sbci	r18, 0x00	; 0
     6aa:	80 40       	sbci	r24, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0xba>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0xc4>
     6b0:	00 00       	nop
     6b2:	9f ef       	ldi	r25, 0xFF	; 255
     6b4:	23 ed       	ldi	r18, 0xD3	; 211
     6b6:	80 e3       	ldi	r24, 0x30	; 48
     6b8:	91 50       	subi	r25, 0x01	; 1
     6ba:	20 40       	sbci	r18, 0x00	; 0
     6bc:	80 40       	sbci	r24, 0x00	; 0
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <main+0xcc>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <main+0xd6>
     6c2:	00 00       	nop
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
     6c6:	23 ed       	ldi	r18, 0xD3	; 211
     6c8:	80 e3       	ldi	r24, 0x30	; 48
     6ca:	91 50       	subi	r25, 0x01	; 1
     6cc:	20 40       	sbci	r18, 0x00	; 0
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <main+0xde>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <main+0xe8>
     6d4:	00 00       	nop
     6d6:	e0 90 33 02 	lds	r14, 0x0233	; 0x800233 <oneSec>
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	_delay_ms(1000);
	oldTime = oneSec;
     6da:	78 94       	sei
	sei();
     6dc:	f1 2c       	mov	r15, r1
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	unsigned char sec_3 = 0u;
     6de:	10 e0       	ldi	r17, 0x00	; 0
	PORTB_COMFIG;
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
     6e0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <oneSec>
	oldTime = oneSec;
	sei();
	while(1){
			
		
		if(oneSec != oldTime)
     6e4:	e8 16       	cp	r14, r24
     6e6:	09 f4       	brne	.+2      	; 0x6ea <main+0xfe>
     6e8:	9e c0       	rjmp	.+316    	; 0x826 <main+0x23a>
     6ea:	e0 90 33 02 	lds	r14, 0x0233	; 0x800233 <oneSec>
		{
			oldTime = oneSec;
     6ee:	15 30       	cpi	r17, 0x05	; 5
			
			if(five_sec == 5u)
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <main+0x108>
     6f2:	4f c0       	rjmp	.+158    	; 0x792 <main+0x1a6>
     6f4:	f8 94       	cli
			{		
					cli();
     6f6:	40 e0       	ldi	r20, 0x00	; 0
					dht_getdata_dht_22(&ftemperature,&fhumidity,0);
     6f8:	be 01       	movw	r22, r28
     6fa:	6b 5f       	subi	r22, 0xFB	; 251
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	68 de       	rcall	.-816    	; 0x3d4 <dht_getdata_dht_22>
     704:	69 81       	ldd	r22, Y+1	; 0x01
					dtostrf(ftemperature, 3, 3, buffer);
     706:	7a 81       	ldd	r23, Y+2	; 0x02
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	8e 01       	movw	r16, r28
     70e:	03 5d       	subi	r16, 0xD3	; 211
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	23 e0       	ldi	r18, 0x03	; 3
     714:	43 e0       	ldi	r20, 0x03	; 3
     716:	2e d3       	rcall	.+1628   	; 0xd74 <dtostrf>
					UART_string_tx(sensor0);
     718:	ce 01       	movw	r24, r28
     71a:	4b 96       	adiw	r24, 0x1b	; 27
     71c:	14 d1       	rcall	.+552    	; 0x946 <UART_string_tx>
					UART_string_tx(tempString);
     71e:	ce 01       	movw	r24, r28
     720:	0b 96       	adiw	r24, 0x0b	; 11
     722:	11 d1       	rcall	.+546    	; 0x946 <UART_string_tx>
     724:	c8 01       	movw	r24, r16
					UART_string_tx(buffer);
     726:	0f d1       	rcall	.+542    	; 0x946 <UART_string_tx>
     728:	6d 81       	ldd	r22, Y+5	; 0x05
					dtostrf(fhumidity, 3, 3, buffer);
     72a:	7e 81       	ldd	r23, Y+6	; 0x06
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
     72e:	98 85       	ldd	r25, Y+8	; 0x08
     730:	23 e0       	ldi	r18, 0x03	; 3
     732:	43 e0       	ldi	r20, 0x03	; 3
     734:	1f d3       	rcall	.+1598   	; 0xd74 <dtostrf>
					UART_string_tx(humString);
     736:	ce 01       	movw	r24, r28
     738:	43 96       	adiw	r24, 0x13	; 19
     73a:	05 d1       	rcall	.+522    	; 0x946 <UART_string_tx>
     73c:	c8 01       	movw	r24, r16
					UART_string_tx(buffer);
     73e:	03 d1       	rcall	.+518    	; 0x946 <UART_string_tx>
     740:	8a e0       	ldi	r24, 0x0A	; 10
					UART_tx('\n');
     742:	f9 d0       	rcall	.+498    	; 0x936 <UART_tx>
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	be 01       	movw	r22, r28
					
					dht_getdata_dht_11(&temperature,&humidity,1);
     748:	66 5f       	subi	r22, 0xF6	; 246
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	ce 01       	movw	r24, r28
     74e:	09 96       	adiw	r24, 0x09	; 9
     750:	67 dd       	rcall	.-1330   	; 0x220 <dht_getdata_dht_11>
     752:	89 85       	ldd	r24, Y+9	; 0x09
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     754:	4a e0       	ldi	r20, 0x0A	; 10
     756:	b8 01       	movw	r22, r16
     758:	08 2e       	mov	r0, r24
     75a:	00 0c       	add	r0, r0
     75c:	99 0b       	sbc	r25, r25
     75e:	29 d3       	rcall	.+1618   	; 0xdb2 <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_string_tx(sensor1);
     760:	ce 01       	movw	r24, r28
     762:	84 96       	adiw	r24, 0x24	; 36
     764:	f0 d0       	rcall	.+480    	; 0x946 <UART_string_tx>
					UART_string_tx(tempString);
     766:	ce 01       	movw	r24, r28
     768:	0b 96       	adiw	r24, 0x0b	; 11
					UART_string_tx(buffer);
     76a:	ed d0       	rcall	.+474    	; 0x946 <UART_string_tx>
     76c:	c8 01       	movw	r24, r16
     76e:	eb d0       	rcall	.+470    	; 0x946 <UART_string_tx>
     770:	8a 85       	ldd	r24, Y+10	; 0x0a
     772:	4a e0       	ldi	r20, 0x0A	; 10
     774:	b8 01       	movw	r22, r16
     776:	08 2e       	mov	r0, r24
     778:	00 0c       	add	r0, r0
     77a:	99 0b       	sbc	r25, r25
     77c:	1a d3       	rcall	.+1588   	; 0xdb2 <__itoa_ncheck>
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
     77e:	ce 01       	movw	r24, r28
     780:	43 96       	adiw	r24, 0x13	; 19
     782:	e1 d0       	rcall	.+450    	; 0x946 <UART_string_tx>
     784:	c8 01       	movw	r24, r16
					UART_string_tx(buffer);
     786:	df d0       	rcall	.+446    	; 0x946 <UART_string_tx>
     788:	8a e0       	ldi	r24, 0x0A	; 10
					UART_tx('\n');
     78a:	d5 d0       	rcall	.+426    	; 0x936 <UART_tx>
     78c:	78 94       	sei
     78e:	10 e0       	ldi	r17, 0x00	; 0
					
					five_sec = 0u;	
					sei();
     790:	01 c0       	rjmp	.+2      	; 0x794 <main+0x1a8>
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');
					
					five_sec = 0u;	
     792:	1f 5f       	subi	r17, 0xFF	; 255
     794:	93 e0       	ldi	r25, 0x03	; 3
			else
			{
				five_sec++;
			}

			if(sec_3 == 3u)
     796:	f9 12       	cpse	r15, r25
     798:	44 c0       	rjmp	.+136    	; 0x822 <main+0x236>
     79a:	f8 94       	cli
			{
	cli();
     79c:	41 e0       	ldi	r20, 0x01	; 1

	if (  /*dht_getdata_dht_22(&ftemperature,&fhumidity,0)!=-1  &&*/ dht_getdata_dht_11(&temperature,&humidity,1)!=-1 )
     79e:	be 01       	movw	r22, r28
     7a0:	66 5f       	subi	r22, 0xF6	; 246
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	ce 01       	movw	r24, r28
     7a6:	09 96       	adiw	r24, 0x09	; 9
     7a8:	3b dd       	rcall	.-1418   	; 0x220 <dht_getdata_dht_11>
     7aa:	8f 3f       	cpi	r24, 0xFF	; 255
		int8_t temp_avr;
		int8_t humd_avr;
		temp_avr = ( (ftemperature+temperature)/2 );
		humd_avr = ((fhumidity+humidity)/2);
		
		if(temp_avr > 30 || humd_avr > 67)
     7ac:	91 f1       	breq	.+100    	; 0x812 <main+0x226>
     7ae:	69 85       	ldd	r22, Y+9	; 0x09
     7b0:	06 2e       	mov	r0, r22
     7b2:	00 0c       	add	r0, r0
     7b4:	77 0b       	sbc	r23, r23
     7b6:	88 0b       	sbc	r24, r24
     7b8:	99 0b       	sbc	r25, r25
     7ba:	ed d1       	rcall	.+986    	; 0xb96 <__floatsisf>
     7bc:	29 81       	ldd	r18, Y+1	; 0x01
     7be:	3a 81       	ldd	r19, Y+2	; 0x02
     7c0:	4b 81       	ldd	r20, Y+3	; 0x03
     7c2:	5c 81       	ldd	r21, Y+4	; 0x04
     7c4:	e9 d0       	rcall	.+466    	; 0x998 <__addsf3>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	5f e3       	ldi	r21, 0x3F	; 63
     7ce:	6f d2       	rcall	.+1246   	; 0xcae <__mulsf3>
     7d0:	af d1       	rcall	.+862    	; 0xb30 <__fixsfsi>
     7d2:	6f 31       	cpi	r22, 0x1F	; 31
     7d4:	a4 f4       	brge	.+40     	; 0x7fe <main+0x212>
     7d6:	6a 85       	ldd	r22, Y+10	; 0x0a
     7d8:	06 2e       	mov	r0, r22
     7da:	00 0c       	add	r0, r0
     7dc:	77 0b       	sbc	r23, r23
     7de:	88 0b       	sbc	r24, r24
     7e0:	99 0b       	sbc	r25, r25
     7e2:	d9 d1       	rcall	.+946    	; 0xb96 <__floatsisf>
     7e4:	2d 81       	ldd	r18, Y+5	; 0x05
     7e6:	3e 81       	ldd	r19, Y+6	; 0x06
     7e8:	4f 81       	ldd	r20, Y+7	; 0x07
     7ea:	58 85       	ldd	r21, Y+8	; 0x08
     7ec:	d5 d0       	rcall	.+426    	; 0x998 <__addsf3>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	5f e3       	ldi	r21, 0x3F	; 63
     7f6:	5b d2       	rcall	.+1206   	; 0xcae <__mulsf3>
     7f8:	9b d1       	rcall	.+822    	; 0xb30 <__fixsfsi>
     7fa:	64 34       	cpi	r22, 0x44	; 68
     7fc:	1c f0       	brlt	.+6      	; 0x804 <main+0x218>
     7fe:	29 98       	cbi	0x05, 1	; 5
     800:	2c 98       	cbi	0x05, 4	; 5
		{
			VENTILATION_ON;
			FAN_ON;
     802:	0c c0       	rjmp	.+24     	; 0x81c <main+0x230>
     804:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
		}
		
		else if (manualflag == 0)
     808:	81 11       	cpse	r24, r1
     80a:	08 c0       	rjmp	.+16     	; 0x81c <main+0x230>
     80c:	29 9a       	sbi	0x05, 1	; 5
		{
			VENTILATION_OFF;
     80e:	2c 9a       	sbi	0x05, 4	; 5
			FAN_OFF;
     810:	05 c0       	rjmp	.+10     	; 0x81c <main+0x230>
     812:	82 e2       	ldi	r24, 0x22	; 34
		}
		
	}
	else
	{
		UART_string_tx("FATAL ERROR!");
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	97 d0       	rcall	.+302    	; 0x946 <UART_string_tx>
     818:	2c 98       	cbi	0x05, 4	; 5
     81a:	29 98       	cbi	0x05, 1	; 5
		FAN_ON;
     81c:	78 94       	sei
		VENTILATION_ON;
	}
	sec_3=0u;
	sei();
     81e:	f1 2c       	mov	r15, r1
	{
		UART_string_tx("FATAL ERROR!");
		FAN_ON;
		VENTILATION_ON;
	}
	sec_3=0u;
     820:	03 c0       	rjmp	.+6      	; 0x828 <main+0x23c>
     822:	f3 94       	inc	r15

	

}

else{sec_3++;}
     824:	01 c0       	rjmp	.+2      	; 0x828 <main+0x23c>
     826:	e8 2e       	mov	r14, r24
     828:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <gUartRFlag>

			
		}
		
		
		if( gUartRFlag == 1 )
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	09 f0       	breq	.+2      	; 0x832 <main+0x246>
     830:	57 cf       	rjmp	.-338    	; 0x6e0 <main+0xf4>
		{
				cli();//cretical section 
				UART_tx(gUartData);
     832:	f8 94       	cli
     834:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <gUartData>
				//relayModuleControl( gUartData);
				
			switch (gUartData)
     838:	7e d0       	rcall	.+252    	; 0x936 <UART_tx>
     83a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <gUartData>
     83e:	82 33       	cpi	r24, 0x32	; 50
     840:	79 f1       	breq	.+94     	; 0x8a0 <main+0x2b4>
     842:	83 33       	cpi	r24, 0x33	; 51
     844:	91 f1       	breq	.+100    	; 0x8aa <main+0x2be>
					UART_string_tx(buffer);
					dtostrf(fhumidity, 3, 3, buffer);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');*/
					dht_getdata_dht_11(&temperature,&humidity,1);
     846:	81 33       	cpi	r24, 0x31	; 49
     848:	a1 f5       	brne	.+104    	; 0x8b2 <main+0x2c6>
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	be 01       	movw	r22, r28
     84e:	66 5f       	subi	r22, 0xF6	; 246
     850:	7f 4f       	sbci	r23, 0xFF	; 255
     852:	ce 01       	movw	r24, r28
     854:	09 96       	adiw	r24, 0x09	; 9
     856:	e4 dc       	rcall	.-1592   	; 0x220 <dht_getdata_dht_11>
     858:	89 85       	ldd	r24, Y+9	; 0x09
     85a:	4a e0       	ldi	r20, 0x0A	; 10
     85c:	be 01       	movw	r22, r28
     85e:	63 5d       	subi	r22, 0xD3	; 211
     860:	7f 4f       	sbci	r23, 0xFF	; 255
					itoa(temperature,buffer,10);
					UART_string_tx(sensor1);
     862:	08 2e       	mov	r0, r24
     864:	00 0c       	add	r0, r0
     866:	99 0b       	sbc	r25, r25
     868:	a4 d2       	rcall	.+1352   	; 0xdb2 <__itoa_ncheck>
					UART_string_tx(tempString);
     86a:	ce 01       	movw	r24, r28
     86c:	84 96       	adiw	r24, 0x24	; 36
     86e:	6b d0       	rcall	.+214    	; 0x946 <UART_string_tx>
					UART_string_tx(buffer);
     870:	ce 01       	movw	r24, r28
     872:	0b 96       	adiw	r24, 0x0b	; 11
     874:	68 d0       	rcall	.+208    	; 0x946 <UART_string_tx>
     876:	ce 01       	movw	r24, r28
     878:	8d 96       	adiw	r24, 0x2d	; 45
     87a:	65 d0       	rcall	.+202    	; 0x946 <UART_string_tx>
     87c:	8a 85       	ldd	r24, Y+10	; 0x0a
     87e:	4a e0       	ldi	r20, 0x0A	; 10
     880:	be 01       	movw	r22, r28
     882:	63 5d       	subi	r22, 0xD3	; 211
     884:	7f 4f       	sbci	r23, 0xFF	; 255
     886:	08 2e       	mov	r0, r24
     888:	00 0c       	add	r0, r0
     88a:	99 0b       	sbc	r25, r25
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
     88c:	92 d2       	rcall	.+1316   	; 0xdb2 <__itoa_ncheck>
     88e:	ce 01       	movw	r24, r28
     890:	43 96       	adiw	r24, 0x13	; 19
     892:	59 d0       	rcall	.+178    	; 0x946 <UART_string_tx>
					UART_string_tx(buffer);
     894:	ce 01       	movw	r24, r28
     896:	8d 96       	adiw	r24, 0x2d	; 45
     898:	56 d0       	rcall	.+172    	; 0x946 <UART_string_tx>
     89a:	8a e0       	ldi	r24, 0x0A	; 10
					UART_tx('\n');		
     89c:	4c d0       	rcall	.+152    	; 0x936 <UART_tx>
     89e:	0c c0       	rjmp	.+24     	; 0x8b8 <main+0x2cc>
     8a0:	2c 98       	cbi	0x05, 4	; 5
			
			break;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
			
			case '2': FAN_ON;manualflag=1; break;
     8a4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <main+0x2cc>
     8aa:	2c 9a       	sbi	0x05, 4	; 5
     8ac:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
			case '3': FAN_OFF;manualflag=0;break;
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <main+0x2cc>
     8b2:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <gUartData>
			
			default:UART_tx(gUartData);//UART_string_tx("wrong request");
     8b6:	3f d0       	rcall	.+126    	; 0x936 <UART_tx>
     8b8:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <gUartRFlag>
     8bc:	2f ef       	ldi	r18, 0xFF	; 255
			}
			
	
			
			gUartRFlag=0;
     8be:	83 ed       	ldi	r24, 0xD3	; 211
     8c0:	90 e3       	ldi	r25, 0x30	; 48
     8c2:	21 50       	subi	r18, 0x01	; 1
     8c4:	80 40       	sbci	r24, 0x00	; 0
     8c6:	90 40       	sbci	r25, 0x00	; 0
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <main+0x2d6>
     8ca:	00 c0       	rjmp	.+0      	; 0x8cc <main+0x2e0>
     8cc:	00 00       	nop
     8ce:	78 94       	sei
     8d0:	07 cf       	rjmp	.-498    	; 0x6e0 <main+0xf4>

000008d2 <timer1_init>:

void timer1_init(void)
{


	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12);// prescaler 1024, timer compare
     8d2:	e1 e8       	ldi	r30, 0x81	; 129
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	8d 60       	ori	r24, 0x0D	; 13
     8da:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1)|(1<<OCIE1A);//timer compare interrupt enable , timer overflow interrupt enable
     8dc:	ef e6       	ldi	r30, 0x6F	; 111
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	83 60       	ori	r24, 0x03	; 3
     8e4:	80 83       	st	Z, r24
	OCR1AH = 0x3D; // 1 sec compare match
     8e6:	8d e3       	ldi	r24, 0x3D	; 61
     8e8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0x09;
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     8f2:	08 95       	ret

000008f4 <__vector_17>:
	
}


ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	8f 93       	push	r24
	
	
	oneSec ++;
     900:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <oneSec>
     904:	8f 5f       	subi	r24, 0xFF	; 255
     906:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <oneSec>
	
	
     90a:	8f 91       	pop	r24
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <UART_int>:
extern volatile unsigned char gUartRFlag;
extern volatile unsigned char gUartData;
void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);   // enable Tx Rx and Rx interrupt
     916:	88 e9       	ldi	r24, 0x98	; 152
     918:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00); // 8 bit data
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     922:	85 e3       	ldi	r24, 0x35	; 53
     924:	8a 95       	dec	r24
     926:	f1 f7       	brne	.-4      	; 0x924 <UART_int+0xe>
     928:	00 00       	nop
	_delay_us(10);
	UBRR0H = (unsigned char)(UBRRset>>8);
     92a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L= (unsigned char)(UBRRset);
     92e:	87 e6       	ldi	r24, 0x67	; 103
     930:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     934:	08 95       	ret

00000936 <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSR0A & (1<<UDRE0)));
     936:	e0 ec       	ldi	r30, 0xC0	; 192
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	90 81       	ld	r25, Z
     93c:	95 ff       	sbrs	r25, 5
     93e:	fd cf       	rjmp	.-6      	; 0x93a <UART_tx+0x4>
	UDR0=x;
     940:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     944:	08 95       	ret

00000946 <UART_string_tx>:
}

void UART_string_tx(unsigned char *x)
{
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(x[i] !='\0')
     94e:	80 81       	ld	r24, Z
     950:	88 23       	and	r24, r24
     952:	51 f0       	breq	.+20     	; 0x968 <UART_string_tx+0x22>
     954:	8f 01       	movw	r16, r30
     956:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_tx( x[i] );
     958:	ee df       	rcall	.-36     	; 0x936 <UART_tx>
		i++;
     95a:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_string_tx(unsigned char *x)
{
	unsigned char i=0;
	while(x[i] !='\0')
     95c:	f8 01       	movw	r30, r16
     95e:	ec 0f       	add	r30, r28
     960:	f1 1d       	adc	r31, r1
     962:	80 81       	ld	r24, Z
     964:	81 11       	cpse	r24, r1
     966:	f8 cf       	rjmp	.-16     	; 0x958 <UART_string_tx+0x12>
	{
		UART_tx( x[i] );
		i++;
	}
}
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	08 95       	ret

00000970 <__vector_25>:

ISR(USART0_RX_vect)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	8f 93       	push	r24
	//cli();
	
	
	gUartData = UDR0;
     97c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     980:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <gUartData>
	gUartRFlag=1;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <gUartRFlag>
	
	

	//sei();
	
     98a:	8f 91       	pop	r24
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__subsf3>:
     996:	50 58       	subi	r21, 0x80	; 128

00000998 <__addsf3>:
     998:	bb 27       	eor	r27, r27
     99a:	aa 27       	eor	r26, r26
     99c:	0e d0       	rcall	.+28     	; 0x9ba <__addsf3x>
     99e:	4d c1       	rjmp	.+666    	; 0xc3a <__fp_round>
     9a0:	3e d1       	rcall	.+636    	; 0xc1e <__fp_pscA>
     9a2:	30 f0       	brcs	.+12     	; 0x9b0 <__addsf3+0x18>
     9a4:	43 d1       	rcall	.+646    	; 0xc2c <__fp_pscB>
     9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__addsf3+0x18>
     9a8:	31 f4       	brne	.+12     	; 0x9b6 <__addsf3+0x1e>
     9aa:	9f 3f       	cpi	r25, 0xFF	; 255
     9ac:	11 f4       	brne	.+4      	; 0x9b2 <__addsf3+0x1a>
     9ae:	1e f4       	brtc	.+6      	; 0x9b6 <__addsf3+0x1e>
     9b0:	33 c1       	rjmp	.+614    	; 0xc18 <__fp_nan>
     9b2:	0e f4       	brtc	.+2      	; 0x9b6 <__addsf3+0x1e>
     9b4:	e0 95       	com	r30
     9b6:	e7 fb       	bst	r30, 7
     9b8:	29 c1       	rjmp	.+594    	; 0xc0c <__fp_inf>

000009ba <__addsf3x>:
     9ba:	e9 2f       	mov	r30, r25
     9bc:	4f d1       	rcall	.+670    	; 0xc5c <__fp_split3>
     9be:	80 f3       	brcs	.-32     	; 0x9a0 <__addsf3+0x8>
     9c0:	ba 17       	cp	r27, r26
     9c2:	62 07       	cpc	r22, r18
     9c4:	73 07       	cpc	r23, r19
     9c6:	84 07       	cpc	r24, r20
     9c8:	95 07       	cpc	r25, r21
     9ca:	18 f0       	brcs	.+6      	; 0x9d2 <__addsf3x+0x18>
     9cc:	71 f4       	brne	.+28     	; 0x9ea <__addsf3x+0x30>
     9ce:	9e f5       	brtc	.+102    	; 0xa36 <__addsf3x+0x7c>
     9d0:	67 c1       	rjmp	.+718    	; 0xca0 <__fp_zero>
     9d2:	0e f4       	brtc	.+2      	; 0x9d6 <__addsf3x+0x1c>
     9d4:	e0 95       	com	r30
     9d6:	0b 2e       	mov	r0, r27
     9d8:	ba 2f       	mov	r27, r26
     9da:	a0 2d       	mov	r26, r0
     9dc:	0b 01       	movw	r0, r22
     9de:	b9 01       	movw	r22, r18
     9e0:	90 01       	movw	r18, r0
     9e2:	0c 01       	movw	r0, r24
     9e4:	ca 01       	movw	r24, r20
     9e6:	a0 01       	movw	r20, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	ff 27       	eor	r31, r31
     9ec:	59 1b       	sub	r21, r25
     9ee:	99 f0       	breq	.+38     	; 0xa16 <__addsf3x+0x5c>
     9f0:	59 3f       	cpi	r21, 0xF9	; 249
     9f2:	50 f4       	brcc	.+20     	; 0xa08 <__addsf3x+0x4e>
     9f4:	50 3e       	cpi	r21, 0xE0	; 224
     9f6:	68 f1       	brcs	.+90     	; 0xa52 <__addsf3x+0x98>
     9f8:	1a 16       	cp	r1, r26
     9fa:	f0 40       	sbci	r31, 0x00	; 0
     9fc:	a2 2f       	mov	r26, r18
     9fe:	23 2f       	mov	r18, r19
     a00:	34 2f       	mov	r19, r20
     a02:	44 27       	eor	r20, r20
     a04:	58 5f       	subi	r21, 0xF8	; 248
     a06:	f3 cf       	rjmp	.-26     	; 0x9ee <__addsf3x+0x34>
     a08:	46 95       	lsr	r20
     a0a:	37 95       	ror	r19
     a0c:	27 95       	ror	r18
     a0e:	a7 95       	ror	r26
     a10:	f0 40       	sbci	r31, 0x00	; 0
     a12:	53 95       	inc	r21
     a14:	c9 f7       	brne	.-14     	; 0xa08 <__addsf3x+0x4e>
     a16:	7e f4       	brtc	.+30     	; 0xa36 <__addsf3x+0x7c>
     a18:	1f 16       	cp	r1, r31
     a1a:	ba 0b       	sbc	r27, r26
     a1c:	62 0b       	sbc	r22, r18
     a1e:	73 0b       	sbc	r23, r19
     a20:	84 0b       	sbc	r24, r20
     a22:	ba f0       	brmi	.+46     	; 0xa52 <__addsf3x+0x98>
     a24:	91 50       	subi	r25, 0x01	; 1
     a26:	a1 f0       	breq	.+40     	; 0xa50 <__addsf3x+0x96>
     a28:	ff 0f       	add	r31, r31
     a2a:	bb 1f       	adc	r27, r27
     a2c:	66 1f       	adc	r22, r22
     a2e:	77 1f       	adc	r23, r23
     a30:	88 1f       	adc	r24, r24
     a32:	c2 f7       	brpl	.-16     	; 0xa24 <__addsf3x+0x6a>
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__addsf3x+0x98>
     a36:	ba 0f       	add	r27, r26
     a38:	62 1f       	adc	r22, r18
     a3a:	73 1f       	adc	r23, r19
     a3c:	84 1f       	adc	r24, r20
     a3e:	48 f4       	brcc	.+18     	; 0xa52 <__addsf3x+0x98>
     a40:	87 95       	ror	r24
     a42:	77 95       	ror	r23
     a44:	67 95       	ror	r22
     a46:	b7 95       	ror	r27
     a48:	f7 95       	ror	r31
     a4a:	9e 3f       	cpi	r25, 0xFE	; 254
     a4c:	08 f0       	brcs	.+2      	; 0xa50 <__addsf3x+0x96>
     a4e:	b3 cf       	rjmp	.-154    	; 0x9b6 <__addsf3+0x1e>
     a50:	93 95       	inc	r25
     a52:	88 0f       	add	r24, r24
     a54:	08 f0       	brcs	.+2      	; 0xa58 <__addsf3x+0x9e>
     a56:	99 27       	eor	r25, r25
     a58:	ee 0f       	add	r30, r30
     a5a:	97 95       	ror	r25
     a5c:	87 95       	ror	r24
     a5e:	08 95       	ret

00000a60 <__divsf3>:
     a60:	0c d0       	rcall	.+24     	; 0xa7a <__divsf3x>
     a62:	eb c0       	rjmp	.+470    	; 0xc3a <__fp_round>
     a64:	e3 d0       	rcall	.+454    	; 0xc2c <__fp_pscB>
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__divsf3+0x18>
     a68:	da d0       	rcall	.+436    	; 0xc1e <__fp_pscA>
     a6a:	30 f0       	brcs	.+12     	; 0xa78 <__divsf3+0x18>
     a6c:	21 f4       	brne	.+8      	; 0xa76 <__divsf3+0x16>
     a6e:	5f 3f       	cpi	r21, 0xFF	; 255
     a70:	19 f0       	breq	.+6      	; 0xa78 <__divsf3+0x18>
     a72:	cc c0       	rjmp	.+408    	; 0xc0c <__fp_inf>
     a74:	51 11       	cpse	r21, r1
     a76:	15 c1       	rjmp	.+554    	; 0xca2 <__fp_szero>
     a78:	cf c0       	rjmp	.+414    	; 0xc18 <__fp_nan>

00000a7a <__divsf3x>:
     a7a:	f0 d0       	rcall	.+480    	; 0xc5c <__fp_split3>
     a7c:	98 f3       	brcs	.-26     	; 0xa64 <__divsf3+0x4>

00000a7e <__divsf3_pse>:
     a7e:	99 23       	and	r25, r25
     a80:	c9 f3       	breq	.-14     	; 0xa74 <__divsf3+0x14>
     a82:	55 23       	and	r21, r21
     a84:	b1 f3       	breq	.-20     	; 0xa72 <__divsf3+0x12>
     a86:	95 1b       	sub	r25, r21
     a88:	55 0b       	sbc	r21, r21
     a8a:	bb 27       	eor	r27, r27
     a8c:	aa 27       	eor	r26, r26
     a8e:	62 17       	cp	r22, r18
     a90:	73 07       	cpc	r23, r19
     a92:	84 07       	cpc	r24, r20
     a94:	38 f0       	brcs	.+14     	; 0xaa4 <__divsf3_pse+0x26>
     a96:	9f 5f       	subi	r25, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	22 0f       	add	r18, r18
     a9c:	33 1f       	adc	r19, r19
     a9e:	44 1f       	adc	r20, r20
     aa0:	aa 1f       	adc	r26, r26
     aa2:	a9 f3       	breq	.-22     	; 0xa8e <__divsf3_pse+0x10>
     aa4:	33 d0       	rcall	.+102    	; 0xb0c <__divsf3_pse+0x8e>
     aa6:	0e 2e       	mov	r0, r30
     aa8:	3a f0       	brmi	.+14     	; 0xab8 <__divsf3_pse+0x3a>
     aaa:	e0 e8       	ldi	r30, 0x80	; 128
     aac:	30 d0       	rcall	.+96     	; 0xb0e <__divsf3_pse+0x90>
     aae:	91 50       	subi	r25, 0x01	; 1
     ab0:	50 40       	sbci	r21, 0x00	; 0
     ab2:	e6 95       	lsr	r30
     ab4:	00 1c       	adc	r0, r0
     ab6:	ca f7       	brpl	.-14     	; 0xaaa <__divsf3_pse+0x2c>
     ab8:	29 d0       	rcall	.+82     	; 0xb0c <__divsf3_pse+0x8e>
     aba:	fe 2f       	mov	r31, r30
     abc:	27 d0       	rcall	.+78     	; 0xb0c <__divsf3_pse+0x8e>
     abe:	66 0f       	add	r22, r22
     ac0:	77 1f       	adc	r23, r23
     ac2:	88 1f       	adc	r24, r24
     ac4:	bb 1f       	adc	r27, r27
     ac6:	26 17       	cp	r18, r22
     ac8:	37 07       	cpc	r19, r23
     aca:	48 07       	cpc	r20, r24
     acc:	ab 07       	cpc	r26, r27
     ace:	b0 e8       	ldi	r27, 0x80	; 128
     ad0:	09 f0       	breq	.+2      	; 0xad4 <__divsf3_pse+0x56>
     ad2:	bb 0b       	sbc	r27, r27
     ad4:	80 2d       	mov	r24, r0
     ad6:	bf 01       	movw	r22, r30
     ad8:	ff 27       	eor	r31, r31
     ada:	93 58       	subi	r25, 0x83	; 131
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	2a f0       	brmi	.+10     	; 0xaea <__divsf3_pse+0x6c>
     ae0:	9e 3f       	cpi	r25, 0xFE	; 254
     ae2:	51 05       	cpc	r21, r1
     ae4:	68 f0       	brcs	.+26     	; 0xb00 <__divsf3_pse+0x82>
     ae6:	92 c0       	rjmp	.+292    	; 0xc0c <__fp_inf>
     ae8:	dc c0       	rjmp	.+440    	; 0xca2 <__fp_szero>
     aea:	5f 3f       	cpi	r21, 0xFF	; 255
     aec:	ec f3       	brlt	.-6      	; 0xae8 <__divsf3_pse+0x6a>
     aee:	98 3e       	cpi	r25, 0xE8	; 232
     af0:	dc f3       	brlt	.-10     	; 0xae8 <__divsf3_pse+0x6a>
     af2:	86 95       	lsr	r24
     af4:	77 95       	ror	r23
     af6:	67 95       	ror	r22
     af8:	b7 95       	ror	r27
     afa:	f7 95       	ror	r31
     afc:	9f 5f       	subi	r25, 0xFF	; 255
     afe:	c9 f7       	brne	.-14     	; 0xaf2 <__divsf3_pse+0x74>
     b00:	88 0f       	add	r24, r24
     b02:	91 1d       	adc	r25, r1
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	97 f9       	bld	r25, 7
     b0a:	08 95       	ret
     b0c:	e1 e0       	ldi	r30, 0x01	; 1
     b0e:	66 0f       	add	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	88 1f       	adc	r24, r24
     b14:	bb 1f       	adc	r27, r27
     b16:	62 17       	cp	r22, r18
     b18:	73 07       	cpc	r23, r19
     b1a:	84 07       	cpc	r24, r20
     b1c:	ba 07       	cpc	r27, r26
     b1e:	20 f0       	brcs	.+8      	; 0xb28 <__divsf3_pse+0xaa>
     b20:	62 1b       	sub	r22, r18
     b22:	73 0b       	sbc	r23, r19
     b24:	84 0b       	sbc	r24, r20
     b26:	ba 0b       	sbc	r27, r26
     b28:	ee 1f       	adc	r30, r30
     b2a:	88 f7       	brcc	.-30     	; 0xb0e <__divsf3_pse+0x90>
     b2c:	e0 95       	com	r30
     b2e:	08 95       	ret

00000b30 <__fixsfsi>:
     b30:	04 d0       	rcall	.+8      	; 0xb3a <__fixunssfsi>
     b32:	68 94       	set
     b34:	b1 11       	cpse	r27, r1
     b36:	b5 c0       	rjmp	.+362    	; 0xca2 <__fp_szero>
     b38:	08 95       	ret

00000b3a <__fixunssfsi>:
     b3a:	98 d0       	rcall	.+304    	; 0xc6c <__fp_splitA>
     b3c:	88 f0       	brcs	.+34     	; 0xb60 <__fixunssfsi+0x26>
     b3e:	9f 57       	subi	r25, 0x7F	; 127
     b40:	90 f0       	brcs	.+36     	; 0xb66 <__fixunssfsi+0x2c>
     b42:	b9 2f       	mov	r27, r25
     b44:	99 27       	eor	r25, r25
     b46:	b7 51       	subi	r27, 0x17	; 23
     b48:	a0 f0       	brcs	.+40     	; 0xb72 <__fixunssfsi+0x38>
     b4a:	d1 f0       	breq	.+52     	; 0xb80 <__fixunssfsi+0x46>
     b4c:	66 0f       	add	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	88 1f       	adc	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	1a f0       	brmi	.+6      	; 0xb5c <__fixunssfsi+0x22>
     b56:	ba 95       	dec	r27
     b58:	c9 f7       	brne	.-14     	; 0xb4c <__fixunssfsi+0x12>
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__fixunssfsi+0x46>
     b5c:	b1 30       	cpi	r27, 0x01	; 1
     b5e:	81 f0       	breq	.+32     	; 0xb80 <__fixunssfsi+0x46>
     b60:	9f d0       	rcall	.+318    	; 0xca0 <__fp_zero>
     b62:	b1 e0       	ldi	r27, 0x01	; 1
     b64:	08 95       	ret
     b66:	9c c0       	rjmp	.+312    	; 0xca0 <__fp_zero>
     b68:	67 2f       	mov	r22, r23
     b6a:	78 2f       	mov	r23, r24
     b6c:	88 27       	eor	r24, r24
     b6e:	b8 5f       	subi	r27, 0xF8	; 248
     b70:	39 f0       	breq	.+14     	; 0xb80 <__fixunssfsi+0x46>
     b72:	b9 3f       	cpi	r27, 0xF9	; 249
     b74:	cc f3       	brlt	.-14     	; 0xb68 <__fixunssfsi+0x2e>
     b76:	86 95       	lsr	r24
     b78:	77 95       	ror	r23
     b7a:	67 95       	ror	r22
     b7c:	b3 95       	inc	r27
     b7e:	d9 f7       	brne	.-10     	; 0xb76 <__fixunssfsi+0x3c>
     b80:	3e f4       	brtc	.+14     	; 0xb90 <__fixunssfsi+0x56>
     b82:	90 95       	com	r25
     b84:	80 95       	com	r24
     b86:	70 95       	com	r23
     b88:	61 95       	neg	r22
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	8f 4f       	sbci	r24, 0xFF	; 255
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	08 95       	ret

00000b92 <__floatunsisf>:
     b92:	e8 94       	clt
     b94:	09 c0       	rjmp	.+18     	; 0xba8 <__floatsisf+0x12>

00000b96 <__floatsisf>:
     b96:	97 fb       	bst	r25, 7
     b98:	3e f4       	brtc	.+14     	; 0xba8 <__floatsisf+0x12>
     b9a:	90 95       	com	r25
     b9c:	80 95       	com	r24
     b9e:	70 95       	com	r23
     ba0:	61 95       	neg	r22
     ba2:	7f 4f       	sbci	r23, 0xFF	; 255
     ba4:	8f 4f       	sbci	r24, 0xFF	; 255
     ba6:	9f 4f       	sbci	r25, 0xFF	; 255
     ba8:	99 23       	and	r25, r25
     baa:	a9 f0       	breq	.+42     	; 0xbd6 <__floatsisf+0x40>
     bac:	f9 2f       	mov	r31, r25
     bae:	96 e9       	ldi	r25, 0x96	; 150
     bb0:	bb 27       	eor	r27, r27
     bb2:	93 95       	inc	r25
     bb4:	f6 95       	lsr	r31
     bb6:	87 95       	ror	r24
     bb8:	77 95       	ror	r23
     bba:	67 95       	ror	r22
     bbc:	b7 95       	ror	r27
     bbe:	f1 11       	cpse	r31, r1
     bc0:	f8 cf       	rjmp	.-16     	; 0xbb2 <__floatsisf+0x1c>
     bc2:	fa f4       	brpl	.+62     	; 0xc02 <__floatsisf+0x6c>
     bc4:	bb 0f       	add	r27, r27
     bc6:	11 f4       	brne	.+4      	; 0xbcc <__floatsisf+0x36>
     bc8:	60 ff       	sbrs	r22, 0
     bca:	1b c0       	rjmp	.+54     	; 0xc02 <__floatsisf+0x6c>
     bcc:	6f 5f       	subi	r22, 0xFF	; 255
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	8f 4f       	sbci	r24, 0xFF	; 255
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	16 c0       	rjmp	.+44     	; 0xc02 <__floatsisf+0x6c>
     bd6:	88 23       	and	r24, r24
     bd8:	11 f0       	breq	.+4      	; 0xbde <__floatsisf+0x48>
     bda:	96 e9       	ldi	r25, 0x96	; 150
     bdc:	11 c0       	rjmp	.+34     	; 0xc00 <__floatsisf+0x6a>
     bde:	77 23       	and	r23, r23
     be0:	21 f0       	breq	.+8      	; 0xbea <__floatsisf+0x54>
     be2:	9e e8       	ldi	r25, 0x8E	; 142
     be4:	87 2f       	mov	r24, r23
     be6:	76 2f       	mov	r23, r22
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <__floatsisf+0x5e>
     bea:	66 23       	and	r22, r22
     bec:	71 f0       	breq	.+28     	; 0xc0a <__floatsisf+0x74>
     bee:	96 e8       	ldi	r25, 0x86	; 134
     bf0:	86 2f       	mov	r24, r22
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	2a f0       	brmi	.+10     	; 0xc02 <__floatsisf+0x6c>
     bf8:	9a 95       	dec	r25
     bfa:	66 0f       	add	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	88 1f       	adc	r24, r24
     c00:	da f7       	brpl	.-10     	; 0xbf8 <__floatsisf+0x62>
     c02:	88 0f       	add	r24, r24
     c04:	96 95       	lsr	r25
     c06:	87 95       	ror	r24
     c08:	97 f9       	bld	r25, 7
     c0a:	08 95       	ret

00000c0c <__fp_inf>:
     c0c:	97 f9       	bld	r25, 7
     c0e:	9f 67       	ori	r25, 0x7F	; 127
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	08 95       	ret

00000c18 <__fp_nan>:
     c18:	9f ef       	ldi	r25, 0xFF	; 255
     c1a:	80 ec       	ldi	r24, 0xC0	; 192
     c1c:	08 95       	ret

00000c1e <__fp_pscA>:
     c1e:	00 24       	eor	r0, r0
     c20:	0a 94       	dec	r0
     c22:	16 16       	cp	r1, r22
     c24:	17 06       	cpc	r1, r23
     c26:	18 06       	cpc	r1, r24
     c28:	09 06       	cpc	r0, r25
     c2a:	08 95       	ret

00000c2c <__fp_pscB>:
     c2c:	00 24       	eor	r0, r0
     c2e:	0a 94       	dec	r0
     c30:	12 16       	cp	r1, r18
     c32:	13 06       	cpc	r1, r19
     c34:	14 06       	cpc	r1, r20
     c36:	05 06       	cpc	r0, r21
     c38:	08 95       	ret

00000c3a <__fp_round>:
     c3a:	09 2e       	mov	r0, r25
     c3c:	03 94       	inc	r0
     c3e:	00 0c       	add	r0, r0
     c40:	11 f4       	brne	.+4      	; 0xc46 <__fp_round+0xc>
     c42:	88 23       	and	r24, r24
     c44:	52 f0       	brmi	.+20     	; 0xc5a <__fp_round+0x20>
     c46:	bb 0f       	add	r27, r27
     c48:	40 f4       	brcc	.+16     	; 0xc5a <__fp_round+0x20>
     c4a:	bf 2b       	or	r27, r31
     c4c:	11 f4       	brne	.+4      	; 0xc52 <__fp_round+0x18>
     c4e:	60 ff       	sbrs	r22, 0
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <__fp_round+0x20>
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	8f 4f       	sbci	r24, 0xFF	; 255
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	08 95       	ret

00000c5c <__fp_split3>:
     c5c:	57 fd       	sbrc	r21, 7
     c5e:	90 58       	subi	r25, 0x80	; 128
     c60:	44 0f       	add	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	59 f0       	breq	.+22     	; 0xc7c <__fp_splitA+0x10>
     c66:	5f 3f       	cpi	r21, 0xFF	; 255
     c68:	71 f0       	breq	.+28     	; 0xc86 <__fp_splitA+0x1a>
     c6a:	47 95       	ror	r20

00000c6c <__fp_splitA>:
     c6c:	88 0f       	add	r24, r24
     c6e:	97 fb       	bst	r25, 7
     c70:	99 1f       	adc	r25, r25
     c72:	61 f0       	breq	.+24     	; 0xc8c <__fp_splitA+0x20>
     c74:	9f 3f       	cpi	r25, 0xFF	; 255
     c76:	79 f0       	breq	.+30     	; 0xc96 <__fp_splitA+0x2a>
     c78:	87 95       	ror	r24
     c7a:	08 95       	ret
     c7c:	12 16       	cp	r1, r18
     c7e:	13 06       	cpc	r1, r19
     c80:	14 06       	cpc	r1, r20
     c82:	55 1f       	adc	r21, r21
     c84:	f2 cf       	rjmp	.-28     	; 0xc6a <__fp_split3+0xe>
     c86:	46 95       	lsr	r20
     c88:	f1 df       	rcall	.-30     	; 0xc6c <__fp_splitA>
     c8a:	08 c0       	rjmp	.+16     	; 0xc9c <__fp_splitA+0x30>
     c8c:	16 16       	cp	r1, r22
     c8e:	17 06       	cpc	r1, r23
     c90:	18 06       	cpc	r1, r24
     c92:	99 1f       	adc	r25, r25
     c94:	f1 cf       	rjmp	.-30     	; 0xc78 <__fp_splitA+0xc>
     c96:	86 95       	lsr	r24
     c98:	71 05       	cpc	r23, r1
     c9a:	61 05       	cpc	r22, r1
     c9c:	08 94       	sec
     c9e:	08 95       	ret

00000ca0 <__fp_zero>:
     ca0:	e8 94       	clt

00000ca2 <__fp_szero>:
     ca2:	bb 27       	eor	r27, r27
     ca4:	66 27       	eor	r22, r22
     ca6:	77 27       	eor	r23, r23
     ca8:	cb 01       	movw	r24, r22
     caa:	97 f9       	bld	r25, 7
     cac:	08 95       	ret

00000cae <__mulsf3>:
     cae:	0b d0       	rcall	.+22     	; 0xcc6 <__mulsf3x>
     cb0:	c4 cf       	rjmp	.-120    	; 0xc3a <__fp_round>
     cb2:	b5 df       	rcall	.-150    	; 0xc1e <__fp_pscA>
     cb4:	28 f0       	brcs	.+10     	; 0xcc0 <__mulsf3+0x12>
     cb6:	ba df       	rcall	.-140    	; 0xc2c <__fp_pscB>
     cb8:	18 f0       	brcs	.+6      	; 0xcc0 <__mulsf3+0x12>
     cba:	95 23       	and	r25, r21
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__mulsf3+0x12>
     cbe:	a6 cf       	rjmp	.-180    	; 0xc0c <__fp_inf>
     cc0:	ab cf       	rjmp	.-170    	; 0xc18 <__fp_nan>
     cc2:	11 24       	eor	r1, r1
     cc4:	ee cf       	rjmp	.-36     	; 0xca2 <__fp_szero>

00000cc6 <__mulsf3x>:
     cc6:	ca df       	rcall	.-108    	; 0xc5c <__fp_split3>
     cc8:	a0 f3       	brcs	.-24     	; 0xcb2 <__mulsf3+0x4>

00000cca <__mulsf3_pse>:
     cca:	95 9f       	mul	r25, r21
     ccc:	d1 f3       	breq	.-12     	; 0xcc2 <__mulsf3+0x14>
     cce:	95 0f       	add	r25, r21
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	55 1f       	adc	r21, r21
     cd4:	62 9f       	mul	r22, r18
     cd6:	f0 01       	movw	r30, r0
     cd8:	72 9f       	mul	r23, r18
     cda:	bb 27       	eor	r27, r27
     cdc:	f0 0d       	add	r31, r0
     cde:	b1 1d       	adc	r27, r1
     ce0:	63 9f       	mul	r22, r19
     ce2:	aa 27       	eor	r26, r26
     ce4:	f0 0d       	add	r31, r0
     ce6:	b1 1d       	adc	r27, r1
     ce8:	aa 1f       	adc	r26, r26
     cea:	64 9f       	mul	r22, r20
     cec:	66 27       	eor	r22, r22
     cee:	b0 0d       	add	r27, r0
     cf0:	a1 1d       	adc	r26, r1
     cf2:	66 1f       	adc	r22, r22
     cf4:	82 9f       	mul	r24, r18
     cf6:	22 27       	eor	r18, r18
     cf8:	b0 0d       	add	r27, r0
     cfa:	a1 1d       	adc	r26, r1
     cfc:	62 1f       	adc	r22, r18
     cfe:	73 9f       	mul	r23, r19
     d00:	b0 0d       	add	r27, r0
     d02:	a1 1d       	adc	r26, r1
     d04:	62 1f       	adc	r22, r18
     d06:	83 9f       	mul	r24, r19
     d08:	a0 0d       	add	r26, r0
     d0a:	61 1d       	adc	r22, r1
     d0c:	22 1f       	adc	r18, r18
     d0e:	74 9f       	mul	r23, r20
     d10:	33 27       	eor	r19, r19
     d12:	a0 0d       	add	r26, r0
     d14:	61 1d       	adc	r22, r1
     d16:	23 1f       	adc	r18, r19
     d18:	84 9f       	mul	r24, r20
     d1a:	60 0d       	add	r22, r0
     d1c:	21 1d       	adc	r18, r1
     d1e:	82 2f       	mov	r24, r18
     d20:	76 2f       	mov	r23, r22
     d22:	6a 2f       	mov	r22, r26
     d24:	11 24       	eor	r1, r1
     d26:	9f 57       	subi	r25, 0x7F	; 127
     d28:	50 40       	sbci	r21, 0x00	; 0
     d2a:	8a f0       	brmi	.+34     	; 0xd4e <__mulsf3_pse+0x84>
     d2c:	e1 f0       	breq	.+56     	; 0xd66 <__mulsf3_pse+0x9c>
     d2e:	88 23       	and	r24, r24
     d30:	4a f0       	brmi	.+18     	; 0xd44 <__mulsf3_pse+0x7a>
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	bb 1f       	adc	r27, r27
     d38:	66 1f       	adc	r22, r22
     d3a:	77 1f       	adc	r23, r23
     d3c:	88 1f       	adc	r24, r24
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	50 40       	sbci	r21, 0x00	; 0
     d42:	a9 f7       	brne	.-22     	; 0xd2e <__mulsf3_pse+0x64>
     d44:	9e 3f       	cpi	r25, 0xFE	; 254
     d46:	51 05       	cpc	r21, r1
     d48:	70 f0       	brcs	.+28     	; 0xd66 <__mulsf3_pse+0x9c>
     d4a:	60 cf       	rjmp	.-320    	; 0xc0c <__fp_inf>
     d4c:	aa cf       	rjmp	.-172    	; 0xca2 <__fp_szero>
     d4e:	5f 3f       	cpi	r21, 0xFF	; 255
     d50:	ec f3       	brlt	.-6      	; 0xd4c <__mulsf3_pse+0x82>
     d52:	98 3e       	cpi	r25, 0xE8	; 232
     d54:	dc f3       	brlt	.-10     	; 0xd4c <__mulsf3_pse+0x82>
     d56:	86 95       	lsr	r24
     d58:	77 95       	ror	r23
     d5a:	67 95       	ror	r22
     d5c:	b7 95       	ror	r27
     d5e:	f7 95       	ror	r31
     d60:	e7 95       	ror	r30
     d62:	9f 5f       	subi	r25, 0xFF	; 255
     d64:	c1 f7       	brne	.-16     	; 0xd56 <__mulsf3_pse+0x8c>
     d66:	fe 2b       	or	r31, r30
     d68:	88 0f       	add	r24, r24
     d6a:	91 1d       	adc	r25, r1
     d6c:	96 95       	lsr	r25
     d6e:	87 95       	ror	r24
     d70:	97 f9       	bld	r25, 7
     d72:	08 95       	ret

00000d74 <dtostrf>:
     d74:	ef 92       	push	r14
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	e8 01       	movw	r28, r16
     d80:	47 fd       	sbrc	r20, 7
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <dtostrf+0x14>
     d84:	34 e0       	ldi	r19, 0x04	; 4
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <dtostrf+0x16>
     d88:	34 e1       	ldi	r19, 0x14	; 20
     d8a:	04 2e       	mov	r0, r20
     d8c:	00 0c       	add	r0, r0
     d8e:	55 0b       	sbc	r21, r21
     d90:	57 ff       	sbrs	r21, 7
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <dtostrf+0x26>
     d94:	51 95       	neg	r21
     d96:	41 95       	neg	r20
     d98:	51 09       	sbc	r21, r1
     d9a:	e3 2e       	mov	r14, r19
     d9c:	02 2f       	mov	r16, r18
     d9e:	24 2f       	mov	r18, r20
     da0:	ae 01       	movw	r20, r28
     da2:	2a d0       	rcall	.+84     	; 0xdf8 <dtoa_prf>
     da4:	ce 01       	movw	r24, r28
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ef 90       	pop	r14
     db0:	08 95       	ret

00000db2 <__itoa_ncheck>:
     db2:	bb 27       	eor	r27, r27
     db4:	4a 30       	cpi	r20, 0x0A	; 10
     db6:	31 f4       	brne	.+12     	; 0xdc4 <__itoa_ncheck+0x12>
     db8:	99 23       	and	r25, r25
     dba:	22 f4       	brpl	.+8      	; 0xdc4 <__itoa_ncheck+0x12>
     dbc:	bd e2       	ldi	r27, 0x2D	; 45
     dbe:	90 95       	com	r25
     dc0:	81 95       	neg	r24
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <__utoa_common>

00000dc6 <__utoa_ncheck>:
     dc6:	bb 27       	eor	r27, r27

00000dc8 <__utoa_common>:
     dc8:	fb 01       	movw	r30, r22
     dca:	55 27       	eor	r21, r21
     dcc:	aa 27       	eor	r26, r26
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	aa 1f       	adc	r26, r26
     dd4:	a4 17       	cp	r26, r20
     dd6:	10 f0       	brcs	.+4      	; 0xddc <__utoa_common+0x14>
     dd8:	a4 1b       	sub	r26, r20
     dda:	83 95       	inc	r24
     ddc:	50 51       	subi	r21, 0x10	; 16
     dde:	b9 f7       	brne	.-18     	; 0xdce <__utoa_common+0x6>
     de0:	a0 5d       	subi	r26, 0xD0	; 208
     de2:	aa 33       	cpi	r26, 0x3A	; 58
     de4:	08 f0       	brcs	.+2      	; 0xde8 <__utoa_common+0x20>
     de6:	a9 5d       	subi	r26, 0xD9	; 217
     de8:	a1 93       	st	Z+, r26
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	79 f7       	brne	.-34     	; 0xdcc <__utoa_common+0x4>
     dee:	b1 11       	cpse	r27, r1
     df0:	b1 93       	st	Z+, r27
     df2:	11 92       	st	Z+, r1
     df4:	cb 01       	movw	r24, r22
     df6:	4e c2       	rjmp	.+1180   	; 0x1294 <strrev>

00000df8 <dtoa_prf>:
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	29 97       	sbiw	r28, 0x09	; 9
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	6a 01       	movw	r12, r20
     e22:	12 2f       	mov	r17, r18
     e24:	b0 2e       	mov	r11, r16
     e26:	2b e3       	ldi	r18, 0x3B	; 59
     e28:	20 17       	cp	r18, r16
     e2a:	20 f0       	brcs	.+8      	; 0xe34 <dtoa_prf+0x3c>
     e2c:	ff 24       	eor	r15, r15
     e2e:	f3 94       	inc	r15
     e30:	f0 0e       	add	r15, r16
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <dtoa_prf+0x40>
     e34:	2c e3       	ldi	r18, 0x3C	; 60
     e36:	f2 2e       	mov	r15, r18
     e38:	0f 2d       	mov	r16, r15
     e3a:	27 e0       	ldi	r18, 0x07	; 7
     e3c:	ae 01       	movw	r20, r28
     e3e:	4f 5f       	subi	r20, 0xFF	; 255
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	50 d1       	rcall	.+672    	; 0x10e4 <__ftoa_engine>
     e44:	bc 01       	movw	r22, r24
     e46:	49 81       	ldd	r20, Y+1	; 0x01
     e48:	84 2f       	mov	r24, r20
     e4a:	89 70       	andi	r24, 0x09	; 9
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	31 f0       	breq	.+12     	; 0xe5c <dtoa_prf+0x64>
     e50:	e1 fc       	sbrc	r14, 1
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <dtoa_prf+0x68>
     e54:	e0 fe       	sbrs	r14, 0
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <dtoa_prf+0x6c>
     e58:	90 e2       	ldi	r25, 0x20	; 32
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <dtoa_prf+0x6e>
     e5c:	9d e2       	ldi	r25, 0x2D	; 45
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <dtoa_prf+0x6e>
     e60:	9b e2       	ldi	r25, 0x2B	; 43
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <dtoa_prf+0x6e>
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	5e 2d       	mov	r21, r14
     e68:	50 71       	andi	r21, 0x10	; 16
     e6a:	43 ff       	sbrs	r20, 3
     e6c:	3c c0       	rjmp	.+120    	; 0xee6 <dtoa_prf+0xee>
     e6e:	91 11       	cpse	r25, r1
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <dtoa_prf+0x7e>
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <dtoa_prf+0x80>
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	81 17       	cp	r24, r17
     e7a:	18 f4       	brcc	.+6      	; 0xe82 <dtoa_prf+0x8a>
     e7c:	21 2f       	mov	r18, r17
     e7e:	28 1b       	sub	r18, r24
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <dtoa_prf+0x8c>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	51 11       	cpse	r21, r1
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <dtoa_prf+0xa6>
     e88:	f6 01       	movw	r30, r12
     e8a:	82 2f       	mov	r24, r18
     e8c:	30 e2       	ldi	r19, 0x20	; 32
     e8e:	88 23       	and	r24, r24
     e90:	19 f0       	breq	.+6      	; 0xe98 <dtoa_prf+0xa0>
     e92:	31 93       	st	Z+, r19
     e94:	81 50       	subi	r24, 0x01	; 1
     e96:	fb cf       	rjmp	.-10     	; 0xe8e <dtoa_prf+0x96>
     e98:	c2 0e       	add	r12, r18
     e9a:	d1 1c       	adc	r13, r1
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	99 23       	and	r25, r25
     ea0:	29 f0       	breq	.+10     	; 0xeac <dtoa_prf+0xb4>
     ea2:	d6 01       	movw	r26, r12
     ea4:	9c 93       	st	X, r25
     ea6:	f6 01       	movw	r30, r12
     ea8:	31 96       	adiw	r30, 0x01	; 1
     eaa:	6f 01       	movw	r12, r30
     eac:	c6 01       	movw	r24, r12
     eae:	03 96       	adiw	r24, 0x03	; 3
     eb0:	e2 fe       	sbrs	r14, 2
     eb2:	0a c0       	rjmp	.+20     	; 0xec8 <dtoa_prf+0xd0>
     eb4:	3e e4       	ldi	r19, 0x4E	; 78
     eb6:	d6 01       	movw	r26, r12
     eb8:	3c 93       	st	X, r19
     eba:	41 e4       	ldi	r20, 0x41	; 65
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	4c 93       	st	X, r20
     ec0:	11 97       	sbiw	r26, 0x01	; 1
     ec2:	12 96       	adiw	r26, 0x02	; 2
     ec4:	3c 93       	st	X, r19
     ec6:	06 c0       	rjmp	.+12     	; 0xed4 <dtoa_prf+0xdc>
     ec8:	3e e6       	ldi	r19, 0x6E	; 110
     eca:	f6 01       	movw	r30, r12
     ecc:	30 83       	st	Z, r19
     ece:	41 e6       	ldi	r20, 0x61	; 97
     ed0:	41 83       	std	Z+1, r20	; 0x01
     ed2:	32 83       	std	Z+2, r19	; 0x02
     ed4:	fc 01       	movw	r30, r24
     ed6:	32 2f       	mov	r19, r18
     ed8:	40 e2       	ldi	r20, 0x20	; 32
     eda:	33 23       	and	r19, r19
     edc:	09 f4       	brne	.+2      	; 0xee0 <dtoa_prf+0xe8>
     ede:	42 c0       	rjmp	.+132    	; 0xf64 <dtoa_prf+0x16c>
     ee0:	41 93       	st	Z+, r20
     ee2:	31 50       	subi	r19, 0x01	; 1
     ee4:	fa cf       	rjmp	.-12     	; 0xeda <dtoa_prf+0xe2>
     ee6:	42 ff       	sbrs	r20, 2
     ee8:	44 c0       	rjmp	.+136    	; 0xf72 <dtoa_prf+0x17a>
     eea:	91 11       	cpse	r25, r1
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <dtoa_prf+0xfa>
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <dtoa_prf+0xfc>
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	81 17       	cp	r24, r17
     ef6:	18 f4       	brcc	.+6      	; 0xefe <dtoa_prf+0x106>
     ef8:	21 2f       	mov	r18, r17
     efa:	28 1b       	sub	r18, r24
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <dtoa_prf+0x108>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	51 11       	cpse	r21, r1
     f02:	0b c0       	rjmp	.+22     	; 0xf1a <dtoa_prf+0x122>
     f04:	f6 01       	movw	r30, r12
     f06:	82 2f       	mov	r24, r18
     f08:	30 e2       	ldi	r19, 0x20	; 32
     f0a:	88 23       	and	r24, r24
     f0c:	19 f0       	breq	.+6      	; 0xf14 <dtoa_prf+0x11c>
     f0e:	31 93       	st	Z+, r19
     f10:	81 50       	subi	r24, 0x01	; 1
     f12:	fb cf       	rjmp	.-10     	; 0xf0a <dtoa_prf+0x112>
     f14:	c2 0e       	add	r12, r18
     f16:	d1 1c       	adc	r13, r1
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	99 23       	and	r25, r25
     f1c:	29 f0       	breq	.+10     	; 0xf28 <dtoa_prf+0x130>
     f1e:	d6 01       	movw	r26, r12
     f20:	9c 93       	st	X, r25
     f22:	f6 01       	movw	r30, r12
     f24:	31 96       	adiw	r30, 0x01	; 1
     f26:	6f 01       	movw	r12, r30
     f28:	c6 01       	movw	r24, r12
     f2a:	03 96       	adiw	r24, 0x03	; 3
     f2c:	e2 fe       	sbrs	r14, 2
     f2e:	0b c0       	rjmp	.+22     	; 0xf46 <dtoa_prf+0x14e>
     f30:	39 e4       	ldi	r19, 0x49	; 73
     f32:	d6 01       	movw	r26, r12
     f34:	3c 93       	st	X, r19
     f36:	3e e4       	ldi	r19, 0x4E	; 78
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	3c 93       	st	X, r19
     f3c:	11 97       	sbiw	r26, 0x01	; 1
     f3e:	36 e4       	ldi	r19, 0x46	; 70
     f40:	12 96       	adiw	r26, 0x02	; 2
     f42:	3c 93       	st	X, r19
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <dtoa_prf+0x15c>
     f46:	39 e6       	ldi	r19, 0x69	; 105
     f48:	f6 01       	movw	r30, r12
     f4a:	30 83       	st	Z, r19
     f4c:	3e e6       	ldi	r19, 0x6E	; 110
     f4e:	31 83       	std	Z+1, r19	; 0x01
     f50:	36 e6       	ldi	r19, 0x66	; 102
     f52:	32 83       	std	Z+2, r19	; 0x02
     f54:	fc 01       	movw	r30, r24
     f56:	32 2f       	mov	r19, r18
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	33 23       	and	r19, r19
     f5c:	19 f0       	breq	.+6      	; 0xf64 <dtoa_prf+0x16c>
     f5e:	41 93       	st	Z+, r20
     f60:	31 50       	subi	r19, 0x01	; 1
     f62:	fb cf       	rjmp	.-10     	; 0xf5a <dtoa_prf+0x162>
     f64:	fc 01       	movw	r30, r24
     f66:	e2 0f       	add	r30, r18
     f68:	f1 1d       	adc	r31, r1
     f6a:	10 82       	st	Z, r1
     f6c:	8e ef       	ldi	r24, 0xFE	; 254
     f6e:	9f ef       	ldi	r25, 0xFF	; 255
     f70:	a6 c0       	rjmp	.+332    	; 0x10be <dtoa_prf+0x2c6>
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	91 11       	cpse	r25, r1
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <dtoa_prf+0x186>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	16 16       	cp	r1, r22
     f80:	17 06       	cpc	r1, r23
     f82:	1c f4       	brge	.+6      	; 0xf8a <dtoa_prf+0x192>
     f84:	fb 01       	movw	r30, r22
     f86:	31 96       	adiw	r30, 0x01	; 1
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <dtoa_prf+0x196>
     f8a:	e1 e0       	ldi	r30, 0x01	; 1
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	2e 0f       	add	r18, r30
     f90:	3f 1f       	adc	r19, r31
     f92:	bb 20       	and	r11, r11
     f94:	21 f0       	breq	.+8      	; 0xf9e <dtoa_prf+0x1a6>
     f96:	eb 2d       	mov	r30, r11
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	31 96       	adiw	r30, 0x01	; 1
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <dtoa_prf+0x1aa>
     f9e:	e0 e0       	ldi	r30, 0x00	; 0
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	2e 0f       	add	r18, r30
     fa4:	3f 1f       	adc	r19, r31
     fa6:	e1 2f       	mov	r30, r17
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	2e 17       	cp	r18, r30
     fac:	3f 07       	cpc	r19, r31
     fae:	1c f4       	brge	.+6      	; 0xfb6 <dtoa_prf+0x1be>
     fb0:	12 1b       	sub	r17, r18
     fb2:	21 2f       	mov	r18, r17
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <dtoa_prf+0x1c0>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	8e 2d       	mov	r24, r14
     fba:	88 71       	andi	r24, 0x18	; 24
     fbc:	59 f4       	brne	.+22     	; 0xfd4 <dtoa_prf+0x1dc>
     fbe:	f6 01       	movw	r30, r12
     fc0:	82 2f       	mov	r24, r18
     fc2:	30 e2       	ldi	r19, 0x20	; 32
     fc4:	88 23       	and	r24, r24
     fc6:	19 f0       	breq	.+6      	; 0xfce <dtoa_prf+0x1d6>
     fc8:	31 93       	st	Z+, r19
     fca:	81 50       	subi	r24, 0x01	; 1
     fcc:	fb cf       	rjmp	.-10     	; 0xfc4 <dtoa_prf+0x1cc>
     fce:	c2 0e       	add	r12, r18
     fd0:	d1 1c       	adc	r13, r1
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	99 23       	and	r25, r25
     fd6:	29 f0       	breq	.+10     	; 0xfe2 <dtoa_prf+0x1ea>
     fd8:	d6 01       	movw	r26, r12
     fda:	9c 93       	st	X, r25
     fdc:	f6 01       	movw	r30, r12
     fde:	31 96       	adiw	r30, 0x01	; 1
     fe0:	6f 01       	movw	r12, r30
     fe2:	51 11       	cpse	r21, r1
     fe4:	0b c0       	rjmp	.+22     	; 0xffc <dtoa_prf+0x204>
     fe6:	f6 01       	movw	r30, r12
     fe8:	82 2f       	mov	r24, r18
     fea:	90 e3       	ldi	r25, 0x30	; 48
     fec:	88 23       	and	r24, r24
     fee:	19 f0       	breq	.+6      	; 0xff6 <dtoa_prf+0x1fe>
     ff0:	91 93       	st	Z+, r25
     ff2:	81 50       	subi	r24, 0x01	; 1
     ff4:	fb cf       	rjmp	.-10     	; 0xfec <dtoa_prf+0x1f4>
     ff6:	c2 0e       	add	r12, r18
     ff8:	d1 1c       	adc	r13, r1
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	0f 2d       	mov	r16, r15
     ffe:	06 0f       	add	r16, r22
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	34 2f       	mov	r19, r20
    1004:	30 71       	andi	r19, 0x10	; 16
    1006:	44 ff       	sbrs	r20, 4
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <dtoa_prf+0x218>
    100a:	91 33       	cpi	r25, 0x31	; 49
    100c:	09 f4       	brne	.+2      	; 0x1010 <dtoa_prf+0x218>
    100e:	01 50       	subi	r16, 0x01	; 1
    1010:	10 16       	cp	r1, r16
    1012:	24 f4       	brge	.+8      	; 0x101c <dtoa_prf+0x224>
    1014:	09 30       	cpi	r16, 0x09	; 9
    1016:	18 f0       	brcs	.+6      	; 0x101e <dtoa_prf+0x226>
    1018:	08 e0       	ldi	r16, 0x08	; 8
    101a:	01 c0       	rjmp	.+2      	; 0x101e <dtoa_prf+0x226>
    101c:	01 e0       	ldi	r16, 0x01	; 1
    101e:	ab 01       	movw	r20, r22
    1020:	77 ff       	sbrs	r23, 7
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <dtoa_prf+0x230>
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	fb 01       	movw	r30, r22
    102a:	e4 1b       	sub	r30, r20
    102c:	f5 0b       	sbc	r31, r21
    102e:	a1 e0       	ldi	r26, 0x01	; 1
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ac 0f       	add	r26, r28
    1034:	bd 1f       	adc	r27, r29
    1036:	ea 0f       	add	r30, r26
    1038:	fb 1f       	adc	r31, r27
    103a:	8e e2       	ldi	r24, 0x2E	; 46
    103c:	a8 2e       	mov	r10, r24
    103e:	4b 01       	movw	r8, r22
    1040:	80 1a       	sub	r8, r16
    1042:	91 08       	sbc	r9, r1
    1044:	0b 2d       	mov	r16, r11
    1046:	10 e0       	ldi	r17, 0x00	; 0
    1048:	11 95       	neg	r17
    104a:	01 95       	neg	r16
    104c:	11 09       	sbc	r17, r1
    104e:	4f 3f       	cpi	r20, 0xFF	; 255
    1050:	bf ef       	ldi	r27, 0xFF	; 255
    1052:	5b 07       	cpc	r21, r27
    1054:	21 f4       	brne	.+8      	; 0x105e <dtoa_prf+0x266>
    1056:	d6 01       	movw	r26, r12
    1058:	ac 92       	st	X, r10
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	6d 01       	movw	r12, r26
    105e:	64 17       	cp	r22, r20
    1060:	75 07       	cpc	r23, r21
    1062:	2c f0       	brlt	.+10     	; 0x106e <dtoa_prf+0x276>
    1064:	84 16       	cp	r8, r20
    1066:	95 06       	cpc	r9, r21
    1068:	14 f4       	brge	.+4      	; 0x106e <dtoa_prf+0x276>
    106a:	81 81       	ldd	r24, Z+1	; 0x01
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <dtoa_prf+0x278>
    106e:	80 e3       	ldi	r24, 0x30	; 48
    1070:	41 50       	subi	r20, 0x01	; 1
    1072:	51 09       	sbc	r21, r1
    1074:	31 96       	adiw	r30, 0x01	; 1
    1076:	d6 01       	movw	r26, r12
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	7d 01       	movw	r14, r26
    107c:	40 17       	cp	r20, r16
    107e:	51 07       	cpc	r21, r17
    1080:	24 f0       	brlt	.+8      	; 0x108a <dtoa_prf+0x292>
    1082:	d6 01       	movw	r26, r12
    1084:	8c 93       	st	X, r24
    1086:	67 01       	movw	r12, r14
    1088:	e2 cf       	rjmp	.-60     	; 0x104e <dtoa_prf+0x256>
    108a:	64 17       	cp	r22, r20
    108c:	75 07       	cpc	r23, r21
    108e:	39 f4       	brne	.+14     	; 0x109e <dtoa_prf+0x2a6>
    1090:	96 33       	cpi	r25, 0x36	; 54
    1092:	20 f4       	brcc	.+8      	; 0x109c <dtoa_prf+0x2a4>
    1094:	95 33       	cpi	r25, 0x35	; 53
    1096:	19 f4       	brne	.+6      	; 0x109e <dtoa_prf+0x2a6>
    1098:	31 11       	cpse	r19, r1
    109a:	01 c0       	rjmp	.+2      	; 0x109e <dtoa_prf+0x2a6>
    109c:	81 e3       	ldi	r24, 0x31	; 49
    109e:	f6 01       	movw	r30, r12
    10a0:	80 83       	st	Z, r24
    10a2:	f7 01       	movw	r30, r14
    10a4:	82 2f       	mov	r24, r18
    10a6:	90 e2       	ldi	r25, 0x20	; 32
    10a8:	88 23       	and	r24, r24
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <dtoa_prf+0x2ba>
    10ac:	91 93       	st	Z+, r25
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	fb cf       	rjmp	.-10     	; 0x10a8 <dtoa_prf+0x2b0>
    10b2:	f7 01       	movw	r30, r14
    10b4:	e2 0f       	add	r30, r18
    10b6:	f1 1d       	adc	r31, r1
    10b8:	10 82       	st	Z, r1
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	29 96       	adiw	r28, 0x09	; 9
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	bf 90       	pop	r11
    10dc:	af 90       	pop	r10
    10de:	9f 90       	pop	r9
    10e0:	8f 90       	pop	r8
    10e2:	08 95       	ret

000010e4 <__ftoa_engine>:
    10e4:	28 30       	cpi	r18, 0x08	; 8
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__ftoa_engine+0x6>
    10e8:	27 e0       	ldi	r18, 0x07	; 7
    10ea:	33 27       	eor	r19, r19
    10ec:	da 01       	movw	r26, r20
    10ee:	99 0f       	add	r25, r25
    10f0:	31 1d       	adc	r19, r1
    10f2:	87 fd       	sbrc	r24, 7
    10f4:	91 60       	ori	r25, 0x01	; 1
    10f6:	00 96       	adiw	r24, 0x00	; 0
    10f8:	61 05       	cpc	r22, r1
    10fa:	71 05       	cpc	r23, r1
    10fc:	39 f4       	brne	.+14     	; 0x110c <__ftoa_engine+0x28>
    10fe:	32 60       	ori	r19, 0x02	; 2
    1100:	2e 5f       	subi	r18, 0xFE	; 254
    1102:	3d 93       	st	X+, r19
    1104:	30 e3       	ldi	r19, 0x30	; 48
    1106:	2a 95       	dec	r18
    1108:	e1 f7       	brne	.-8      	; 0x1102 <__ftoa_engine+0x1e>
    110a:	08 95       	ret
    110c:	9f 3f       	cpi	r25, 0xFF	; 255
    110e:	30 f0       	brcs	.+12     	; 0x111c <__ftoa_engine+0x38>
    1110:	80 38       	cpi	r24, 0x80	; 128
    1112:	71 05       	cpc	r23, r1
    1114:	61 05       	cpc	r22, r1
    1116:	09 f0       	breq	.+2      	; 0x111a <__ftoa_engine+0x36>
    1118:	3c 5f       	subi	r19, 0xFC	; 252
    111a:	3c 5f       	subi	r19, 0xFC	; 252
    111c:	3d 93       	st	X+, r19
    111e:	91 30       	cpi	r25, 0x01	; 1
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__ftoa_engine+0x40>
    1122:	80 68       	ori	r24, 0x80	; 128
    1124:	91 1d       	adc	r25, r1
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	1f 93       	push	r17
    112c:	0f 93       	push	r16
    112e:	ff 92       	push	r15
    1130:	ef 92       	push	r14
    1132:	19 2f       	mov	r17, r25
    1134:	98 7f       	andi	r25, 0xF8	; 248
    1136:	96 95       	lsr	r25
    1138:	e9 2f       	mov	r30, r25
    113a:	96 95       	lsr	r25
    113c:	96 95       	lsr	r25
    113e:	e9 0f       	add	r30, r25
    1140:	ff 27       	eor	r31, r31
    1142:	e2 5c       	subi	r30, 0xC2	; 194
    1144:	fe 4f       	sbci	r31, 0xFE	; 254
    1146:	99 27       	eor	r25, r25
    1148:	33 27       	eor	r19, r19
    114a:	ee 24       	eor	r14, r14
    114c:	ff 24       	eor	r15, r15
    114e:	a7 01       	movw	r20, r14
    1150:	e7 01       	movw	r28, r14
    1152:	05 90       	lpm	r0, Z+
    1154:	08 94       	sec
    1156:	07 94       	ror	r0
    1158:	28 f4       	brcc	.+10     	; 0x1164 <__ftoa_engine+0x80>
    115a:	36 0f       	add	r19, r22
    115c:	e7 1e       	adc	r14, r23
    115e:	f8 1e       	adc	r15, r24
    1160:	49 1f       	adc	r20, r25
    1162:	51 1d       	adc	r21, r1
    1164:	66 0f       	add	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	88 1f       	adc	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	06 94       	lsr	r0
    116e:	a1 f7       	brne	.-24     	; 0x1158 <__ftoa_engine+0x74>
    1170:	05 90       	lpm	r0, Z+
    1172:	07 94       	ror	r0
    1174:	28 f4       	brcc	.+10     	; 0x1180 <__ftoa_engine+0x9c>
    1176:	e7 0e       	add	r14, r23
    1178:	f8 1e       	adc	r15, r24
    117a:	49 1f       	adc	r20, r25
    117c:	56 1f       	adc	r21, r22
    117e:	c1 1d       	adc	r28, r1
    1180:	77 0f       	add	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	66 1f       	adc	r22, r22
    1188:	06 94       	lsr	r0
    118a:	a1 f7       	brne	.-24     	; 0x1174 <__ftoa_engine+0x90>
    118c:	05 90       	lpm	r0, Z+
    118e:	07 94       	ror	r0
    1190:	28 f4       	brcc	.+10     	; 0x119c <__ftoa_engine+0xb8>
    1192:	f8 0e       	add	r15, r24
    1194:	49 1f       	adc	r20, r25
    1196:	56 1f       	adc	r21, r22
    1198:	c7 1f       	adc	r28, r23
    119a:	d1 1d       	adc	r29, r1
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	66 1f       	adc	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	06 94       	lsr	r0
    11a6:	a1 f7       	brne	.-24     	; 0x1190 <__ftoa_engine+0xac>
    11a8:	05 90       	lpm	r0, Z+
    11aa:	07 94       	ror	r0
    11ac:	20 f4       	brcc	.+8      	; 0x11b6 <__ftoa_engine+0xd2>
    11ae:	49 0f       	add	r20, r25
    11b0:	56 1f       	adc	r21, r22
    11b2:	c7 1f       	adc	r28, r23
    11b4:	d8 1f       	adc	r29, r24
    11b6:	99 0f       	add	r25, r25
    11b8:	66 1f       	adc	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	88 1f       	adc	r24, r24
    11be:	06 94       	lsr	r0
    11c0:	a9 f7       	brne	.-22     	; 0x11ac <__ftoa_engine+0xc8>
    11c2:	84 91       	lpm	r24, Z
    11c4:	10 95       	com	r17
    11c6:	17 70       	andi	r17, 0x07	; 7
    11c8:	41 f0       	breq	.+16     	; 0x11da <__ftoa_engine+0xf6>
    11ca:	d6 95       	lsr	r29
    11cc:	c7 95       	ror	r28
    11ce:	57 95       	ror	r21
    11d0:	47 95       	ror	r20
    11d2:	f7 94       	ror	r15
    11d4:	e7 94       	ror	r14
    11d6:	1a 95       	dec	r17
    11d8:	c1 f7       	brne	.-16     	; 0x11ca <__ftoa_engine+0xe6>
    11da:	e4 ee       	ldi	r30, 0xE4	; 228
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	68 94       	set
    11e0:	15 90       	lpm	r1, Z+
    11e2:	15 91       	lpm	r17, Z+
    11e4:	35 91       	lpm	r19, Z+
    11e6:	65 91       	lpm	r22, Z+
    11e8:	95 91       	lpm	r25, Z+
    11ea:	05 90       	lpm	r0, Z+
    11ec:	7f e2       	ldi	r23, 0x2F	; 47
    11ee:	73 95       	inc	r23
    11f0:	e1 18       	sub	r14, r1
    11f2:	f1 0a       	sbc	r15, r17
    11f4:	43 0b       	sbc	r20, r19
    11f6:	56 0b       	sbc	r21, r22
    11f8:	c9 0b       	sbc	r28, r25
    11fa:	d0 09       	sbc	r29, r0
    11fc:	c0 f7       	brcc	.-16     	; 0x11ee <__ftoa_engine+0x10a>
    11fe:	e1 0c       	add	r14, r1
    1200:	f1 1e       	adc	r15, r17
    1202:	43 1f       	adc	r20, r19
    1204:	56 1f       	adc	r21, r22
    1206:	c9 1f       	adc	r28, r25
    1208:	d0 1d       	adc	r29, r0
    120a:	7e f4       	brtc	.+30     	; 0x122a <__ftoa_engine+0x146>
    120c:	70 33       	cpi	r23, 0x30	; 48
    120e:	11 f4       	brne	.+4      	; 0x1214 <__ftoa_engine+0x130>
    1210:	8a 95       	dec	r24
    1212:	e6 cf       	rjmp	.-52     	; 0x11e0 <__ftoa_engine+0xfc>
    1214:	e8 94       	clt
    1216:	01 50       	subi	r16, 0x01	; 1
    1218:	30 f0       	brcs	.+12     	; 0x1226 <__ftoa_engine+0x142>
    121a:	08 0f       	add	r16, r24
    121c:	0a f4       	brpl	.+2      	; 0x1220 <__ftoa_engine+0x13c>
    121e:	00 27       	eor	r16, r16
    1220:	02 17       	cp	r16, r18
    1222:	08 f4       	brcc	.+2      	; 0x1226 <__ftoa_engine+0x142>
    1224:	20 2f       	mov	r18, r16
    1226:	23 95       	inc	r18
    1228:	02 2f       	mov	r16, r18
    122a:	7a 33       	cpi	r23, 0x3A	; 58
    122c:	28 f0       	brcs	.+10     	; 0x1238 <__ftoa_engine+0x154>
    122e:	79 e3       	ldi	r23, 0x39	; 57
    1230:	7d 93       	st	X+, r23
    1232:	2a 95       	dec	r18
    1234:	e9 f7       	brne	.-6      	; 0x1230 <__ftoa_engine+0x14c>
    1236:	10 c0       	rjmp	.+32     	; 0x1258 <__ftoa_engine+0x174>
    1238:	7d 93       	st	X+, r23
    123a:	2a 95       	dec	r18
    123c:	89 f6       	brne	.-94     	; 0x11e0 <__ftoa_engine+0xfc>
    123e:	06 94       	lsr	r0
    1240:	97 95       	ror	r25
    1242:	67 95       	ror	r22
    1244:	37 95       	ror	r19
    1246:	17 95       	ror	r17
    1248:	17 94       	ror	r1
    124a:	e1 18       	sub	r14, r1
    124c:	f1 0a       	sbc	r15, r17
    124e:	43 0b       	sbc	r20, r19
    1250:	56 0b       	sbc	r21, r22
    1252:	c9 0b       	sbc	r28, r25
    1254:	d0 09       	sbc	r29, r0
    1256:	98 f0       	brcs	.+38     	; 0x127e <__ftoa_engine+0x19a>
    1258:	23 95       	inc	r18
    125a:	7e 91       	ld	r23, -X
    125c:	73 95       	inc	r23
    125e:	7a 33       	cpi	r23, 0x3A	; 58
    1260:	08 f0       	brcs	.+2      	; 0x1264 <__ftoa_engine+0x180>
    1262:	70 e3       	ldi	r23, 0x30	; 48
    1264:	7c 93       	st	X, r23
    1266:	20 13       	cpse	r18, r16
    1268:	b8 f7       	brcc	.-18     	; 0x1258 <__ftoa_engine+0x174>
    126a:	7e 91       	ld	r23, -X
    126c:	70 61       	ori	r23, 0x10	; 16
    126e:	7d 93       	st	X+, r23
    1270:	30 f0       	brcs	.+12     	; 0x127e <__ftoa_engine+0x19a>
    1272:	83 95       	inc	r24
    1274:	71 e3       	ldi	r23, 0x31	; 49
    1276:	7d 93       	st	X+, r23
    1278:	70 e3       	ldi	r23, 0x30	; 48
    127a:	2a 95       	dec	r18
    127c:	e1 f7       	brne	.-8      	; 0x1276 <__ftoa_engine+0x192>
    127e:	11 24       	eor	r1, r1
    1280:	ef 90       	pop	r14
    1282:	ff 90       	pop	r15
    1284:	0f 91       	pop	r16
    1286:	1f 91       	pop	r17
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	99 27       	eor	r25, r25
    128e:	87 fd       	sbrc	r24, 7
    1290:	90 95       	com	r25
    1292:	08 95       	ret

00001294 <strrev>:
    1294:	dc 01       	movw	r26, r24
    1296:	fc 01       	movw	r30, r24
    1298:	67 2f       	mov	r22, r23
    129a:	71 91       	ld	r23, Z+
    129c:	77 23       	and	r23, r23
    129e:	e1 f7       	brne	.-8      	; 0x1298 <strrev+0x4>
    12a0:	32 97       	sbiw	r30, 0x02	; 2
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <strrev+0x18>
    12a4:	7c 91       	ld	r23, X
    12a6:	6d 93       	st	X+, r22
    12a8:	70 83       	st	Z, r23
    12aa:	62 91       	ld	r22, -Z
    12ac:	ae 17       	cp	r26, r30
    12ae:	bf 07       	cpc	r27, r31
    12b0:	c8 f3       	brcs	.-14     	; 0x12a4 <strrev+0x10>
    12b2:	08 95       	ret

000012b4 <_exit>:
    12b4:	f8 94       	cli

000012b6 <__stop_program>:
    12b6:	ff cf       	rjmp	.-2      	; 0x12b6 <__stop_program>
