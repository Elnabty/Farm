
Farm_01062019_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a6  008000a6  000014aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001856  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7e  00000000  00000000  00002e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be5  00000000  00000000  000039d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000045bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8d  00000000  00000000  00004cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_13>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__vector_9+0x20>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <main+0x96>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <dht_getdata_dht_22+0x9a>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <dht_getdata_dht_11+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e0 ed       	ldi	r30, 0xD0	; 208
     162:	f3 e1       	ldi	r31, 0x13	; 19
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a6 3a       	cpi	r26, 0xA6	; 166
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	a6 ea       	ldi	r26, 0xA6	; 166
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	aa 3a       	cpi	r26, 0xAA	; 170
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 02 03 	call	0x604	; 0x604 <main>
     184:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <dht_getdata_dht_11>:

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     18c:	bf 92       	push	r11
     18e:	cf 92       	push	r12
     190:	df 92       	push	r13
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <dht_getdata_dht_11+0x14>
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <dht_getdata_dht_11+0x16>
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     1a8:	fe 01       	movw	r30, r28
     1aa:	31 96       	adiw	r30, 0x01	; 1
     1ac:	25 e0       	ldi	r18, 0x05	; 5
     1ae:	df 01       	movw	r26, r30
     1b0:	1d 92       	st	X+, r1
     1b2:	2a 95       	dec	r18
     1b4:	e9 f7       	brne	.-6      	; 0x1b0 <dht_getdata_dht_11+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
     1b6:	2a b3       	in	r18, 0x1a	; 26
     1b8:	e1 e0       	ldi	r30, 0x01	; 1
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	04 2e       	mov	r0, r20
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <dht_getdata_dht_11+0x38>
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	0a 94       	dec	r0
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <dht_getdata_dht_11+0x34>
     1c8:	2e 2b       	or	r18, r30
     1ca:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //high
     1cc:	2b b3       	in	r18, 0x1b	; 27
     1ce:	2e 2b       	or	r18, r30
     1d0:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d2:	bf ef       	ldi	r27, 0xFF	; 255
     1d4:	2f e5       	ldi	r18, 0x5F	; 95
     1d6:	33 e0       	ldi	r19, 0x03	; 3
     1d8:	b1 50       	subi	r27, 0x01	; 1
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	30 40       	sbci	r19, 0x00	; 0
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <dht_getdata_dht_11+0x4c>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <dht_getdata_dht_11+0x56>
     1e2:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
     1e4:	3b b3       	in	r19, 0x1b	; 27
     1e6:	2e 2f       	mov	r18, r30
     1e8:	20 95       	com	r18
     1ea:	32 23       	and	r19, r18
     1ec:	3b bb       	out	0x1b, r19	; 27
     1ee:	a6 e6       	ldi	r26, 0x66	; 102
     1f0:	b2 ec       	ldi	r27, 0xC2	; 194
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <dht_getdata_dht_11+0x66>
     1f6:	00 00       	nop
	
		_delay_ms(18);
	
	
	
	DHT_PORT |= (1<<channel); //high
     1f8:	3b b3       	in	r19, 0x1b	; 27
     1fa:	3e 2b       	or	r19, r30
     1fc:	3b bb       	out	0x1b, r19	; 27
	DHT_DDR &= ~(1<<channel); //input
     1fe:	3a b3       	in	r19, 0x1a	; 26
     200:	23 23       	and	r18, r19
     202:	2a bb       	out	0x1a, r18	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     204:	b3 e9       	ldi	r27, 0x93	; 147
     206:	ba 95       	dec	r27
     208:	f1 f7       	brne	.-4      	; 0x206 <dht_getdata_dht_11+0x7a>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <dht_getdata_dht_11+0x80>
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
     20c:	29 b3       	in	r18, 0x19	; 25
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	04 2e       	mov	r0, r20
     212:	02 c0       	rjmp	.+4      	; 0x218 <dht_getdata_dht_11+0x8c>
     214:	35 95       	asr	r19
     216:	27 95       	ror	r18
     218:	0a 94       	dec	r0
     21a:	e2 f7       	brpl	.-8      	; 0x214 <dht_getdata_dht_11+0x88>
     21c:	20 fd       	sbrc	r18, 0
     21e:	71 c0       	rjmp	.+226    	; 0x302 <dht_getdata_dht_11+0x176>
     220:	ad ed       	ldi	r26, 0xDD	; 221
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	11 97       	sbiw	r26, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <dht_getdata_dht_11+0x98>
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
     228:	29 b3       	in	r18, 0x19	; 25
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <dht_getdata_dht_11+0xa6>
     22e:	35 95       	asr	r19
     230:	27 95       	ror	r18
     232:	4a 95       	dec	r20
     234:	e2 f7       	brpl	.-8      	; 0x22e <dht_getdata_dht_11+0xa2>
     236:	20 ff       	sbrs	r18, 0
     238:	66 c0       	rjmp	.+204    	; 0x306 <dht_getdata_dht_11+0x17a>
     23a:	ad ed       	ldi	r26, 0xDD	; 221
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	11 97       	sbiw	r26, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <dht_getdata_dht_11+0xb2>
     242:	9e 01       	movw	r18, r28
     244:	2f 5f       	subi	r18, 0xFF	; 255
     246:	3f 4f       	sbci	r19, 0xFF	; 255
     248:	79 01       	movw	r14, r18
     24a:	6e 01       	movw	r12, r28
     24c:	36 e0       	ldi	r19, 0x06	; 6
     24e:	c3 0e       	add	r12, r19
     250:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
     252:	01 e0       	ldi	r16, 0x01	; 1
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	32 c0       	rjmp	.+100    	; 0x2bc <dht_getdata_dht_11+0x130>
     258:	41 50       	subi	r20, 0x01	; 1
     25a:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     25c:	19 f4       	brne	.+6      	; 0x264 <dht_getdata_dht_11+0xd8>
     25e:	55 c0       	rjmp	.+170    	; 0x30a <dht_getdata_dht_11+0x17e>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     260:	49 ec       	ldi	r20, 0xC9	; 201
     262:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
     264:	29 b3       	in	r18, 0x19	; 25
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	2e 23       	and	r18, r30
     26a:	3f 23       	and	r19, r31
     26c:	23 2b       	or	r18, r19
     26e:	a1 f3       	breq	.-24     	; 0x258 <dht_getdata_dht_11+0xcc>
     270:	4e e6       	ldi	r20, 0x6E	; 110
     272:	4a 95       	dec	r20
     274:	f1 f7       	brne	.-4      	; 0x272 <dht_getdata_dht_11+0xe6>
     276:	00 c0       	rjmp	.+0      	; 0x278 <dht_getdata_dht_11+0xec>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
     278:	29 b3       	in	r18, 0x19	; 25
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	2e 23       	and	r18, r30
     27e:	3f 23       	and	r19, r31
     280:	23 2b       	or	r18, r19
     282:	41 f0       	breq	.+16     	; 0x294 <dht_getdata_dht_11+0x108>
				result |= (1<<(7-i));
     284:	98 01       	movw	r18, r16
     286:	0a 2e       	mov	r0, r26
     288:	02 c0       	rjmp	.+4      	; 0x28e <dht_getdata_dht_11+0x102>
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	0a 94       	dec	r0
     290:	e2 f7       	brpl	.-8      	; 0x28a <dht_getdata_dht_11+0xfe>
     292:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     294:	49 ec       	ldi	r20, 0xC9	; 201
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <dht_getdata_dht_11+0x114>
     29a:	41 50       	subi	r20, 0x01	; 1
     29c:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     29e:	b9 f1       	breq	.+110    	; 0x30e <dht_getdata_dht_11+0x182>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     2a0:	29 b3       	in	r18, 0x19	; 25
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	2e 23       	and	r18, r30
     2a6:	3f 23       	and	r19, r31
     2a8:	23 2b       	or	r18, r19
     2aa:	b9 f7       	brne	.-18     	; 0x29a <dht_getdata_dht_11+0x10e>
     2ac:	11 97       	sbiw	r26, 0x01	; 1
     2ae:	c0 f6       	brcc	.-80     	; 0x260 <dht_getdata_dht_11+0xd4>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     2b0:	d7 01       	movw	r26, r14
     2b2:	bd 92       	st	X+, r11
     2b4:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     2b6:	ca 16       	cp	r12, r26
     2b8:	db 06       	cpc	r13, r27
     2ba:	21 f0       	breq	.+8      	; 0x2c4 <dht_getdata_dht_11+0x138>

/*
 * get data from sensor
 */

int8_t dht_getdata_dht_11(int8_t *temperature, int8_t *humidity,uint8_t channel) {
     2bc:	a7 e0       	ldi	r26, 0x07	; 7
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	b1 2c       	mov	r11, r1
     2c2:	ce cf       	rjmp	.-100    	; 0x260 <dht_getdata_dht_11+0xd4>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
     2c4:	2a b3       	in	r18, 0x1a	; 26
     2c6:	2e 2b       	or	r18, r30
     2c8:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //low
     2ca:	2b b3       	in	r18, 0x1b	; 27
     2cc:	e2 2b       	or	r30, r18
     2ce:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d0:	bf ef       	ldi	r27, 0xFF	; 255
     2d2:	ef e5       	ldi	r30, 0x5F	; 95
     2d4:	f3 e0       	ldi	r31, 0x03	; 3
     2d6:	b1 50       	subi	r27, 0x01	; 1
     2d8:	e0 40       	sbci	r30, 0x00	; 0
     2da:	f0 40       	sbci	r31, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <dht_getdata_dht_11+0x14a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <dht_getdata_dht_11+0x154>
     2e0:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     2e2:	49 81       	ldd	r20, Y+1	; 0x01
     2e4:	5b 81       	ldd	r21, Y+3	; 0x03
     2e6:	2a 81       	ldd	r18, Y+2	; 0x02
     2e8:	24 0f       	add	r18, r20
     2ea:	25 0f       	add	r18, r21
     2ec:	3c 81       	ldd	r19, Y+4	; 0x04
     2ee:	23 0f       	add	r18, r19
     2f0:	3d 81       	ldd	r19, Y+5	; 0x05
     2f2:	23 13       	cpse	r18, r19
     2f4:	0e c0       	rjmp	.+28     	; 0x312 <dht_getdata_dht_11+0x186>
		//return temperature and humidity
		
			*temperature = bits[2];
     2f6:	dc 01       	movw	r26, r24
     2f8:	5c 93       	st	X, r21
			*humidity = bits[0];
     2fa:	fb 01       	movw	r30, r22
     2fc:	40 83       	st	Z, r20
		



		
		return 0;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	09 c0       	rjmp	.+18     	; 0x314 <dht_getdata_dht_11+0x188>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	07 c0       	rjmp	.+14     	; 0x314 <dht_getdata_dht_11+0x188>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	05 c0       	rjmp	.+10     	; 0x314 <dht_getdata_dht_11+0x188>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	03 c0       	rjmp	.+6      	; 0x314 <dht_getdata_dht_11+0x188>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	01 c0       	rjmp	.+2      	; 0x314 <dht_getdata_dht_11+0x188>

		
		return 0;
	}

	return -1;
     312:	8f ef       	ldi	r24, 0xFF	; 255
}
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	08 95       	ret

00000332 <dht_getdata_dht_22>:


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     332:	bf 92       	push	r11
     334:	cf 92       	push	r12
     336:	df 92       	push	r13
     338:	ef 92       	push	r14
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	00 d0       	rcall	.+0      	; 0x346 <dht_getdata_dht_22+0x14>
     346:	00 d0       	rcall	.+0      	; 0x348 <dht_getdata_dht_22+0x16>
     348:	1f 92       	push	r1
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62

	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     34e:	fe 01       	movw	r30, r28
     350:	31 96       	adiw	r30, 0x01	; 1
     352:	25 e0       	ldi	r18, 0x05	; 5
     354:	df 01       	movw	r26, r30
     356:	1d 92       	st	X+, r1
     358:	2a 95       	dec	r18
     35a:	e9 f7       	brne	.-6      	; 0x356 <dht_getdata_dht_22+0x24>

	//reset port
	DHT_DDR |= (1<<channel); //output
     35c:	2a b3       	in	r18, 0x1a	; 26
     35e:	e1 e0       	ldi	r30, 0x01	; 1
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	04 2e       	mov	r0, r20
     364:	02 c0       	rjmp	.+4      	; 0x36a <dht_getdata_dht_22+0x38>
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <dht_getdata_dht_22+0x34>
     36e:	2e 2b       	or	r18, r30
     370:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //high
     372:	2b b3       	in	r18, 0x1b	; 27
     374:	2e 2b       	or	r18, r30
     376:	2b bb       	out	0x1b, r18	; 27
     378:	bf ef       	ldi	r27, 0xFF	; 255
     37a:	2f e5       	ldi	r18, 0x5F	; 95
     37c:	33 e0       	ldi	r19, 0x03	; 3
     37e:	b1 50       	subi	r27, 0x01	; 1
     380:	20 40       	sbci	r18, 0x00	; 0
     382:	30 40       	sbci	r19, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <dht_getdata_dht_22+0x4c>
     386:	00 c0       	rjmp	.+0      	; 0x388 <dht_getdata_dht_22+0x56>
     388:	00 00       	nop
	_delay_ms(100);

	//send request
	DHT_PORT &= ~(1<<channel); //low
     38a:	3b b3       	in	r19, 0x1b	; 27
     38c:	2e 2f       	mov	r18, r30
     38e:	20 95       	com	r18
     390:	32 23       	and	r19, r18
     392:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	a6 e6       	ldi	r26, 0x66	; 102
     396:	b5 e0       	ldi	r27, 0x05	; 5
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <dht_getdata_dht_22+0x66>
     39c:	00 00       	nop

		_delay_us(500);
	
	
	
	DHT_PORT |= (1<<channel); //high
     39e:	3b b3       	in	r19, 0x1b	; 27
     3a0:	3e 2b       	or	r19, r30
     3a2:	3b bb       	out	0x1b, r19	; 27
	DHT_DDR &= ~(1<<channel); //input
     3a4:	3a b3       	in	r19, 0x1a	; 26
     3a6:	23 23       	and	r18, r19
     3a8:	2a bb       	out	0x1a, r18	; 26
     3aa:	b3 e9       	ldi	r27, 0x93	; 147
     3ac:	ba 95       	dec	r27
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <dht_getdata_dht_22+0x7a>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <dht_getdata_dht_22+0x80>
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
     3b2:	29 b3       	in	r18, 0x19	; 25
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	04 2e       	mov	r0, r20
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <dht_getdata_dht_22+0x8c>
     3ba:	35 95       	asr	r19
     3bc:	27 95       	ror	r18
     3be:	0a 94       	dec	r0
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <dht_getdata_dht_22+0x88>
     3c2:	20 fd       	sbrc	r18, 0
     3c4:	ac c0       	rjmp	.+344    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     3c6:	ad ed       	ldi	r26, 0xDD	; 221
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <dht_getdata_dht_22+0x98>
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
     3ce:	29 b3       	in	r18, 0x19	; 25
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <dht_getdata_dht_22+0xa6>
     3d4:	35 95       	asr	r19
     3d6:	27 95       	ror	r18
     3d8:	4a 95       	dec	r20
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <dht_getdata_dht_22+0xa2>
     3dc:	20 ff       	sbrs	r18, 0
     3de:	a1 c0       	rjmp	.+322    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     3e0:	ad ed       	ldi	r26, 0xDD	; 221
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	11 97       	sbiw	r26, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <dht_getdata_dht_22+0xb2>
     3e8:	9e 01       	movw	r18, r28
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	79 01       	movw	r14, r18
     3f0:	6e 01       	movw	r12, r28
     3f2:	36 e0       	ldi	r19, 0x06	; 6
     3f4:	c3 0e       	add	r12, r19
     3f6:	d1 1c       	adc	r13, r1
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
     3f8:	01 e0       	ldi	r16, 0x01	; 1
     3fa:	10 e0       	ldi	r17, 0x00	; 0
     3fc:	33 c0       	rjmp	.+102    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     3fe:	41 50       	subi	r20, 0x01	; 1
     400:	51 09       	sbc	r21, r1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     402:	19 f4       	brne	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     404:	90 c0       	rjmp	.+288    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>

	return -1;
}


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     406:	49 ec       	ldi	r20, 0xC9	; 201
     408:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
     40a:	29 b3       	in	r18, 0x19	; 25
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	2e 23       	and	r18, r30
     410:	3f 23       	and	r19, r31
     412:	23 2b       	or	r18, r19
     414:	a1 f3       	breq	.-24     	; 0x3fe <dht_getdata_dht_22+0xcc>
     416:	4e e6       	ldi	r20, 0x6E	; 110
     418:	4a 95       	dec	r20
     41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
     41e:	29 b3       	in	r18, 0x19	; 25
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	2e 23       	and	r18, r30
     424:	3f 23       	and	r19, r31
     426:	23 2b       	or	r18, r19
     428:	41 f0       	breq	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			result |= (1<<(7-i));
     42a:	98 01       	movw	r18, r16
     42c:	0a 2e       	mov	r0, r26
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	22 0f       	add	r18, r18
     432:	33 1f       	adc	r19, r19
     434:	0a 94       	dec	r0
     436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	b2 2a       	or	r11, r18
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     43a:	49 ec       	ldi	r20, 0xC9	; 201
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     440:	41 50       	subi	r20, 0x01	; 1
     442:	51 09       	sbc	r21, r1
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
     444:	09 f4       	brne	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	71 c0       	rjmp	.+226    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			}
			_delay_us(30);
			if(DHT_PIN & (1<<channel)) //if input is high after 30 us, get result
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
     448:	29 b3       	in	r18, 0x19	; 25
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	2e 23       	and	r18, r30
     44e:	3f 23       	and	r19, r31
     450:	23 2b       	or	r18, r19
     452:	b1 f7       	brne	.-20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     454:	11 97       	sbiw	r26, 0x01	; 1
     456:	b8 f6       	brcc	.-82     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     458:	d7 01       	movw	r26, r14
     45a:	bd 92       	st	X+, r11
     45c:	7d 01       	movw	r14, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     45e:	ca 16       	cp	r12, r26
     460:	db 06       	cpc	r13, r27
     462:	21 f0       	breq	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

	return -1;
}


int8_t dht_getdata_dht_22(float *temperature, float *humidity,uint8_t channel) {
     464:	a7 e0       	ldi	r26, 0x07	; 7
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	b1 2c       	mov	r11, r1
     46a:	cd cf       	rjmp	.-102    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		}
		bits[j] = result;
	}

	//reset port
	DHT_DDR |= (1<<channel); //output
     46c:	2a b3       	in	r18, 0x1a	; 26
     46e:	2e 2b       	or	r18, r30
     470:	2a bb       	out	0x1a, r18	; 26
	DHT_PORT |= (1<<channel); //low
     472:	2b b3       	in	r18, 0x1b	; 27
     474:	e2 2b       	or	r30, r18
     476:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     478:	bf ef       	ldi	r27, 0xFF	; 255
     47a:	ef e5       	ldi	r30, 0x5F	; 95
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	b1 50       	subi	r27, 0x01	; 1
     480:	e0 40       	sbci	r30, 0x00	; 0
     482:	f0 40       	sbci	r31, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     488:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     48a:	59 81       	ldd	r21, Y+1	; 0x01
     48c:	0a 81       	ldd	r16, Y+2	; 0x02
     48e:	4b 81       	ldd	r20, Y+3	; 0x03
     490:	2c 81       	ldd	r18, Y+4	; 0x04
     492:	35 2f       	mov	r19, r21
     494:	30 0f       	add	r19, r16
     496:	34 0f       	add	r19, r20
     498:	32 0f       	add	r19, r18
     49a:	ed 81       	ldd	r30, Y+5	; 0x05
     49c:	3e 13       	cpse	r19, r30
     49e:	47 c0       	rjmp	.+142    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     4a0:	7b 01       	movw	r14, r22
     4a2:	6c 01       	movw	r12, r24



			uint16_t rawhumidity = bits[0]<<8 | bits[1];
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	15 2b       	or	r17, r21
			uint16_t rawtemperature = bits[2]<<8 | bits[3];
     4a8:	62 2f       	mov	r22, r18
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	74 2b       	or	r23, r20
			if(rawtemperature & 0x8000) {
     4ae:	77 23       	and	r23, r23
     4b0:	a4 f4       	brge	.+40     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
     4b2:	7f 77       	andi	r23, 0x7F	; 127
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e2       	ldi	r20, 0x20	; 32
     4c2:	51 e4       	ldi	r21, 0x41	; 65
     4c4:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divsf3>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	b0 58       	subi	r27, 0x80	; 128
     4ce:	f6 01       	movw	r30, r12
     4d0:	80 83       	st	Z, r24
     4d2:	91 83       	std	Z+1, r25	; 0x01
     4d4:	a2 83       	std	Z+2, r26	; 0x02
     4d6:	b3 83       	std	Z+3, r27	; 0x03
     4d8:	10 c0       	rjmp	.+32     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
				} else {
				*temperature = (float)(rawtemperature)/10.0;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e2       	ldi	r20, 0x20	; 32
     4e8:	51 e4       	ldi	r21, 0x41	; 65
     4ea:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divsf3>
     4ee:	d6 01       	movw	r26, r12
     4f0:	6d 93       	st	X+, r22
     4f2:	7d 93       	st	X+, r23
     4f4:	8d 93       	st	X+, r24
     4f6:	9c 93       	st	X, r25
     4f8:	13 97       	sbiw	r26, 0x03	; 3
			}
			*humidity = (float)(rawhumidity)/10.0;
     4fa:	b8 01       	movw	r22, r16
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e2       	ldi	r20, 0x20	; 32
     50a:	51 e4       	ldi	r21, 0x41	; 65
     50c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divsf3>
     510:	f7 01       	movw	r30, r14
     512:	60 83       	st	Z, r22
     514:	71 83       	std	Z+1, r23	; 0x01
     516:	82 83       	std	Z+2, r24	; 0x02
     518:	93 83       	std	Z+3, r25	; 0x03
		

		
		return 0;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	09 c0       	rjmp	.+18     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	DHT_DDR &= ~(1<<channel); //input
	_delay_us(40);

	//check start condition 1
	if((DHT_PIN & (1<<channel))) {
		return -1;
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	07 c0       	rjmp	.+14     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
	}
	_delay_us(80);
	//check start condition 2
	if(!(DHT_PIN & (1<<channel))) {
		return -1;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	05 c0       	rjmp	.+10     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(DHT_PIN & (1<<channel))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	03 c0       	rjmp	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
			result |= (1<<(7-i));
			timeoutcounter = 0;
			while(DHT_PIN & (1<<channel)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > DHT_TIMEOUT) {
					return -1; //timeout
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	01 c0       	rjmp	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>

		
		return 0;
	}

	return -1;
     52e:	8f ef       	ldi	r24, 0xFF	; 255
}
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	bf 90       	pop	r11
     54c:	08 95       	ret

0000054e <relayModuleControl>:
 *  Author: aelnabty
 */ 
#include "GPIOcontrol.h"

void relayModuleControl(unsigned char data)
{
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	00 d0       	rcall	.+0      	; 0x554 <relayModuleControl+0x6>
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
	uartPacket packet;
	
	
	packetSplitter(data, &packet);
     558:	be 01       	movw	r22, r28
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 b4 04 	call	0x968	; 0x968 <packetSplitter>
	
	switch(packet.id)
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	83 30       	cpi	r24, 0x03	; 3
     566:	11 f1       	breq	.+68     	; 0x5ac <relayModuleControl+0x5e>
     568:	28 f4       	brcc	.+10     	; 0x574 <relayModuleControl+0x26>
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	49 f0       	breq	.+18     	; 0x580 <relayModuleControl+0x32>
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	91 f0       	breq	.+36     	; 0x596 <relayModuleControl+0x48>
     572:	3f c0       	rjmp	.+126    	; 0x5f2 <relayModuleControl+0xa4>
     574:	85 30       	cpi	r24, 0x05	; 5
     576:	81 f1       	breq	.+96     	; 0x5d8 <relayModuleControl+0x8a>
     578:	f8 f0       	brcs	.+62     	; 0x5b8 <relayModuleControl+0x6a>
     57a:	86 30       	cpi	r24, 0x06	; 6
     57c:	a1 f1       	breq	.+104    	; 0x5e6 <relayModuleControl+0x98>
     57e:	39 c0       	rjmp	.+114    	; 0x5f2 <relayModuleControl+0xa4>
	{
		case FAN_PACKET:
						FAN_POS(packet.data);
     580:	28 b3       	in	r18, 0x18	; 24
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	30 e1       	ldi	r19, 0x10	; 16
     586:	93 9f       	mul	r25, r19
     588:	c0 01       	movw	r24, r0
     58a:	11 24       	eor	r1, r1
     58c:	92 2f       	mov	r25, r18
     58e:	9f 7e       	andi	r25, 0xEF	; 239
     590:	89 2b       	or	r24, r25
     592:	88 bb       	out	0x18, r24	; 24
						break;
     594:	32 c0       	rjmp	.+100    	; 0x5fa <relayModuleControl+0xac>
		case SELONOID_PACKET: 
						SOL_POS(packet.data);
     596:	25 b3       	in	r18, 0x15	; 21
     598:	9a 81       	ldd	r25, Y+2	; 0x02
     59a:	30 e1       	ldi	r19, 0x10	; 16
     59c:	93 9f       	mul	r25, r19
     59e:	c0 01       	movw	r24, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	92 2f       	mov	r25, r18
     5a4:	9f 70       	andi	r25, 0x0F	; 15
     5a6:	89 2b       	or	r24, r25
     5a8:	85 bb       	out	0x15, r24	; 21
						break;
     5aa:	27 c0       	rjmp	.+78     	; 0x5fa <relayModuleControl+0xac>

		case MEDICINE_PACKET: 
						MED_POS(packet.data);
     5ac:	85 b3       	in	r24, 0x15	; 21
     5ae:	80 7f       	andi	r24, 0xF0	; 240
     5b0:	9a 81       	ldd	r25, Y+2	; 0x02
     5b2:	89 2b       	or	r24, r25
     5b4:	85 bb       	out	0x15, r24	; 21
						break;
     5b6:	21 c0       	rjmp	.+66     	; 0x5fa <relayModuleControl+0xac>

		case LIGHT_PACKET: 
						LIGHT_1_POS(packet.data);
     5b8:	88 b3       	in	r24, 0x18	; 24
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	99 0f       	add	r25, r25
     5be:	99 0f       	add	r25, r25
     5c0:	8b 7f       	andi	r24, 0xFB	; 251
     5c2:	89 2b       	or	r24, r25
     5c4:	88 bb       	out	0x18, r24	; 24
						LIGHT_2_POS(packet.data);
     5c6:	88 b3       	in	r24, 0x18	; 24
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	99 0f       	add	r25, r25
     5cc:	99 0f       	add	r25, r25
     5ce:	99 0f       	add	r25, r25
     5d0:	87 7f       	andi	r24, 0xF7	; 247
     5d2:	89 2b       	or	r24, r25
     5d4:	88 bb       	out	0x18, r24	; 24
						break;
     5d6:	11 c0       	rjmp	.+34     	; 0x5fa <relayModuleControl+0xac>
						
		case VENTILATION_PACKET: 
						VENTILATION_POS(packet.data);
     5d8:	88 b3       	in	r24, 0x18	; 24
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	99 0f       	add	r25, r25
     5de:	8d 7f       	andi	r24, 0xFD	; 253
     5e0:	89 2b       	or	r24, r25
     5e2:	88 bb       	out	0x18, r24	; 24
						break;
     5e4:	0a c0       	rjmp	.+20     	; 0x5fa <relayModuleControl+0xac>
						
		case FLYMED_PACKET:
						FLYMED_POS(packet.data);
     5e6:	88 b3       	in	r24, 0x18	; 24
     5e8:	8e 7f       	andi	r24, 0xFE	; 254
     5ea:	9a 81       	ldd	r25, Y+2	; 0x02
     5ec:	89 2b       	or	r24, r25
     5ee:	88 bb       	out	0x18, r24	; 24
						break;
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <relayModuleControl+0xac>
						
		default: UART_string_tx("wrong ID")	;																					
     5f2:	82 e8       	ldi	r24, 0x82	; 130
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
						
	}
	
}
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <main>:
volatile unsigned char gUartRFlag=0;
volatile unsigned char gUartData=0;
extern volatile unsigned char oneSec;
uint8_t manualflag = 0;
int main(void)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	af 97       	sbiw	r28, 0x2f	; 47
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
	DDRB_CONFIG;
     618:	8f e1       	ldi	r24, 0x1F	; 31
     61a:	87 bb       	out	0x17, r24	; 23
	PORTB_COMFIG;
     61c:	18 ba       	out	0x18, r1	; 24
	DDRC_CONFIG;
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	84 bb       	out	0x14, r24	; 20
	PORTC_COMFIG;
     622:	15 ba       	out	0x15, r1	; 21
	timer1_init();
     624:	0e 94 bd 04 	call	0x97a	; 0x97a <timer1_init>
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
	
	
     UART_int();
     628:	0e 94 de 04 	call	0x9bc	; 0x9bc <UART_int>
     62c:	8f ef       	ldi	r24, 0xFF	; 255
     62e:	95 e3       	ldi	r25, 0x35	; 53
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <main+0x2c>
     634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x32>
     636:	00 00       	nop
	_delay_ms(5);
	

		float ftemperature = 0;
     638:	19 82       	std	Y+1, r1	; 0x01
     63a:	1a 82       	std	Y+2, r1	; 0x02
     63c:	1b 82       	std	Y+3, r1	; 0x03
     63e:	1c 82       	std	Y+4, r1	; 0x04
		float fhumidity = 0;
     640:	1d 82       	std	Y+5, r1	; 0x05
     642:	1e 82       	std	Y+6, r1	; 0x06
     644:	1f 82       	std	Y+7, r1	; 0x07
     646:	18 86       	std	Y+8, r1	; 0x08
		int8_t temperature = 0;
     648:	19 86       	std	Y+9, r1	; 0x09
		int8_t humidity = 0;
     64a:	1a 86       	std	Y+10, r1	; 0x0a
		
	unsigned char tempString[] = {'T','e','m','p',' ','=',' ','\0'};
     64c:	88 e0       	ldi	r24, 0x08	; 8
     64e:	e0 e6       	ldi	r30, 0x60	; 96
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	de 01       	movw	r26, r28
     654:	1b 96       	adiw	r26, 0x0b	; 11
     656:	01 90       	ld	r0, Z+
     658:	0d 92       	st	X+, r0
     65a:	8a 95       	dec	r24
     65c:	e1 f7       	brne	.-8      	; 0x656 <main+0x52>
	unsigned char humString[] = {'H','u','m','d',' ','=',' ','\0'};
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	e8 e6       	ldi	r30, 0x68	; 104
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	de 01       	movw	r26, r28
     666:	53 96       	adiw	r26, 0x13	; 19
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <main+0x64>
	unsigned char sensor0[] = {'S','e','n','s','o','r','1',' ','\0'};
     670:	89 e0       	ldi	r24, 0x09	; 9
     672:	e0 e7       	ldi	r30, 0x70	; 112
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	de 01       	movw	r26, r28
     678:	5b 96       	adiw	r26, 0x1b	; 27
     67a:	01 90       	ld	r0, Z+
     67c:	0d 92       	st	X+, r0
     67e:	8a 95       	dec	r24
     680:	e1 f7       	brne	.-8      	; 0x67a <main+0x76>
	unsigned char sensor1[] = {'S','e','n','s','o','r','2',' ','\0'};			
     682:	89 e0       	ldi	r24, 0x09	; 9
     684:	e9 e7       	ldi	r30, 0x79	; 121
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	de 01       	movw	r26, r28
     68a:	94 96       	adiw	r26, 0x24	; 36
     68c:	01 90       	ld	r0, Z+
     68e:	0d 92       	st	X+, r0
     690:	8a 95       	dec	r24
     692:	e1 f7       	brne	.-8      	; 0x68c <main+0x88>
	unsigned char buffer[3]; //used in itoa 

	sei();
     694:	78 94       	sei
     696:	9f ef       	ldi	r25, 0xFF	; 255
     698:	2f eb       	ldi	r18, 0xBF	; 191
     69a:	81 e2       	ldi	r24, 0x21	; 33
     69c:	91 50       	subi	r25, 0x01	; 1
     69e:	20 40       	sbci	r18, 0x00	; 0
     6a0:	80 40       	sbci	r24, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <main+0x98>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <main+0xa2>
     6a6:	00 00       	nop
	
	_delay_ms(1000);
	oldTime = oneSec;
     6a8:	e0 90 a9 00 	lds	r14, 0x00A9	; 0x8000a9 <oneSec>
	PORTB_COMFIG;
	DDRC_CONFIG;
	PORTC_COMFIG;
	timer1_init();
	unsigned char oldTime = 0;
	unsigned char five_sec = 0;
     6ac:	f1 2c       	mov	r15, r1
	
	_delay_ms(1000);
	oldTime = oneSec;
	while(1){
		
		if(oneSec != oldTime)
     6ae:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <oneSec>
     6b2:	e8 16       	cp	r14, r24
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <main+0xb4>
     6b6:	68 c0       	rjmp	.+208    	; 0x788 <main+0x184>
		{
			oldTime = oneSec;
     6b8:	e0 90 a9 00 	lds	r14, 0x00A9	; 0x8000a9 <oneSec>
			
			if(five_sec == 5u)
     6bc:	95 e0       	ldi	r25, 0x05	; 5
     6be:	f9 12       	cpse	r15, r25
     6c0:	61 c0       	rjmp	.+194    	; 0x784 <main+0x180>
			{		
					cli();
     6c2:	f8 94       	cli
					dht_getdata_dht_22(&ftemperature,&fhumidity,0);
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	be 01       	movw	r22, r28
     6c8:	6b 5f       	subi	r22, 0xFB	; 251
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	0e 94 99 01 	call	0x332	; 0x332 <dht_getdata_dht_22>
					dtostrf(ftemperature, 3, 3, buffer);
     6d4:	69 81       	ldd	r22, Y+1	; 0x01
     6d6:	7a 81       	ldd	r23, Y+2	; 0x02
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	8e 01       	movw	r16, r28
     6de:	03 5d       	subi	r16, 0xD3	; 211
     6e0:	1f 4f       	sbci	r17, 0xFF	; 255
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	43 e0       	ldi	r20, 0x03	; 3
     6e6:	0e 94 28 07 	call	0xe50	; 0xe50 <dtostrf>
					UART_string_tx(sensor0);
     6ea:	ce 01       	movw	r24, r28
     6ec:	4b 96       	adiw	r24, 0x1b	; 27
     6ee:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(tempString);
     6f2:	ce 01       	movw	r24, r28
     6f4:	0b 96       	adiw	r24, 0x0b	; 11
     6f6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     6fa:	c8 01       	movw	r24, r16
     6fc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					dtostrf(fhumidity, 3, 3, buffer);
     700:	6d 81       	ldd	r22, Y+5	; 0x05
     702:	7e 81       	ldd	r23, Y+6	; 0x06
     704:	8f 81       	ldd	r24, Y+7	; 0x07
     706:	98 85       	ldd	r25, Y+8	; 0x08
     708:	23 e0       	ldi	r18, 0x03	; 3
     70a:	43 e0       	ldi	r20, 0x03	; 3
     70c:	0e 94 28 07 	call	0xe50	; 0xe50 <dtostrf>
					UART_string_tx(humString);
     710:	ce 01       	movw	r24, r28
     712:	43 96       	adiw	r24, 0x13	; 19
     714:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     718:	c8 01       	movw	r24, r16
     71a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_tx('\n');
     71e:	8a e0       	ldi	r24, 0x0A	; 10
     720:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <UART_tx>
					
					dht_getdata_dht_11(&temperature,&humidity,1);
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	be 01       	movw	r22, r28
     728:	66 5f       	subi	r22, 0xF6	; 246
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	ce 01       	movw	r24, r28
     72e:	09 96       	adiw	r24, 0x09	; 9
     730:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata_dht_11>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     734:	89 85       	ldd	r24, Y+9	; 0x09
     736:	4a e0       	ldi	r20, 0x0A	; 10
     738:	b8 01       	movw	r22, r16
     73a:	08 2e       	mov	r0, r24
     73c:	00 0c       	add	r0, r0
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_string_tx(sensor1);
     744:	ce 01       	movw	r24, r28
     746:	84 96       	adiw	r24, 0x24	; 36
     748:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(tempString);
     74c:	ce 01       	movw	r24, r28
     74e:	0b 96       	adiw	r24, 0x0b	; 11
     750:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     754:	c8 01       	movw	r24, r16
     756:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
     75a:	8a 85       	ldd	r24, Y+10	; 0x0a
     75c:	4a e0       	ldi	r20, 0x0A	; 10
     75e:	b8 01       	movw	r22, r16
     760:	08 2e       	mov	r0, r24
     762:	00 0c       	add	r0, r0
     764:	99 0b       	sbc	r25, r25
     766:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
     76a:	ce 01       	movw	r24, r28
     76c:	43 96       	adiw	r24, 0x13	; 19
     76e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     772:	c8 01       	movw	r24, r16
     774:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_tx('\n');
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <UART_tx>
					
					five_sec = 0u;	
					sei();
     77e:	78 94       	sei
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
					UART_string_tx(buffer);
					UART_tx('\n');
					
					five_sec = 0u;	
     780:	f1 2c       	mov	r15, r1
     782:	03 c0       	rjmp	.+6      	; 0x78a <main+0x186>
					sei();
					
			}
			else
			{
				five_sec++;
     784:	f3 94       	inc	r15
     786:	01 c0       	rjmp	.+2      	; 0x78a <main+0x186>
     788:	e8 2e       	mov	r14, r24
			}
			
		}
		
		
		if( gUartRFlag == 1 )
     78a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <gUartRFlag>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	09 f0       	breq	.+2      	; 0x794 <main+0x190>
     792:	8b c0       	rjmp	.+278    	; 0x8aa <__stack+0x4b>
		{
				cli();//cretical section 
     794:	f8 94       	cli
				UART_tx(gUartData);
     796:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <gUartData>
     79a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <UART_tx>
				relayModuleControl( gUartData);
     79e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <gUartData>
     7a2:	0e 94 a7 02 	call	0x54e	; 0x54e <relayModuleControl>
			switch (gUartData)
     7a6:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <gUartData>
     7aa:	82 33       	cpi	r24, 0x32	; 50
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <main+0x1ac>
     7ae:	64 c0       	rjmp	.+200    	; 0x878 <__stack+0x19>
     7b0:	83 33       	cpi	r24, 0x33	; 51
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <main+0x1b2>
     7b4:	66 c0       	rjmp	.+204    	; 0x882 <__stack+0x23>
     7b6:	81 33       	cpi	r24, 0x31	; 49
     7b8:	09 f0       	breq	.+2      	; 0x7bc <main+0x1b8>
     7ba:	67 c0       	rjmp	.+206    	; 0x88a <__stack+0x2b>
			{
				
			
			case '1':
					dht_getdata_dht_22(&ftemperature,&fhumidity,0);
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	be 01       	movw	r22, r28
     7c0:	6b 5f       	subi	r22, 0xFB	; 251
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	0e 94 99 01 	call	0x332	; 0x332 <dht_getdata_dht_22>
					dtostrf(ftemperature, 3, 3, buffer);
     7cc:	69 81       	ldd	r22, Y+1	; 0x01
     7ce:	7a 81       	ldd	r23, Y+2	; 0x02
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	8e 01       	movw	r16, r28
     7d6:	03 5d       	subi	r16, 0xD3	; 211
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	23 e0       	ldi	r18, 0x03	; 3
     7dc:	43 e0       	ldi	r20, 0x03	; 3
     7de:	0e 94 28 07 	call	0xe50	; 0xe50 <dtostrf>
					UART_string_tx(sensor0);
     7e2:	ce 01       	movw	r24, r28
     7e4:	4b 96       	adiw	r24, 0x1b	; 27
     7e6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(tempString);
     7ea:	ce 01       	movw	r24, r28
     7ec:	0b 96       	adiw	r24, 0x0b	; 11
     7ee:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     7f2:	c8 01       	movw	r24, r16
     7f4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					dtostrf(fhumidity, 3, 3, buffer);
     7f8:	6d 81       	ldd	r22, Y+5	; 0x05
     7fa:	7e 81       	ldd	r23, Y+6	; 0x06
     7fc:	8f 81       	ldd	r24, Y+7	; 0x07
     7fe:	98 85       	ldd	r25, Y+8	; 0x08
     800:	23 e0       	ldi	r18, 0x03	; 3
     802:	43 e0       	ldi	r20, 0x03	; 3
     804:	0e 94 28 07 	call	0xe50	; 0xe50 <dtostrf>
					UART_string_tx(humString);
     808:	ce 01       	movw	r24, r28
     80a:	43 96       	adiw	r24, 0x13	; 19
     80c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     810:	c8 01       	movw	r24, r16
     812:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_tx('\n');
     816:	8a e0       	ldi	r24, 0x0A	; 10
     818:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <UART_tx>
					dht_getdata_dht_11(&temperature,&humidity,1);
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	be 01       	movw	r22, r28
     820:	66 5f       	subi	r22, 0xF6	; 246
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	ce 01       	movw	r24, r28
     826:	09 96       	adiw	r24, 0x09	; 9
     828:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata_dht_11>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	4a e0       	ldi	r20, 0x0A	; 10
     830:	b8 01       	movw	r22, r16
     832:	08 2e       	mov	r0, r24
     834:	00 0c       	add	r0, r0
     836:	99 0b       	sbc	r25, r25
     838:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
					itoa(temperature,buffer,10);
					UART_string_tx(sensor1);
     83c:	ce 01       	movw	r24, r28
     83e:	84 96       	adiw	r24, 0x24	; 36
     840:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(tempString);
     844:	ce 01       	movw	r24, r28
     846:	0b 96       	adiw	r24, 0x0b	; 11
     848:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
     852:	8a 85       	ldd	r24, Y+10	; 0x0a
     854:	4a e0       	ldi	r20, 0x0A	; 10
     856:	b8 01       	movw	r22, r16
     858:	08 2e       	mov	r0, r24
     85a:	00 0c       	add	r0, r0
     85c:	99 0b       	sbc	r25, r25
     85e:	0e 94 48 07 	call	0xe90	; 0xe90 <__itoa_ncheck>
					itoa(humidity, buffer, 10);
					UART_string_tx(humString);
     862:	ce 01       	movw	r24, r28
     864:	43 96       	adiw	r24, 0x13	; 19
     866:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_string_tx(buffer);
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
					UART_tx('\n');		
     870:	8a e0       	ldi	r24, 0x0A	; 10
     872:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <UART_tx>
			
			break;
     876:	0d c0       	rjmp	.+26     	; 0x892 <__stack+0x33>
			
			case '2': FAN_ON;manualflag=1; break;
     878:	c4 98       	cbi	0x18, 4	; 24
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
     880:	08 c0       	rjmp	.+16     	; 0x892 <__stack+0x33>
			case '3': FAN_OFF;manualflag=0;break;
     882:	c4 9a       	sbi	0x18, 4	; 24
     884:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     888:	04 c0       	rjmp	.+8      	; 0x892 <__stack+0x33>
			
			default:UART_string_tx("wrong request");
     88a:	8b e8       	ldi	r24, 0x8B	; 139
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
			}
			
	
			
			gUartRFlag=0;
     892:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <gUartRFlag>
     896:	2f ef       	ldi	r18, 0xFF	; 255
     898:	8f eb       	ldi	r24, 0xBF	; 191
     89a:	91 e2       	ldi	r25, 0x21	; 33
     89c:	21 50       	subi	r18, 0x01	; 1
     89e:	80 40       	sbci	r24, 0x00	; 0
     8a0:	90 40       	sbci	r25, 0x00	; 0
     8a2:	e1 f7       	brne	.-8      	; 0x89c <__stack+0x3d>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
     8a6:	00 00       	nop
			_delay_ms(1000);
			sei();
     8a8:	78 94       	sei
			
		}
		
		if (  dht_getdata_dht_22(&ftemperature,&fhumidity,0)!=-1  && dht_getdata_dht_11(&temperature,&humidity,1)!=-1 )
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	be 01       	movw	r22, r28
     8ae:	6b 5f       	subi	r22, 0xFB	; 251
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	0e 94 99 01 	call	0x332	; 0x332 <dht_getdata_dht_22>
     8ba:	8f 3f       	cpi	r24, 0xFF	; 255
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__stack+0x61>
     8be:	44 c0       	rjmp	.+136    	; 0x948 <__stack+0xe9>
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	66 5f       	subi	r22, 0xF6	; 246
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	ce 01       	movw	r24, r28
     8ca:	09 96       	adiw	r24, 0x09	; 9
     8cc:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata_dht_11>
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	d1 f1       	breq	.+116    	; 0x948 <__stack+0xe9>
				int8_t temp_avr;
				int8_t humd_avr;
				temp_avr = ( (ftemperature+temperature)/2 );
				humd_avr = ((fhumidity+humidity)/2);
				
				if(temp_avr > 30 || humd_avr > 67)
     8d4:	69 85       	ldd	r22, Y+9	; 0x09
     8d6:	06 2e       	mov	r0, r22
     8d8:	00 0c       	add	r0, r0
     8da:	77 0b       	sbc	r23, r23
     8dc:	88 0b       	sbc	r24, r24
     8de:	99 0b       	sbc	r25, r25
     8e0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatsisf>
     8e4:	29 81       	ldd	r18, Y+1	; 0x01
     8e6:	3a 81       	ldd	r19, Y+2	; 0x02
     8e8:	4b 81       	ldd	r20, Y+3	; 0x03
     8ea:	5c 81       	ldd	r21, Y+4	; 0x04
     8ec:	0e 94 19 05 	call	0xa32	; 0xa32 <__addsf3>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	5f e3       	ldi	r21, 0x3F	; 63
     8f8:	0e 94 bb 06 	call	0xd76	; 0xd76 <__mulsf3>
     8fc:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixsfsi>
     900:	6f 31       	cpi	r22, 0x1F	; 31
     902:	c4 f4       	brge	.+48     	; 0x934 <__stack+0xd5>
     904:	6a 85       	ldd	r22, Y+10	; 0x0a
     906:	06 2e       	mov	r0, r22
     908:	00 0c       	add	r0, r0
     90a:	77 0b       	sbc	r23, r23
     90c:	88 0b       	sbc	r24, r24
     90e:	99 0b       	sbc	r25, r25
     910:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatsisf>
     914:	2d 81       	ldd	r18, Y+5	; 0x05
     916:	3e 81       	ldd	r19, Y+6	; 0x06
     918:	4f 81       	ldd	r20, Y+7	; 0x07
     91a:	58 85       	ldd	r21, Y+8	; 0x08
     91c:	0e 94 19 05 	call	0xa32	; 0xa32 <__addsf3>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	5f e3       	ldi	r21, 0x3F	; 63
     928:	0e 94 bb 06 	call	0xd76	; 0xd76 <__mulsf3>
     92c:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixsfsi>
     930:	64 34       	cpi	r22, 0x44	; 68
     932:	1c f0       	brlt	.+6      	; 0x93a <__stack+0xdb>
				{
					VENTILATION_ON;
     934:	c1 98       	cbi	0x18, 1	; 24
					FAN_ON;
     936:	c4 98       	cbi	0x18, 4	; 24
     938:	0d c0       	rjmp	.+26     	; 0x954 <__stack+0xf5>
				}
				
				else if (manualflag == 0)
     93a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     93e:	81 11       	cpse	r24, r1
     940:	09 c0       	rjmp	.+18     	; 0x954 <__stack+0xf5>
				{
					VENTILATION_OFF;
     942:	c1 9a       	sbi	0x18, 1	; 24
					FAN_OFF;
     944:	c4 9a       	sbi	0x18, 4	; 24
     946:	06 c0       	rjmp	.+12     	; 0x954 <__stack+0xf5>
				}
			
		}
		else
		{
						UART_string_tx("FATAL ERROR!");
     948:	89 e9       	ldi	r24, 0x99	; 153
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <UART_string_tx>
						FAN_ON;
     950:	c4 98       	cbi	0x18, 4	; 24
						VENTILATION_ON;
     952:	c1 98       	cbi	0x18, 1	; 24
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	8f eb       	ldi	r24, 0xBF	; 191
     958:	91 e2       	ldi	r25, 0x21	; 33
     95a:	21 50       	subi	r18, 0x01	; 1
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	90 40       	sbci	r25, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <__stack+0xfb>
     962:	00 c0       	rjmp	.+0      	; 0x964 <__stack+0x105>
     964:	00 00       	nop
     966:	a3 ce       	rjmp	.-698    	; 0x6ae <main+0xaa>

00000968 <packetSplitter>:
#include "packetsConfig.h"

void packetSplitter(unsigned char packet, uartPacket *packetDataId )
{
	
	packetDataId->id = ((packet & ID_MASK) >> 5u);
     968:	98 2f       	mov	r25, r24
     96a:	92 95       	swap	r25
     96c:	96 95       	lsr	r25
     96e:	97 70       	andi	r25, 0x07	; 7
     970:	fb 01       	movw	r30, r22
     972:	90 83       	st	Z, r25
	packetDataId->data = (packet & DATA_MASK);	
     974:	8f 71       	andi	r24, 0x1F	; 31
     976:	81 83       	std	Z+1, r24	; 0x01
     978:	08 95       	ret

0000097a <timer1_init>:
#include "timer.h"
volatile unsigned char oneSec = 0u;

void timer1_init(void)
{
	TCNT1 = 44219u;   // for 1 sec at 11059200 MHz
     97a:	8b eb       	ldi	r24, 0xBB	; 187
     97c:	9c ea       	ldi	r25, 0xAC	; 172
     97e:	9d bd       	out	0x2d, r25	; 45
     980:	8c bd       	out	0x2c, r24	; 44

	TCCR1A = 0x00;
     982:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 prescler
     984:	85 e0       	ldi	r24, 0x05	; 5
     986:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     988:	84 e0       	ldi	r24, 0x04	; 4
     98a:	89 bf       	out	0x39, r24	; 57
     98c:	08 95       	ret

0000098e <__vector_9>:
	
}


ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
	
	TCNT1 = 44219u;   // for 1 sec at 11059200 MHz
     99c:	8b eb       	ldi	r24, 0xBB	; 187
     99e:	9c ea       	ldi	r25, 0xAC	; 172
     9a0:	9d bd       	out	0x2d, r25	; 45
     9a2:	8c bd       	out	0x2c, r24	; 44
	oneSec ++;
     9a4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <oneSec>
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <oneSec>
	
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <UART_int>:
extern volatile unsigned char gUartRFlag;
extern volatile unsigned char gUartData;
void UART_int()
{
	//UCSRA=(1<<U2X); // set double speed
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);   // enable Tx Rx and Rx interrupt
     9bc:	88 e9       	ldi	r24, 0x98	; 152
     9be:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 bit data
     9c0:	86 e8       	ldi	r24, 0x86	; 134
     9c2:	80 bd       	out	0x20, r24	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c4:	85 e2       	ldi	r24, 0x25	; 37
     9c6:	8a 95       	dec	r24
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <UART_int+0xa>
	_delay_us(10);
	UCSRC&=~(1<<URSEL);
     9ca:	80 b5       	in	r24, 0x20	; 32
     9cc:	8f 77       	andi	r24, 0x7F	; 127
     9ce:	80 bd       	out	0x20, r24	; 32
	UBRRH = (unsigned char)(UBRRset>>8);
     9d0:	10 bc       	out	0x20, r1	; 32
	UBRRL= (unsigned char)(UBRRset);
     9d2:	87 e4       	ldi	r24, 0x47	; 71
     9d4:	89 b9       	out	0x09, r24	; 9
     9d6:	08 95       	ret

000009d8 <UART_tx>:
	
}

void UART_tx(unsigned char x)
{
	while( !( UCSRA & (1<<UDRE)));
     9d8:	5d 9b       	sbis	0x0b, 5	; 11
     9da:	fe cf       	rjmp	.-4      	; 0x9d8 <UART_tx>
	UDR=x;
     9dc:	8c b9       	out	0x0c, r24	; 12
     9de:	08 95       	ret

000009e0 <UART_string_tx>:
}

void UART_string_tx(unsigned char *x)
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(x[i] !='\0')
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
     9ec:	59 f0       	breq	.+22     	; 0xa04 <UART_string_tx+0x24>
     9ee:	8f 01       	movw	r16, r30
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_tx( x[i] );
     9f2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <UART_tx>
		i++;
     9f6:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_string_tx(unsigned char *x)
{
	unsigned char i=0;
	while(x[i] !='\0')
     9f8:	f8 01       	movw	r30, r16
     9fa:	ec 0f       	add	r30, r28
     9fc:	f1 1d       	adc	r31, r1
     9fe:	80 81       	ld	r24, Z
     a00:	81 11       	cpse	r24, r1
     a02:	f7 cf       	rjmp	.-18     	; 0x9f2 <UART_string_tx+0x12>
	{
		UART_tx( x[i] );
		i++;
	}
}
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret

00000a0c <__vector_13>:

ISR(USART_RXC_vect)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	8f 93       	push	r24
	//cli();
	
	
	gUartData = UDR;
     a18:	8c b1       	in	r24, 0x0c	; 12
     a1a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gUartData>
	gUartRFlag=1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <gUartRFlag>
	
	

	//sei();
	
     a24:	8f 91       	pop	r24
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <__subsf3>:
     a30:	50 58       	subi	r21, 0x80	; 128

00000a32 <__addsf3>:
     a32:	bb 27       	eor	r27, r27
     a34:	aa 27       	eor	r26, r26
     a36:	0e 94 30 05 	call	0xa60	; 0xa60 <__addsf3x>
     a3a:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_round>
     a3e:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_pscA>
     a42:	38 f0       	brcs	.+14     	; 0xa52 <__addsf3+0x20>
     a44:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscB>
     a48:	20 f0       	brcs	.+8      	; 0xa52 <__addsf3+0x20>
     a4a:	39 f4       	brne	.+14     	; 0xa5a <__addsf3+0x28>
     a4c:	9f 3f       	cpi	r25, 0xFF	; 255
     a4e:	19 f4       	brne	.+6      	; 0xa56 <__addsf3+0x24>
     a50:	26 f4       	brtc	.+8      	; 0xa5a <__addsf3+0x28>
     a52:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_nan>
     a56:	0e f4       	brtc	.+2      	; 0xa5a <__addsf3+0x28>
     a58:	e0 95       	com	r30
     a5a:	e7 fb       	bst	r30, 7
     a5c:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>

00000a60 <__addsf3x>:
     a60:	e9 2f       	mov	r30, r25
     a62:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_split3>
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__addsf3+0xc>
     a68:	ba 17       	cp	r27, r26
     a6a:	62 07       	cpc	r22, r18
     a6c:	73 07       	cpc	r23, r19
     a6e:	84 07       	cpc	r24, r20
     a70:	95 07       	cpc	r25, r21
     a72:	20 f0       	brcs	.+8      	; 0xa7c <__addsf3x+0x1c>
     a74:	79 f4       	brne	.+30     	; 0xa94 <__addsf3x+0x34>
     a76:	a6 f5       	brtc	.+104    	; 0xae0 <__addsf3x+0x80>
     a78:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_zero>
     a7c:	0e f4       	brtc	.+2      	; 0xa80 <__addsf3x+0x20>
     a7e:	e0 95       	com	r30
     a80:	0b 2e       	mov	r0, r27
     a82:	ba 2f       	mov	r27, r26
     a84:	a0 2d       	mov	r26, r0
     a86:	0b 01       	movw	r0, r22
     a88:	b9 01       	movw	r22, r18
     a8a:	90 01       	movw	r18, r0
     a8c:	0c 01       	movw	r0, r24
     a8e:	ca 01       	movw	r24, r20
     a90:	a0 01       	movw	r20, r0
     a92:	11 24       	eor	r1, r1
     a94:	ff 27       	eor	r31, r31
     a96:	59 1b       	sub	r21, r25
     a98:	99 f0       	breq	.+38     	; 0xac0 <__addsf3x+0x60>
     a9a:	59 3f       	cpi	r21, 0xF9	; 249
     a9c:	50 f4       	brcc	.+20     	; 0xab2 <__addsf3x+0x52>
     a9e:	50 3e       	cpi	r21, 0xE0	; 224
     aa0:	68 f1       	brcs	.+90     	; 0xafc <__addsf3x+0x9c>
     aa2:	1a 16       	cp	r1, r26
     aa4:	f0 40       	sbci	r31, 0x00	; 0
     aa6:	a2 2f       	mov	r26, r18
     aa8:	23 2f       	mov	r18, r19
     aaa:	34 2f       	mov	r19, r20
     aac:	44 27       	eor	r20, r20
     aae:	58 5f       	subi	r21, 0xF8	; 248
     ab0:	f3 cf       	rjmp	.-26     	; 0xa98 <__addsf3x+0x38>
     ab2:	46 95       	lsr	r20
     ab4:	37 95       	ror	r19
     ab6:	27 95       	ror	r18
     ab8:	a7 95       	ror	r26
     aba:	f0 40       	sbci	r31, 0x00	; 0
     abc:	53 95       	inc	r21
     abe:	c9 f7       	brne	.-14     	; 0xab2 <__addsf3x+0x52>
     ac0:	7e f4       	brtc	.+30     	; 0xae0 <__addsf3x+0x80>
     ac2:	1f 16       	cp	r1, r31
     ac4:	ba 0b       	sbc	r27, r26
     ac6:	62 0b       	sbc	r22, r18
     ac8:	73 0b       	sbc	r23, r19
     aca:	84 0b       	sbc	r24, r20
     acc:	ba f0       	brmi	.+46     	; 0xafc <__addsf3x+0x9c>
     ace:	91 50       	subi	r25, 0x01	; 1
     ad0:	a1 f0       	breq	.+40     	; 0xafa <__addsf3x+0x9a>
     ad2:	ff 0f       	add	r31, r31
     ad4:	bb 1f       	adc	r27, r27
     ad6:	66 1f       	adc	r22, r22
     ad8:	77 1f       	adc	r23, r23
     ada:	88 1f       	adc	r24, r24
     adc:	c2 f7       	brpl	.-16     	; 0xace <__addsf3x+0x6e>
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__addsf3x+0x9c>
     ae0:	ba 0f       	add	r27, r26
     ae2:	62 1f       	adc	r22, r18
     ae4:	73 1f       	adc	r23, r19
     ae6:	84 1f       	adc	r24, r20
     ae8:	48 f4       	brcc	.+18     	; 0xafc <__addsf3x+0x9c>
     aea:	87 95       	ror	r24
     aec:	77 95       	ror	r23
     aee:	67 95       	ror	r22
     af0:	b7 95       	ror	r27
     af2:	f7 95       	ror	r31
     af4:	9e 3f       	cpi	r25, 0xFE	; 254
     af6:	08 f0       	brcs	.+2      	; 0xafa <__addsf3x+0x9a>
     af8:	b0 cf       	rjmp	.-160    	; 0xa5a <__addsf3+0x28>
     afa:	93 95       	inc	r25
     afc:	88 0f       	add	r24, r24
     afe:	08 f0       	brcs	.+2      	; 0xb02 <__addsf3x+0xa2>
     b00:	99 27       	eor	r25, r25
     b02:	ee 0f       	add	r30, r30
     b04:	97 95       	ror	r25
     b06:	87 95       	ror	r24
     b08:	08 95       	ret

00000b0a <__divsf3>:
     b0a:	0e 94 99 05 	call	0xb32	; 0xb32 <__divsf3x>
     b0e:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_round>
     b12:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscB>
     b16:	58 f0       	brcs	.+22     	; 0xb2e <__divsf3+0x24>
     b18:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_pscA>
     b1c:	40 f0       	brcs	.+16     	; 0xb2e <__divsf3+0x24>
     b1e:	29 f4       	brne	.+10     	; 0xb2a <__divsf3+0x20>
     b20:	5f 3f       	cpi	r21, 0xFF	; 255
     b22:	29 f0       	breq	.+10     	; 0xb2e <__divsf3+0x24>
     b24:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
     b28:	51 11       	cpse	r21, r1
     b2a:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_szero>
     b2e:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_nan>

00000b32 <__divsf3x>:
     b32:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_split3>
     b36:	68 f3       	brcs	.-38     	; 0xb12 <__divsf3+0x8>

00000b38 <__divsf3_pse>:
     b38:	99 23       	and	r25, r25
     b3a:	b1 f3       	breq	.-20     	; 0xb28 <__divsf3+0x1e>
     b3c:	55 23       	and	r21, r21
     b3e:	91 f3       	breq	.-28     	; 0xb24 <__divsf3+0x1a>
     b40:	95 1b       	sub	r25, r21
     b42:	55 0b       	sbc	r21, r21
     b44:	bb 27       	eor	r27, r27
     b46:	aa 27       	eor	r26, r26
     b48:	62 17       	cp	r22, r18
     b4a:	73 07       	cpc	r23, r19
     b4c:	84 07       	cpc	r24, r20
     b4e:	38 f0       	brcs	.+14     	; 0xb5e <__divsf3_pse+0x26>
     b50:	9f 5f       	subi	r25, 0xFF	; 255
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	aa 1f       	adc	r26, r26
     b5c:	a9 f3       	breq	.-22     	; 0xb48 <__divsf3_pse+0x10>
     b5e:	35 d0       	rcall	.+106    	; 0xbca <__divsf3_pse+0x92>
     b60:	0e 2e       	mov	r0, r30
     b62:	3a f0       	brmi	.+14     	; 0xb72 <__divsf3_pse+0x3a>
     b64:	e0 e8       	ldi	r30, 0x80	; 128
     b66:	32 d0       	rcall	.+100    	; 0xbcc <__divsf3_pse+0x94>
     b68:	91 50       	subi	r25, 0x01	; 1
     b6a:	50 40       	sbci	r21, 0x00	; 0
     b6c:	e6 95       	lsr	r30
     b6e:	00 1c       	adc	r0, r0
     b70:	ca f7       	brpl	.-14     	; 0xb64 <__divsf3_pse+0x2c>
     b72:	2b d0       	rcall	.+86     	; 0xbca <__divsf3_pse+0x92>
     b74:	fe 2f       	mov	r31, r30
     b76:	29 d0       	rcall	.+82     	; 0xbca <__divsf3_pse+0x92>
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 1f       	adc	r24, r24
     b7e:	bb 1f       	adc	r27, r27
     b80:	26 17       	cp	r18, r22
     b82:	37 07       	cpc	r19, r23
     b84:	48 07       	cpc	r20, r24
     b86:	ab 07       	cpc	r26, r27
     b88:	b0 e8       	ldi	r27, 0x80	; 128
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__divsf3_pse+0x56>
     b8c:	bb 0b       	sbc	r27, r27
     b8e:	80 2d       	mov	r24, r0
     b90:	bf 01       	movw	r22, r30
     b92:	ff 27       	eor	r31, r31
     b94:	93 58       	subi	r25, 0x83	; 131
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	3a f0       	brmi	.+14     	; 0xba8 <__divsf3_pse+0x70>
     b9a:	9e 3f       	cpi	r25, 0xFE	; 254
     b9c:	51 05       	cpc	r21, r1
     b9e:	78 f0       	brcs	.+30     	; 0xbbe <__divsf3_pse+0x86>
     ba0:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
     ba4:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_szero>
     ba8:	5f 3f       	cpi	r21, 0xFF	; 255
     baa:	e4 f3       	brlt	.-8      	; 0xba4 <__divsf3_pse+0x6c>
     bac:	98 3e       	cpi	r25, 0xE8	; 232
     bae:	d4 f3       	brlt	.-12     	; 0xba4 <__divsf3_pse+0x6c>
     bb0:	86 95       	lsr	r24
     bb2:	77 95       	ror	r23
     bb4:	67 95       	ror	r22
     bb6:	b7 95       	ror	r27
     bb8:	f7 95       	ror	r31
     bba:	9f 5f       	subi	r25, 0xFF	; 255
     bbc:	c9 f7       	brne	.-14     	; 0xbb0 <__divsf3_pse+0x78>
     bbe:	88 0f       	add	r24, r24
     bc0:	91 1d       	adc	r25, r1
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	97 f9       	bld	r25, 7
     bc8:	08 95       	ret
     bca:	e1 e0       	ldi	r30, 0x01	; 1
     bcc:	66 0f       	add	r22, r22
     bce:	77 1f       	adc	r23, r23
     bd0:	88 1f       	adc	r24, r24
     bd2:	bb 1f       	adc	r27, r27
     bd4:	62 17       	cp	r22, r18
     bd6:	73 07       	cpc	r23, r19
     bd8:	84 07       	cpc	r24, r20
     bda:	ba 07       	cpc	r27, r26
     bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__divsf3_pse+0xae>
     bde:	62 1b       	sub	r22, r18
     be0:	73 0b       	sbc	r23, r19
     be2:	84 0b       	sbc	r24, r20
     be4:	ba 0b       	sbc	r27, r26
     be6:	ee 1f       	adc	r30, r30
     be8:	88 f7       	brcc	.-30     	; 0xbcc <__divsf3_pse+0x94>
     bea:	e0 95       	com	r30
     bec:	08 95       	ret

00000bee <__fixsfsi>:
     bee:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fixunssfsi>
     bf2:	68 94       	set
     bf4:	b1 11       	cpse	r27, r1
     bf6:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_szero>
     bfa:	08 95       	ret

00000bfc <__fixunssfsi>:
     bfc:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_splitA>
     c00:	88 f0       	brcs	.+34     	; 0xc24 <__fixunssfsi+0x28>
     c02:	9f 57       	subi	r25, 0x7F	; 127
     c04:	98 f0       	brcs	.+38     	; 0xc2c <__fixunssfsi+0x30>
     c06:	b9 2f       	mov	r27, r25
     c08:	99 27       	eor	r25, r25
     c0a:	b7 51       	subi	r27, 0x17	; 23
     c0c:	b0 f0       	brcs	.+44     	; 0xc3a <__fixunssfsi+0x3e>
     c0e:	e1 f0       	breq	.+56     	; 0xc48 <__fixunssfsi+0x4c>
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	88 1f       	adc	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	1a f0       	brmi	.+6      	; 0xc20 <__fixunssfsi+0x24>
     c1a:	ba 95       	dec	r27
     c1c:	c9 f7       	brne	.-14     	; 0xc10 <__fixunssfsi+0x14>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <__fixunssfsi+0x4c>
     c20:	b1 30       	cpi	r27, 0x01	; 1
     c22:	91 f0       	breq	.+36     	; 0xc48 <__fixunssfsi+0x4c>
     c24:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_zero>
     c28:	b1 e0       	ldi	r27, 0x01	; 1
     c2a:	08 95       	ret
     c2c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_zero>
     c30:	67 2f       	mov	r22, r23
     c32:	78 2f       	mov	r23, r24
     c34:	88 27       	eor	r24, r24
     c36:	b8 5f       	subi	r27, 0xF8	; 248
     c38:	39 f0       	breq	.+14     	; 0xc48 <__fixunssfsi+0x4c>
     c3a:	b9 3f       	cpi	r27, 0xF9	; 249
     c3c:	cc f3       	brlt	.-14     	; 0xc30 <__fixunssfsi+0x34>
     c3e:	86 95       	lsr	r24
     c40:	77 95       	ror	r23
     c42:	67 95       	ror	r22
     c44:	b3 95       	inc	r27
     c46:	d9 f7       	brne	.-10     	; 0xc3e <__fixunssfsi+0x42>
     c48:	3e f4       	brtc	.+14     	; 0xc58 <__fixunssfsi+0x5c>
     c4a:	90 95       	com	r25
     c4c:	80 95       	com	r24
     c4e:	70 95       	com	r23
     c50:	61 95       	neg	r22
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	8f 4f       	sbci	r24, 0xFF	; 255
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	08 95       	ret

00000c5a <__floatunsisf>:
     c5a:	e8 94       	clt
     c5c:	09 c0       	rjmp	.+18     	; 0xc70 <__floatsisf+0x12>

00000c5e <__floatsisf>:
     c5e:	97 fb       	bst	r25, 7
     c60:	3e f4       	brtc	.+14     	; 0xc70 <__floatsisf+0x12>
     c62:	90 95       	com	r25
     c64:	80 95       	com	r24
     c66:	70 95       	com	r23
     c68:	61 95       	neg	r22
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	8f 4f       	sbci	r24, 0xFF	; 255
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	99 23       	and	r25, r25
     c72:	a9 f0       	breq	.+42     	; 0xc9e <__floatsisf+0x40>
     c74:	f9 2f       	mov	r31, r25
     c76:	96 e9       	ldi	r25, 0x96	; 150
     c78:	bb 27       	eor	r27, r27
     c7a:	93 95       	inc	r25
     c7c:	f6 95       	lsr	r31
     c7e:	87 95       	ror	r24
     c80:	77 95       	ror	r23
     c82:	67 95       	ror	r22
     c84:	b7 95       	ror	r27
     c86:	f1 11       	cpse	r31, r1
     c88:	f8 cf       	rjmp	.-16     	; 0xc7a <__floatsisf+0x1c>
     c8a:	fa f4       	brpl	.+62     	; 0xcca <__floatsisf+0x6c>
     c8c:	bb 0f       	add	r27, r27
     c8e:	11 f4       	brne	.+4      	; 0xc94 <__floatsisf+0x36>
     c90:	60 ff       	sbrs	r22, 0
     c92:	1b c0       	rjmp	.+54     	; 0xcca <__floatsisf+0x6c>
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	8f 4f       	sbci	r24, 0xFF	; 255
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	16 c0       	rjmp	.+44     	; 0xcca <__floatsisf+0x6c>
     c9e:	88 23       	and	r24, r24
     ca0:	11 f0       	breq	.+4      	; 0xca6 <__floatsisf+0x48>
     ca2:	96 e9       	ldi	r25, 0x96	; 150
     ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <__floatsisf+0x6a>
     ca6:	77 23       	and	r23, r23
     ca8:	21 f0       	breq	.+8      	; 0xcb2 <__floatsisf+0x54>
     caa:	9e e8       	ldi	r25, 0x8E	; 142
     cac:	87 2f       	mov	r24, r23
     cae:	76 2f       	mov	r23, r22
     cb0:	05 c0       	rjmp	.+10     	; 0xcbc <__floatsisf+0x5e>
     cb2:	66 23       	and	r22, r22
     cb4:	71 f0       	breq	.+28     	; 0xcd2 <__floatsisf+0x74>
     cb6:	96 e8       	ldi	r25, 0x86	; 134
     cb8:	86 2f       	mov	r24, r22
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	2a f0       	brmi	.+10     	; 0xcca <__floatsisf+0x6c>
     cc0:	9a 95       	dec	r25
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	da f7       	brpl	.-10     	; 0xcc0 <__floatsisf+0x62>
     cca:	88 0f       	add	r24, r24
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret

00000cd4 <__fp_inf>:
     cd4:	97 f9       	bld	r25, 7
     cd6:	9f 67       	ori	r25, 0x7F	; 127
     cd8:	80 e8       	ldi	r24, 0x80	; 128
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	08 95       	ret

00000ce0 <__fp_nan>:
     ce0:	9f ef       	ldi	r25, 0xFF	; 255
     ce2:	80 ec       	ldi	r24, 0xC0	; 192
     ce4:	08 95       	ret

00000ce6 <__fp_pscA>:
     ce6:	00 24       	eor	r0, r0
     ce8:	0a 94       	dec	r0
     cea:	16 16       	cp	r1, r22
     cec:	17 06       	cpc	r1, r23
     cee:	18 06       	cpc	r1, r24
     cf0:	09 06       	cpc	r0, r25
     cf2:	08 95       	ret

00000cf4 <__fp_pscB>:
     cf4:	00 24       	eor	r0, r0
     cf6:	0a 94       	dec	r0
     cf8:	12 16       	cp	r1, r18
     cfa:	13 06       	cpc	r1, r19
     cfc:	14 06       	cpc	r1, r20
     cfe:	05 06       	cpc	r0, r21
     d00:	08 95       	ret

00000d02 <__fp_round>:
     d02:	09 2e       	mov	r0, r25
     d04:	03 94       	inc	r0
     d06:	00 0c       	add	r0, r0
     d08:	11 f4       	brne	.+4      	; 0xd0e <__fp_round+0xc>
     d0a:	88 23       	and	r24, r24
     d0c:	52 f0       	brmi	.+20     	; 0xd22 <__fp_round+0x20>
     d0e:	bb 0f       	add	r27, r27
     d10:	40 f4       	brcc	.+16     	; 0xd22 <__fp_round+0x20>
     d12:	bf 2b       	or	r27, r31
     d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0x18>
     d16:	60 ff       	sbrs	r22, 0
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__fp_round+0x20>
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	8f 4f       	sbci	r24, 0xFF	; 255
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	08 95       	ret

00000d24 <__fp_split3>:
     d24:	57 fd       	sbrc	r21, 7
     d26:	90 58       	subi	r25, 0x80	; 128
     d28:	44 0f       	add	r20, r20
     d2a:	55 1f       	adc	r21, r21
     d2c:	59 f0       	breq	.+22     	; 0xd44 <__fp_splitA+0x10>
     d2e:	5f 3f       	cpi	r21, 0xFF	; 255
     d30:	71 f0       	breq	.+28     	; 0xd4e <__fp_splitA+0x1a>
     d32:	47 95       	ror	r20

00000d34 <__fp_splitA>:
     d34:	88 0f       	add	r24, r24
     d36:	97 fb       	bst	r25, 7
     d38:	99 1f       	adc	r25, r25
     d3a:	61 f0       	breq	.+24     	; 0xd54 <__fp_splitA+0x20>
     d3c:	9f 3f       	cpi	r25, 0xFF	; 255
     d3e:	79 f0       	breq	.+30     	; 0xd5e <__fp_splitA+0x2a>
     d40:	87 95       	ror	r24
     d42:	08 95       	ret
     d44:	12 16       	cp	r1, r18
     d46:	13 06       	cpc	r1, r19
     d48:	14 06       	cpc	r1, r20
     d4a:	55 1f       	adc	r21, r21
     d4c:	f2 cf       	rjmp	.-28     	; 0xd32 <__fp_split3+0xe>
     d4e:	46 95       	lsr	r20
     d50:	f1 df       	rcall	.-30     	; 0xd34 <__fp_splitA>
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <__fp_splitA+0x30>
     d54:	16 16       	cp	r1, r22
     d56:	17 06       	cpc	r1, r23
     d58:	18 06       	cpc	r1, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	f1 cf       	rjmp	.-30     	; 0xd40 <__fp_splitA+0xc>
     d5e:	86 95       	lsr	r24
     d60:	71 05       	cpc	r23, r1
     d62:	61 05       	cpc	r22, r1
     d64:	08 94       	sec
     d66:	08 95       	ret

00000d68 <__fp_zero>:
     d68:	e8 94       	clt

00000d6a <__fp_szero>:
     d6a:	bb 27       	eor	r27, r27
     d6c:	66 27       	eor	r22, r22
     d6e:	77 27       	eor	r23, r23
     d70:	cb 01       	movw	r24, r22
     d72:	97 f9       	bld	r25, 7
     d74:	08 95       	ret

00000d76 <__mulsf3>:
     d76:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__mulsf3x>
     d7a:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_round>
     d7e:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_pscA>
     d82:	38 f0       	brcs	.+14     	; 0xd92 <__mulsf3+0x1c>
     d84:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscB>
     d88:	20 f0       	brcs	.+8      	; 0xd92 <__mulsf3+0x1c>
     d8a:	95 23       	and	r25, r21
     d8c:	11 f0       	breq	.+4      	; 0xd92 <__mulsf3+0x1c>
     d8e:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
     d92:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_nan>
     d96:	11 24       	eor	r1, r1
     d98:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_szero>

00000d9c <__mulsf3x>:
     d9c:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_split3>
     da0:	70 f3       	brcs	.-36     	; 0xd7e <__mulsf3+0x8>

00000da2 <__mulsf3_pse>:
     da2:	95 9f       	mul	r25, r21
     da4:	c1 f3       	breq	.-16     	; 0xd96 <__mulsf3+0x20>
     da6:	95 0f       	add	r25, r21
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	55 1f       	adc	r21, r21
     dac:	62 9f       	mul	r22, r18
     dae:	f0 01       	movw	r30, r0
     db0:	72 9f       	mul	r23, r18
     db2:	bb 27       	eor	r27, r27
     db4:	f0 0d       	add	r31, r0
     db6:	b1 1d       	adc	r27, r1
     db8:	63 9f       	mul	r22, r19
     dba:	aa 27       	eor	r26, r26
     dbc:	f0 0d       	add	r31, r0
     dbe:	b1 1d       	adc	r27, r1
     dc0:	aa 1f       	adc	r26, r26
     dc2:	64 9f       	mul	r22, r20
     dc4:	66 27       	eor	r22, r22
     dc6:	b0 0d       	add	r27, r0
     dc8:	a1 1d       	adc	r26, r1
     dca:	66 1f       	adc	r22, r22
     dcc:	82 9f       	mul	r24, r18
     dce:	22 27       	eor	r18, r18
     dd0:	b0 0d       	add	r27, r0
     dd2:	a1 1d       	adc	r26, r1
     dd4:	62 1f       	adc	r22, r18
     dd6:	73 9f       	mul	r23, r19
     dd8:	b0 0d       	add	r27, r0
     dda:	a1 1d       	adc	r26, r1
     ddc:	62 1f       	adc	r22, r18
     dde:	83 9f       	mul	r24, r19
     de0:	a0 0d       	add	r26, r0
     de2:	61 1d       	adc	r22, r1
     de4:	22 1f       	adc	r18, r18
     de6:	74 9f       	mul	r23, r20
     de8:	33 27       	eor	r19, r19
     dea:	a0 0d       	add	r26, r0
     dec:	61 1d       	adc	r22, r1
     dee:	23 1f       	adc	r18, r19
     df0:	84 9f       	mul	r24, r20
     df2:	60 0d       	add	r22, r0
     df4:	21 1d       	adc	r18, r1
     df6:	82 2f       	mov	r24, r18
     df8:	76 2f       	mov	r23, r22
     dfa:	6a 2f       	mov	r22, r26
     dfc:	11 24       	eor	r1, r1
     dfe:	9f 57       	subi	r25, 0x7F	; 127
     e00:	50 40       	sbci	r21, 0x00	; 0
     e02:	9a f0       	brmi	.+38     	; 0xe2a <__mulsf3_pse+0x88>
     e04:	f1 f0       	breq	.+60     	; 0xe42 <__mulsf3_pse+0xa0>
     e06:	88 23       	and	r24, r24
     e08:	4a f0       	brmi	.+18     	; 0xe1c <__mulsf3_pse+0x7a>
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	bb 1f       	adc	r27, r27
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	91 50       	subi	r25, 0x01	; 1
     e18:	50 40       	sbci	r21, 0x00	; 0
     e1a:	a9 f7       	brne	.-22     	; 0xe06 <__mulsf3_pse+0x64>
     e1c:	9e 3f       	cpi	r25, 0xFE	; 254
     e1e:	51 05       	cpc	r21, r1
     e20:	80 f0       	brcs	.+32     	; 0xe42 <__mulsf3_pse+0xa0>
     e22:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_inf>
     e26:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__fp_szero>
     e2a:	5f 3f       	cpi	r21, 0xFF	; 255
     e2c:	e4 f3       	brlt	.-8      	; 0xe26 <__mulsf3_pse+0x84>
     e2e:	98 3e       	cpi	r25, 0xE8	; 232
     e30:	d4 f3       	brlt	.-12     	; 0xe26 <__mulsf3_pse+0x84>
     e32:	86 95       	lsr	r24
     e34:	77 95       	ror	r23
     e36:	67 95       	ror	r22
     e38:	b7 95       	ror	r27
     e3a:	f7 95       	ror	r31
     e3c:	e7 95       	ror	r30
     e3e:	9f 5f       	subi	r25, 0xFF	; 255
     e40:	c1 f7       	brne	.-16     	; 0xe32 <__mulsf3_pse+0x90>
     e42:	fe 2b       	or	r31, r30
     e44:	88 0f       	add	r24, r24
     e46:	91 1d       	adc	r25, r1
     e48:	96 95       	lsr	r25
     e4a:	87 95       	ror	r24
     e4c:	97 f9       	bld	r25, 7
     e4e:	08 95       	ret

00000e50 <dtostrf>:
     e50:	ef 92       	push	r14
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	e8 01       	movw	r28, r16
     e5c:	47 fd       	sbrc	r20, 7
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <dtostrf+0x14>
     e60:	34 e0       	ldi	r19, 0x04	; 4
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <dtostrf+0x16>
     e64:	34 e1       	ldi	r19, 0x14	; 20
     e66:	04 2e       	mov	r0, r20
     e68:	00 0c       	add	r0, r0
     e6a:	55 0b       	sbc	r21, r21
     e6c:	57 ff       	sbrs	r21, 7
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <dtostrf+0x26>
     e70:	51 95       	neg	r21
     e72:	41 95       	neg	r20
     e74:	51 09       	sbc	r21, r1
     e76:	e3 2e       	mov	r14, r19
     e78:	02 2f       	mov	r16, r18
     e7a:	24 2f       	mov	r18, r20
     e7c:	ae 01       	movw	r20, r28
     e7e:	0e 94 6d 07 	call	0xeda	; 0xeda <dtoa_prf>
     e82:	ce 01       	movw	r24, r28
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ef 90       	pop	r14
     e8e:	08 95       	ret

00000e90 <__itoa_ncheck>:
     e90:	bb 27       	eor	r27, r27
     e92:	4a 30       	cpi	r20, 0x0A	; 10
     e94:	31 f4       	brne	.+12     	; 0xea2 <__itoa_ncheck+0x12>
     e96:	99 23       	and	r25, r25
     e98:	22 f4       	brpl	.+8      	; 0xea2 <__itoa_ncheck+0x12>
     e9a:	bd e2       	ldi	r27, 0x2D	; 45
     e9c:	90 95       	com	r25
     e9e:	81 95       	neg	r24
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__utoa_common>

00000ea6 <__utoa_ncheck>:
     ea6:	bb 27       	eor	r27, r27

00000ea8 <__utoa_common>:
     ea8:	fb 01       	movw	r30, r22
     eaa:	55 27       	eor	r21, r21
     eac:	aa 27       	eor	r26, r26
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	aa 1f       	adc	r26, r26
     eb4:	a4 17       	cp	r26, r20
     eb6:	10 f0       	brcs	.+4      	; 0xebc <__utoa_common+0x14>
     eb8:	a4 1b       	sub	r26, r20
     eba:	83 95       	inc	r24
     ebc:	50 51       	subi	r21, 0x10	; 16
     ebe:	b9 f7       	brne	.-18     	; 0xeae <__utoa_common+0x6>
     ec0:	a0 5d       	subi	r26, 0xD0	; 208
     ec2:	aa 33       	cpi	r26, 0x3A	; 58
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <__utoa_common+0x20>
     ec6:	a9 5d       	subi	r26, 0xD9	; 217
     ec8:	a1 93       	st	Z+, r26
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	79 f7       	brne	.-34     	; 0xeac <__utoa_common+0x4>
     ece:	b1 11       	cpse	r27, r1
     ed0:	b1 93       	st	Z+, r27
     ed2:	11 92       	st	Z+, r1
     ed4:	cb 01       	movw	r24, r22
     ed6:	0c 94 9f 09 	jmp	0x133e	; 0x133e <strrev>

00000eda <dtoa_prf>:
     eda:	a9 e0       	ldi	r26, 0x09	; 9
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e3 e7       	ldi	r30, 0x73	; 115
     ee0:	f7 e0       	ldi	r31, 0x07	; 7
     ee2:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__prologue_saves__+0xc>
     ee6:	6a 01       	movw	r12, r20
     ee8:	12 2f       	mov	r17, r18
     eea:	b0 2e       	mov	r11, r16
     eec:	2b e3       	ldi	r18, 0x3B	; 59
     eee:	20 17       	cp	r18, r16
     ef0:	20 f0       	brcs	.+8      	; 0xefa <dtoa_prf+0x20>
     ef2:	ff 24       	eor	r15, r15
     ef4:	f3 94       	inc	r15
     ef6:	f0 0e       	add	r15, r16
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <dtoa_prf+0x24>
     efa:	2c e3       	ldi	r18, 0x3C	; 60
     efc:	f2 2e       	mov	r15, r18
     efe:	0f 2d       	mov	r16, r15
     f00:	27 e0       	ldi	r18, 0x07	; 7
     f02:	ae 01       	movw	r20, r28
     f04:	4f 5f       	subi	r20, 0xFF	; 255
     f06:	5f 4f       	sbci	r21, 0xFF	; 255
     f08:	0e 94 c7 08 	call	0x118e	; 0x118e <__ftoa_engine>
     f0c:	bc 01       	movw	r22, r24
     f0e:	49 81       	ldd	r20, Y+1	; 0x01
     f10:	84 2f       	mov	r24, r20
     f12:	89 70       	andi	r24, 0x09	; 9
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	31 f0       	breq	.+12     	; 0xf24 <dtoa_prf+0x4a>
     f18:	e1 fc       	sbrc	r14, 1
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <dtoa_prf+0x4e>
     f1c:	e0 fe       	sbrs	r14, 0
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <dtoa_prf+0x52>
     f20:	90 e2       	ldi	r25, 0x20	; 32
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <dtoa_prf+0x54>
     f24:	9d e2       	ldi	r25, 0x2D	; 45
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <dtoa_prf+0x54>
     f28:	9b e2       	ldi	r25, 0x2B	; 43
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <dtoa_prf+0x54>
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	5e 2d       	mov	r21, r14
     f30:	50 71       	andi	r21, 0x10	; 16
     f32:	43 ff       	sbrs	r20, 3
     f34:	3c c0       	rjmp	.+120    	; 0xfae <dtoa_prf+0xd4>
     f36:	91 11       	cpse	r25, r1
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <dtoa_prf+0x64>
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <dtoa_prf+0x66>
     f3e:	84 e0       	ldi	r24, 0x04	; 4
     f40:	81 17       	cp	r24, r17
     f42:	18 f4       	brcc	.+6      	; 0xf4a <dtoa_prf+0x70>
     f44:	21 2f       	mov	r18, r17
     f46:	28 1b       	sub	r18, r24
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <dtoa_prf+0x72>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	51 11       	cpse	r21, r1
     f4e:	0b c0       	rjmp	.+22     	; 0xf66 <dtoa_prf+0x8c>
     f50:	f6 01       	movw	r30, r12
     f52:	82 2f       	mov	r24, r18
     f54:	30 e2       	ldi	r19, 0x20	; 32
     f56:	88 23       	and	r24, r24
     f58:	19 f0       	breq	.+6      	; 0xf60 <dtoa_prf+0x86>
     f5a:	31 93       	st	Z+, r19
     f5c:	81 50       	subi	r24, 0x01	; 1
     f5e:	fb cf       	rjmp	.-10     	; 0xf56 <dtoa_prf+0x7c>
     f60:	c2 0e       	add	r12, r18
     f62:	d1 1c       	adc	r13, r1
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	99 23       	and	r25, r25
     f68:	29 f0       	breq	.+10     	; 0xf74 <dtoa_prf+0x9a>
     f6a:	d6 01       	movw	r26, r12
     f6c:	9c 93       	st	X, r25
     f6e:	f6 01       	movw	r30, r12
     f70:	31 96       	adiw	r30, 0x01	; 1
     f72:	6f 01       	movw	r12, r30
     f74:	c6 01       	movw	r24, r12
     f76:	03 96       	adiw	r24, 0x03	; 3
     f78:	e2 fe       	sbrs	r14, 2
     f7a:	0a c0       	rjmp	.+20     	; 0xf90 <dtoa_prf+0xb6>
     f7c:	3e e4       	ldi	r19, 0x4E	; 78
     f7e:	d6 01       	movw	r26, r12
     f80:	3c 93       	st	X, r19
     f82:	41 e4       	ldi	r20, 0x41	; 65
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	4c 93       	st	X, r20
     f88:	11 97       	sbiw	r26, 0x01	; 1
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	3c 93       	st	X, r19
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <dtoa_prf+0xc2>
     f90:	3e e6       	ldi	r19, 0x6E	; 110
     f92:	f6 01       	movw	r30, r12
     f94:	30 83       	st	Z, r19
     f96:	41 e6       	ldi	r20, 0x61	; 97
     f98:	41 83       	std	Z+1, r20	; 0x01
     f9a:	32 83       	std	Z+2, r19	; 0x02
     f9c:	fc 01       	movw	r30, r24
     f9e:	32 2f       	mov	r19, r18
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	33 23       	and	r19, r19
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <dtoa_prf+0xce>
     fa6:	42 c0       	rjmp	.+132    	; 0x102c <dtoa_prf+0x152>
     fa8:	41 93       	st	Z+, r20
     faa:	31 50       	subi	r19, 0x01	; 1
     fac:	fa cf       	rjmp	.-12     	; 0xfa2 <dtoa_prf+0xc8>
     fae:	42 ff       	sbrs	r20, 2
     fb0:	44 c0       	rjmp	.+136    	; 0x103a <dtoa_prf+0x160>
     fb2:	91 11       	cpse	r25, r1
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <dtoa_prf+0xe0>
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <dtoa_prf+0xe2>
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	81 17       	cp	r24, r17
     fbe:	18 f4       	brcc	.+6      	; 0xfc6 <dtoa_prf+0xec>
     fc0:	21 2f       	mov	r18, r17
     fc2:	28 1b       	sub	r18, r24
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <dtoa_prf+0xee>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	51 11       	cpse	r21, r1
     fca:	0b c0       	rjmp	.+22     	; 0xfe2 <dtoa_prf+0x108>
     fcc:	f6 01       	movw	r30, r12
     fce:	82 2f       	mov	r24, r18
     fd0:	30 e2       	ldi	r19, 0x20	; 32
     fd2:	88 23       	and	r24, r24
     fd4:	19 f0       	breq	.+6      	; 0xfdc <dtoa_prf+0x102>
     fd6:	31 93       	st	Z+, r19
     fd8:	81 50       	subi	r24, 0x01	; 1
     fda:	fb cf       	rjmp	.-10     	; 0xfd2 <dtoa_prf+0xf8>
     fdc:	c2 0e       	add	r12, r18
     fde:	d1 1c       	adc	r13, r1
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	99 23       	and	r25, r25
     fe4:	29 f0       	breq	.+10     	; 0xff0 <dtoa_prf+0x116>
     fe6:	d6 01       	movw	r26, r12
     fe8:	9c 93       	st	X, r25
     fea:	f6 01       	movw	r30, r12
     fec:	31 96       	adiw	r30, 0x01	; 1
     fee:	6f 01       	movw	r12, r30
     ff0:	c6 01       	movw	r24, r12
     ff2:	03 96       	adiw	r24, 0x03	; 3
     ff4:	e2 fe       	sbrs	r14, 2
     ff6:	0b c0       	rjmp	.+22     	; 0x100e <dtoa_prf+0x134>
     ff8:	39 e4       	ldi	r19, 0x49	; 73
     ffa:	d6 01       	movw	r26, r12
     ffc:	3c 93       	st	X, r19
     ffe:	3e e4       	ldi	r19, 0x4E	; 78
    1000:	11 96       	adiw	r26, 0x01	; 1
    1002:	3c 93       	st	X, r19
    1004:	11 97       	sbiw	r26, 0x01	; 1
    1006:	36 e4       	ldi	r19, 0x46	; 70
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	3c 93       	st	X, r19
    100c:	07 c0       	rjmp	.+14     	; 0x101c <dtoa_prf+0x142>
    100e:	39 e6       	ldi	r19, 0x69	; 105
    1010:	f6 01       	movw	r30, r12
    1012:	30 83       	st	Z, r19
    1014:	3e e6       	ldi	r19, 0x6E	; 110
    1016:	31 83       	std	Z+1, r19	; 0x01
    1018:	36 e6       	ldi	r19, 0x66	; 102
    101a:	32 83       	std	Z+2, r19	; 0x02
    101c:	fc 01       	movw	r30, r24
    101e:	32 2f       	mov	r19, r18
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	33 23       	and	r19, r19
    1024:	19 f0       	breq	.+6      	; 0x102c <dtoa_prf+0x152>
    1026:	41 93       	st	Z+, r20
    1028:	31 50       	subi	r19, 0x01	; 1
    102a:	fb cf       	rjmp	.-10     	; 0x1022 <dtoa_prf+0x148>
    102c:	fc 01       	movw	r30, r24
    102e:	e2 0f       	add	r30, r18
    1030:	f1 1d       	adc	r31, r1
    1032:	10 82       	st	Z, r1
    1034:	8e ef       	ldi	r24, 0xFE	; 254
    1036:	9f ef       	ldi	r25, 0xFF	; 255
    1038:	a6 c0       	rjmp	.+332    	; 0x1186 <dtoa_prf+0x2ac>
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	91 11       	cpse	r25, r1
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <dtoa_prf+0x16c>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	16 16       	cp	r1, r22
    1048:	17 06       	cpc	r1, r23
    104a:	1c f4       	brge	.+6      	; 0x1052 <dtoa_prf+0x178>
    104c:	fb 01       	movw	r30, r22
    104e:	31 96       	adiw	r30, 0x01	; 1
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <dtoa_prf+0x17c>
    1052:	e1 e0       	ldi	r30, 0x01	; 1
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	2e 0f       	add	r18, r30
    1058:	3f 1f       	adc	r19, r31
    105a:	bb 20       	and	r11, r11
    105c:	21 f0       	breq	.+8      	; 0x1066 <dtoa_prf+0x18c>
    105e:	eb 2d       	mov	r30, r11
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	31 96       	adiw	r30, 0x01	; 1
    1064:	02 c0       	rjmp	.+4      	; 0x106a <dtoa_prf+0x190>
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	2e 0f       	add	r18, r30
    106c:	3f 1f       	adc	r19, r31
    106e:	e1 2f       	mov	r30, r17
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	2e 17       	cp	r18, r30
    1074:	3f 07       	cpc	r19, r31
    1076:	1c f4       	brge	.+6      	; 0x107e <dtoa_prf+0x1a4>
    1078:	12 1b       	sub	r17, r18
    107a:	21 2f       	mov	r18, r17
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <dtoa_prf+0x1a6>
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	8e 2d       	mov	r24, r14
    1082:	88 71       	andi	r24, 0x18	; 24
    1084:	59 f4       	brne	.+22     	; 0x109c <dtoa_prf+0x1c2>
    1086:	f6 01       	movw	r30, r12
    1088:	82 2f       	mov	r24, r18
    108a:	30 e2       	ldi	r19, 0x20	; 32
    108c:	88 23       	and	r24, r24
    108e:	19 f0       	breq	.+6      	; 0x1096 <dtoa_prf+0x1bc>
    1090:	31 93       	st	Z+, r19
    1092:	81 50       	subi	r24, 0x01	; 1
    1094:	fb cf       	rjmp	.-10     	; 0x108c <dtoa_prf+0x1b2>
    1096:	c2 0e       	add	r12, r18
    1098:	d1 1c       	adc	r13, r1
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	99 23       	and	r25, r25
    109e:	29 f0       	breq	.+10     	; 0x10aa <dtoa_prf+0x1d0>
    10a0:	d6 01       	movw	r26, r12
    10a2:	9c 93       	st	X, r25
    10a4:	f6 01       	movw	r30, r12
    10a6:	31 96       	adiw	r30, 0x01	; 1
    10a8:	6f 01       	movw	r12, r30
    10aa:	51 11       	cpse	r21, r1
    10ac:	0b c0       	rjmp	.+22     	; 0x10c4 <dtoa_prf+0x1ea>
    10ae:	f6 01       	movw	r30, r12
    10b0:	82 2f       	mov	r24, r18
    10b2:	90 e3       	ldi	r25, 0x30	; 48
    10b4:	88 23       	and	r24, r24
    10b6:	19 f0       	breq	.+6      	; 0x10be <dtoa_prf+0x1e4>
    10b8:	91 93       	st	Z+, r25
    10ba:	81 50       	subi	r24, 0x01	; 1
    10bc:	fb cf       	rjmp	.-10     	; 0x10b4 <dtoa_prf+0x1da>
    10be:	c2 0e       	add	r12, r18
    10c0:	d1 1c       	adc	r13, r1
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	0f 2d       	mov	r16, r15
    10c6:	06 0f       	add	r16, r22
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	34 2f       	mov	r19, r20
    10cc:	30 71       	andi	r19, 0x10	; 16
    10ce:	44 ff       	sbrs	r20, 4
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <dtoa_prf+0x1fe>
    10d2:	91 33       	cpi	r25, 0x31	; 49
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <dtoa_prf+0x1fe>
    10d6:	01 50       	subi	r16, 0x01	; 1
    10d8:	10 16       	cp	r1, r16
    10da:	24 f4       	brge	.+8      	; 0x10e4 <dtoa_prf+0x20a>
    10dc:	09 30       	cpi	r16, 0x09	; 9
    10de:	18 f0       	brcs	.+6      	; 0x10e6 <dtoa_prf+0x20c>
    10e0:	08 e0       	ldi	r16, 0x08	; 8
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <dtoa_prf+0x20c>
    10e4:	01 e0       	ldi	r16, 0x01	; 1
    10e6:	ab 01       	movw	r20, r22
    10e8:	77 ff       	sbrs	r23, 7
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <dtoa_prf+0x216>
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	fb 01       	movw	r30, r22
    10f2:	e4 1b       	sub	r30, r20
    10f4:	f5 0b       	sbc	r31, r21
    10f6:	a1 e0       	ldi	r26, 0x01	; 1
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ac 0f       	add	r26, r28
    10fc:	bd 1f       	adc	r27, r29
    10fe:	ea 0f       	add	r30, r26
    1100:	fb 1f       	adc	r31, r27
    1102:	8e e2       	ldi	r24, 0x2E	; 46
    1104:	a8 2e       	mov	r10, r24
    1106:	4b 01       	movw	r8, r22
    1108:	80 1a       	sub	r8, r16
    110a:	91 08       	sbc	r9, r1
    110c:	0b 2d       	mov	r16, r11
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	11 95       	neg	r17
    1112:	01 95       	neg	r16
    1114:	11 09       	sbc	r17, r1
    1116:	4f 3f       	cpi	r20, 0xFF	; 255
    1118:	bf ef       	ldi	r27, 0xFF	; 255
    111a:	5b 07       	cpc	r21, r27
    111c:	21 f4       	brne	.+8      	; 0x1126 <dtoa_prf+0x24c>
    111e:	d6 01       	movw	r26, r12
    1120:	ac 92       	st	X, r10
    1122:	11 96       	adiw	r26, 0x01	; 1
    1124:	6d 01       	movw	r12, r26
    1126:	64 17       	cp	r22, r20
    1128:	75 07       	cpc	r23, r21
    112a:	2c f0       	brlt	.+10     	; 0x1136 <dtoa_prf+0x25c>
    112c:	84 16       	cp	r8, r20
    112e:	95 06       	cpc	r9, r21
    1130:	14 f4       	brge	.+4      	; 0x1136 <dtoa_prf+0x25c>
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <dtoa_prf+0x25e>
    1136:	80 e3       	ldi	r24, 0x30	; 48
    1138:	41 50       	subi	r20, 0x01	; 1
    113a:	51 09       	sbc	r21, r1
    113c:	31 96       	adiw	r30, 0x01	; 1
    113e:	d6 01       	movw	r26, r12
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	7d 01       	movw	r14, r26
    1144:	40 17       	cp	r20, r16
    1146:	51 07       	cpc	r21, r17
    1148:	24 f0       	brlt	.+8      	; 0x1152 <dtoa_prf+0x278>
    114a:	d6 01       	movw	r26, r12
    114c:	8c 93       	st	X, r24
    114e:	67 01       	movw	r12, r14
    1150:	e2 cf       	rjmp	.-60     	; 0x1116 <dtoa_prf+0x23c>
    1152:	64 17       	cp	r22, r20
    1154:	75 07       	cpc	r23, r21
    1156:	39 f4       	brne	.+14     	; 0x1166 <dtoa_prf+0x28c>
    1158:	96 33       	cpi	r25, 0x36	; 54
    115a:	20 f4       	brcc	.+8      	; 0x1164 <dtoa_prf+0x28a>
    115c:	95 33       	cpi	r25, 0x35	; 53
    115e:	19 f4       	brne	.+6      	; 0x1166 <dtoa_prf+0x28c>
    1160:	31 11       	cpse	r19, r1
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <dtoa_prf+0x28c>
    1164:	81 e3       	ldi	r24, 0x31	; 49
    1166:	f6 01       	movw	r30, r12
    1168:	80 83       	st	Z, r24
    116a:	f7 01       	movw	r30, r14
    116c:	82 2f       	mov	r24, r18
    116e:	90 e2       	ldi	r25, 0x20	; 32
    1170:	88 23       	and	r24, r24
    1172:	19 f0       	breq	.+6      	; 0x117a <dtoa_prf+0x2a0>
    1174:	91 93       	st	Z+, r25
    1176:	81 50       	subi	r24, 0x01	; 1
    1178:	fb cf       	rjmp	.-10     	; 0x1170 <dtoa_prf+0x296>
    117a:	f7 01       	movw	r30, r14
    117c:	e2 0f       	add	r30, r18
    117e:	f1 1d       	adc	r31, r1
    1180:	10 82       	st	Z, r1
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	29 96       	adiw	r28, 0x09	; 9
    1188:	ec e0       	ldi	r30, 0x0C	; 12
    118a:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__epilogue_restores__+0xc>

0000118e <__ftoa_engine>:
    118e:	28 30       	cpi	r18, 0x08	; 8
    1190:	08 f0       	brcs	.+2      	; 0x1194 <__ftoa_engine+0x6>
    1192:	27 e0       	ldi	r18, 0x07	; 7
    1194:	33 27       	eor	r19, r19
    1196:	da 01       	movw	r26, r20
    1198:	99 0f       	add	r25, r25
    119a:	31 1d       	adc	r19, r1
    119c:	87 fd       	sbrc	r24, 7
    119e:	91 60       	ori	r25, 0x01	; 1
    11a0:	00 96       	adiw	r24, 0x00	; 0
    11a2:	61 05       	cpc	r22, r1
    11a4:	71 05       	cpc	r23, r1
    11a6:	39 f4       	brne	.+14     	; 0x11b6 <__ftoa_engine+0x28>
    11a8:	32 60       	ori	r19, 0x02	; 2
    11aa:	2e 5f       	subi	r18, 0xFE	; 254
    11ac:	3d 93       	st	X+, r19
    11ae:	30 e3       	ldi	r19, 0x30	; 48
    11b0:	2a 95       	dec	r18
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <__ftoa_engine+0x1e>
    11b4:	08 95       	ret
    11b6:	9f 3f       	cpi	r25, 0xFF	; 255
    11b8:	30 f0       	brcs	.+12     	; 0x11c6 <__ftoa_engine+0x38>
    11ba:	80 38       	cpi	r24, 0x80	; 128
    11bc:	71 05       	cpc	r23, r1
    11be:	61 05       	cpc	r22, r1
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <__ftoa_engine+0x36>
    11c2:	3c 5f       	subi	r19, 0xFC	; 252
    11c4:	3c 5f       	subi	r19, 0xFC	; 252
    11c6:	3d 93       	st	X+, r19
    11c8:	91 30       	cpi	r25, 0x01	; 1
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__ftoa_engine+0x40>
    11cc:	80 68       	ori	r24, 0x80	; 128
    11ce:	91 1d       	adc	r25, r1
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	1f 93       	push	r17
    11d6:	0f 93       	push	r16
    11d8:	ff 92       	push	r15
    11da:	ef 92       	push	r14
    11dc:	19 2f       	mov	r17, r25
    11de:	98 7f       	andi	r25, 0xF8	; 248
    11e0:	96 95       	lsr	r25
    11e2:	e9 2f       	mov	r30, r25
    11e4:	96 95       	lsr	r25
    11e6:	96 95       	lsr	r25
    11e8:	e9 0f       	add	r30, r25
    11ea:	ff 27       	eor	r31, r31
    11ec:	e2 55       	subi	r30, 0x52	; 82
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	99 27       	eor	r25, r25
    11f2:	33 27       	eor	r19, r19
    11f4:	ee 24       	eor	r14, r14
    11f6:	ff 24       	eor	r15, r15
    11f8:	a7 01       	movw	r20, r14
    11fa:	e7 01       	movw	r28, r14
    11fc:	05 90       	lpm	r0, Z+
    11fe:	08 94       	sec
    1200:	07 94       	ror	r0
    1202:	28 f4       	brcc	.+10     	; 0x120e <__ftoa_engine+0x80>
    1204:	36 0f       	add	r19, r22
    1206:	e7 1e       	adc	r14, r23
    1208:	f8 1e       	adc	r15, r24
    120a:	49 1f       	adc	r20, r25
    120c:	51 1d       	adc	r21, r1
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	88 1f       	adc	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	06 94       	lsr	r0
    1218:	a1 f7       	brne	.-24     	; 0x1202 <__ftoa_engine+0x74>
    121a:	05 90       	lpm	r0, Z+
    121c:	07 94       	ror	r0
    121e:	28 f4       	brcc	.+10     	; 0x122a <__ftoa_engine+0x9c>
    1220:	e7 0e       	add	r14, r23
    1222:	f8 1e       	adc	r15, r24
    1224:	49 1f       	adc	r20, r25
    1226:	56 1f       	adc	r21, r22
    1228:	c1 1d       	adc	r28, r1
    122a:	77 0f       	add	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	66 1f       	adc	r22, r22
    1232:	06 94       	lsr	r0
    1234:	a1 f7       	brne	.-24     	; 0x121e <__ftoa_engine+0x90>
    1236:	05 90       	lpm	r0, Z+
    1238:	07 94       	ror	r0
    123a:	28 f4       	brcc	.+10     	; 0x1246 <__ftoa_engine+0xb8>
    123c:	f8 0e       	add	r15, r24
    123e:	49 1f       	adc	r20, r25
    1240:	56 1f       	adc	r21, r22
    1242:	c7 1f       	adc	r28, r23
    1244:	d1 1d       	adc	r29, r1
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	06 94       	lsr	r0
    1250:	a1 f7       	brne	.-24     	; 0x123a <__ftoa_engine+0xac>
    1252:	05 90       	lpm	r0, Z+
    1254:	07 94       	ror	r0
    1256:	20 f4       	brcc	.+8      	; 0x1260 <__ftoa_engine+0xd2>
    1258:	49 0f       	add	r20, r25
    125a:	56 1f       	adc	r21, r22
    125c:	c7 1f       	adc	r28, r23
    125e:	d8 1f       	adc	r29, r24
    1260:	99 0f       	add	r25, r25
    1262:	66 1f       	adc	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	06 94       	lsr	r0
    126a:	a9 f7       	brne	.-22     	; 0x1256 <__ftoa_engine+0xc8>
    126c:	84 91       	lpm	r24, Z
    126e:	10 95       	com	r17
    1270:	17 70       	andi	r17, 0x07	; 7
    1272:	41 f0       	breq	.+16     	; 0x1284 <__ftoa_engine+0xf6>
    1274:	d6 95       	lsr	r29
    1276:	c7 95       	ror	r28
    1278:	57 95       	ror	r21
    127a:	47 95       	ror	r20
    127c:	f7 94       	ror	r15
    127e:	e7 94       	ror	r14
    1280:	1a 95       	dec	r17
    1282:	c1 f7       	brne	.-16     	; 0x1274 <__ftoa_engine+0xe6>
    1284:	e4 e5       	ldi	r30, 0x54	; 84
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	68 94       	set
    128a:	15 90       	lpm	r1, Z+
    128c:	15 91       	lpm	r17, Z+
    128e:	35 91       	lpm	r19, Z+
    1290:	65 91       	lpm	r22, Z+
    1292:	95 91       	lpm	r25, Z+
    1294:	05 90       	lpm	r0, Z+
    1296:	7f e2       	ldi	r23, 0x2F	; 47
    1298:	73 95       	inc	r23
    129a:	e1 18       	sub	r14, r1
    129c:	f1 0a       	sbc	r15, r17
    129e:	43 0b       	sbc	r20, r19
    12a0:	56 0b       	sbc	r21, r22
    12a2:	c9 0b       	sbc	r28, r25
    12a4:	d0 09       	sbc	r29, r0
    12a6:	c0 f7       	brcc	.-16     	; 0x1298 <__ftoa_engine+0x10a>
    12a8:	e1 0c       	add	r14, r1
    12aa:	f1 1e       	adc	r15, r17
    12ac:	43 1f       	adc	r20, r19
    12ae:	56 1f       	adc	r21, r22
    12b0:	c9 1f       	adc	r28, r25
    12b2:	d0 1d       	adc	r29, r0
    12b4:	7e f4       	brtc	.+30     	; 0x12d4 <__ftoa_engine+0x146>
    12b6:	70 33       	cpi	r23, 0x30	; 48
    12b8:	11 f4       	brne	.+4      	; 0x12be <__ftoa_engine+0x130>
    12ba:	8a 95       	dec	r24
    12bc:	e6 cf       	rjmp	.-52     	; 0x128a <__ftoa_engine+0xfc>
    12be:	e8 94       	clt
    12c0:	01 50       	subi	r16, 0x01	; 1
    12c2:	30 f0       	brcs	.+12     	; 0x12d0 <__ftoa_engine+0x142>
    12c4:	08 0f       	add	r16, r24
    12c6:	0a f4       	brpl	.+2      	; 0x12ca <__ftoa_engine+0x13c>
    12c8:	00 27       	eor	r16, r16
    12ca:	02 17       	cp	r16, r18
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <__ftoa_engine+0x142>
    12ce:	20 2f       	mov	r18, r16
    12d0:	23 95       	inc	r18
    12d2:	02 2f       	mov	r16, r18
    12d4:	7a 33       	cpi	r23, 0x3A	; 58
    12d6:	28 f0       	brcs	.+10     	; 0x12e2 <__ftoa_engine+0x154>
    12d8:	79 e3       	ldi	r23, 0x39	; 57
    12da:	7d 93       	st	X+, r23
    12dc:	2a 95       	dec	r18
    12de:	e9 f7       	brne	.-6      	; 0x12da <__ftoa_engine+0x14c>
    12e0:	10 c0       	rjmp	.+32     	; 0x1302 <__ftoa_engine+0x174>
    12e2:	7d 93       	st	X+, r23
    12e4:	2a 95       	dec	r18
    12e6:	89 f6       	brne	.-94     	; 0x128a <__ftoa_engine+0xfc>
    12e8:	06 94       	lsr	r0
    12ea:	97 95       	ror	r25
    12ec:	67 95       	ror	r22
    12ee:	37 95       	ror	r19
    12f0:	17 95       	ror	r17
    12f2:	17 94       	ror	r1
    12f4:	e1 18       	sub	r14, r1
    12f6:	f1 0a       	sbc	r15, r17
    12f8:	43 0b       	sbc	r20, r19
    12fa:	56 0b       	sbc	r21, r22
    12fc:	c9 0b       	sbc	r28, r25
    12fe:	d0 09       	sbc	r29, r0
    1300:	98 f0       	brcs	.+38     	; 0x1328 <__ftoa_engine+0x19a>
    1302:	23 95       	inc	r18
    1304:	7e 91       	ld	r23, -X
    1306:	73 95       	inc	r23
    1308:	7a 33       	cpi	r23, 0x3A	; 58
    130a:	08 f0       	brcs	.+2      	; 0x130e <__ftoa_engine+0x180>
    130c:	70 e3       	ldi	r23, 0x30	; 48
    130e:	7c 93       	st	X, r23
    1310:	20 13       	cpse	r18, r16
    1312:	b8 f7       	brcc	.-18     	; 0x1302 <__ftoa_engine+0x174>
    1314:	7e 91       	ld	r23, -X
    1316:	70 61       	ori	r23, 0x10	; 16
    1318:	7d 93       	st	X+, r23
    131a:	30 f0       	brcs	.+12     	; 0x1328 <__ftoa_engine+0x19a>
    131c:	83 95       	inc	r24
    131e:	71 e3       	ldi	r23, 0x31	; 49
    1320:	7d 93       	st	X+, r23
    1322:	70 e3       	ldi	r23, 0x30	; 48
    1324:	2a 95       	dec	r18
    1326:	e1 f7       	brne	.-8      	; 0x1320 <__ftoa_engine+0x192>
    1328:	11 24       	eor	r1, r1
    132a:	ef 90       	pop	r14
    132c:	ff 90       	pop	r15
    132e:	0f 91       	pop	r16
    1330:	1f 91       	pop	r17
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	99 27       	eor	r25, r25
    1338:	87 fd       	sbrc	r24, 7
    133a:	90 95       	com	r25
    133c:	08 95       	ret

0000133e <strrev>:
    133e:	dc 01       	movw	r26, r24
    1340:	fc 01       	movw	r30, r24
    1342:	67 2f       	mov	r22, r23
    1344:	71 91       	ld	r23, Z+
    1346:	77 23       	and	r23, r23
    1348:	e1 f7       	brne	.-8      	; 0x1342 <strrev+0x4>
    134a:	32 97       	sbiw	r30, 0x02	; 2
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <strrev+0x18>
    134e:	7c 91       	ld	r23, X
    1350:	6d 93       	st	X+, r22
    1352:	70 83       	st	Z, r23
    1354:	62 91       	ld	r22, -Z
    1356:	ae 17       	cp	r26, r30
    1358:	bf 07       	cpc	r27, r31
    135a:	c8 f3       	brcs	.-14     	; 0x134e <strrev+0x10>
    135c:	08 95       	ret

0000135e <__prologue_saves__>:
    135e:	2f 92       	push	r2
    1360:	3f 92       	push	r3
    1362:	4f 92       	push	r4
    1364:	5f 92       	push	r5
    1366:	6f 92       	push	r6
    1368:	7f 92       	push	r7
    136a:	8f 92       	push	r8
    136c:	9f 92       	push	r9
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	ca 1b       	sub	r28, r26
    1388:	db 0b       	sbc	r29, r27
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	09 94       	ijmp

00001396 <__epilogue_restores__>:
    1396:	2a 88       	ldd	r2, Y+18	; 0x12
    1398:	39 88       	ldd	r3, Y+17	; 0x11
    139a:	48 88       	ldd	r4, Y+16	; 0x10
    139c:	5f 84       	ldd	r5, Y+15	; 0x0f
    139e:	6e 84       	ldd	r6, Y+14	; 0x0e
    13a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13a8:	b9 84       	ldd	r11, Y+9	; 0x09
    13aa:	c8 84       	ldd	r12, Y+8	; 0x08
    13ac:	df 80       	ldd	r13, Y+7	; 0x07
    13ae:	ee 80       	ldd	r14, Y+6	; 0x06
    13b0:	fd 80       	ldd	r15, Y+5	; 0x05
    13b2:	0c 81       	ldd	r16, Y+4	; 0x04
    13b4:	1b 81       	ldd	r17, Y+3	; 0x03
    13b6:	aa 81       	ldd	r26, Y+2	; 0x02
    13b8:	b9 81       	ldd	r27, Y+1	; 0x01
    13ba:	ce 0f       	add	r28, r30
    13bc:	d1 1d       	adc	r29, r1
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	ed 01       	movw	r28, r26
    13ca:	08 95       	ret

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
