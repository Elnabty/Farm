
atmega_ethernet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001166  000011fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d4  008000a0  008000a0  0000123a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026be  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c27  00000000  00000000  00003b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000138f  00000000  00000000  00004755  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  00005ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073f  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aeb  00000000  00000000  0000668f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000817a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__ctors_end>
       4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
       8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
       c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      10:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      14:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      18:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      20:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      24:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      28:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      2c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      30:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      34:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      38:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      3c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      40:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      44:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      48:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      4c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
      50:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	48 54       	subi	r20, 0x48	; 72
      56:	54 50       	subi	r21, 0x04	; 4
      58:	2f 31       	cpi	r18, 0x1F	; 31
      5a:	2e 30       	cpi	r18, 0x0E	; 14
      5c:	20 34       	cpi	r18, 0x40	; 64
      5e:	30 31       	cpi	r19, 0x10	; 16
      60:	20 55       	subi	r18, 0x50	; 80
      62:	6e 61       	ori	r22, 0x1E	; 30
      64:	75 74       	andi	r23, 0x45	; 69
      66:	68 6f       	ori	r22, 0xF8	; 248
      68:	72 69       	ori	r23, 0x92	; 146
      6a:	7a 65       	ori	r23, 0x5A	; 90
      6c:	64 0d       	add	r22, r4
      6e:	0a 43       	sbci	r16, 0x3A	; 58
      70:	6f 6e       	ori	r22, 0xEF	; 239
      72:	74 65       	ori	r23, 0x54	; 84
      74:	6e 74       	andi	r22, 0x4E	; 78
      76:	2d 54       	subi	r18, 0x4D	; 77
      78:	79 70       	andi	r23, 0x09	; 9
      7a:	65 3a       	cpi	r22, 0xA5	; 165
      7c:	20 74       	andi	r18, 0x40	; 64
      7e:	65 78       	andi	r22, 0x85	; 133
      80:	74 2f       	mov	r23, r20
      82:	68 74       	andi	r22, 0x48	; 72
      84:	6d 6c       	ori	r22, 0xCD	; 205
      86:	0d 0a       	sbc	r0, r29
      88:	0d 0a       	sbc	r0, r29
      8a:	3c 68       	ori	r19, 0x8C	; 140
      8c:	31 3e       	cpi	r19, 0xE1	; 225
      8e:	34 30       	cpi	r19, 0x04	; 4
      90:	31 20       	and	r3, r1
      92:	55 6e       	ori	r21, 0xE5	; 229
      94:	61 75       	andi	r22, 0x51	; 81
      96:	74 68       	ori	r23, 0x84	; 132
      98:	6f 72       	andi	r22, 0x2F	; 47
      9a:	69 7a       	andi	r22, 0xA9	; 169
      9c:	65 64       	ori	r22, 0x45	; 69
      9e:	3c 2f       	mov	r19, r28
      a0:	68 31       	cpi	r22, 0x18	; 24
      a2:	3e 00       	.word	0x003e	; ????

000000a4 <__c.2199>:
      a4:	3c 70 3e 55 73 61 67 65 3a 20 68 74 74 70 3a 2f     <p>Usage: http:/
      b4:	2f 68 6f 73 74 5f 6f 72 5f 69 70 2f 70 61 73 73     /host_or_ip/pass
      c4:	77 6f 72 64 3c 2f 70 3e 0a 00                       word</p>..

000000ce <__c.2197>:
      ce:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      de:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      ee:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000000fb <__c.2194>:
      fb:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     10b:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     11b:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 3c 68 31 3e     ext/html....<h1>
     12b:	32 30 30 20 4f 4b 3c 2f 68 31 3e 00                 200 OK</h1>.

00000137 <__c.2180>:
     137:	3c 2f 63 65 6e 74 65 72 3e 3c 68 72 3e 3c 62 72     </center><hr><br
     147:	3e 76 65 72 73 69 6f 6e 20 32 2e 31 30 2c 20 74     >version 2.10, t
     157:	75 78 67 72 61 70 68 69 63 73 2e 6f 72 67 0a 00     uxgraphics.org..

00000167 <__c.2178>:
     167:	2f 31 22 3e 53 77 69 74 63 68 20 6f 6e 3c 2f 61     /1">Switch on</a
     177:	3e 3c 70 3e 00                                      ><p>.

0000017c <__c.2176>:
     17c:	2f 30 22 3e 53 77 69 74 63 68 20 6f 66 66 3c 2f     /0">Switch off</
     18c:	61 3e 3c 70 3e 00                                   a><p>.

00000192 <__c.2174>:
     192:	20 3c 73 6d 61 6c 6c 3e 3c 61 20 68 72 65 66 3d      <small><a href=
     1a2:	22 2e 22 3e 5b 72 65 66 72 65 73 68 20 73 74 61     ".">[refresh sta
     1b2:	74 75 73 5d 3c 2f 61 3e 3c 2f 73 6d 61 6c 6c 3e     tus]</a></small>
     1c2:	3c 2f 70 3e 0a 3c 70 3e 3c 61 20 68 72 65 66 3d     </p>.<p><a href=
     1d2:	22 2e 00                                            "..

000001d5 <__c.2172>:
     1d5:	4f 46 46 00                                         OFF.

000001d9 <__c.2170>:
     1d9:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 23 30 30     <font color="#00
     1e9:	46 46 30 30 22 3e 20 4f 4e 3c 2f 66 6f 6e 74 3e     FF00"> ON</font>
	...

000001fa <__c.2168>:
     1fa:	3c 63 65 6e 74 65 72 3e 3c 70 3e 4f 75 74 70 75     <center><p>Outpu
     20a:	74 20 69 73 3a 20 00                                t is: .

00000211 <__c.2166>:
     211:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
     221:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     231:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
     241:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

00000250 <__c.2159>:
     250:	61 64 64 20 61 20 74 72 61 69 6c 69 6e 67 20 73     add a trailing s
     260:	6c 61 73 68 20 74 6f 20 74 68 65 20 75 72 6c 0a     lash to the url.
	...

00000271 <__c.2157>:
     271:	3c 68 31 3e 33 30 31 20 4d 6f 76 65 64 20 50 65     <h1>301 Moved Pe
     281:	72 6d 61 6e 65 6e 74 6c 79 3c 2f 68 31 3e 0a 00     rmanently</h1>..

00000291 <__c.2155>:
     291:	2f 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a     /..Content-Type:
     2a1:	20 74 65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67      text/html..Prag
     2b1:	6d 61 3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a     ma: no-cache....
	...

000002c2 <__c.2153>:
     2c2:	48 54 54 50 2f 31 2e 30 20 33 30 31 20 4d 6f 76     HTTP/1.0 301 Mov
     2d2:	65 64 20 50 65 72 6d 61 6e 65 6e 74 6c 79 0d 0a     ed Permanently..
     2e2:	4c 6f 63 61 74 69 6f 6e 3a 20 00 00                 Location: ..

000002ee <__ctors_end>:
     2ee:	11 24       	eor	r1, r1
     2f0:	1f be       	out	0x3f, r1	; 63
     2f2:	cf e5       	ldi	r28, 0x5F	; 95
     2f4:	d4 e0       	ldi	r29, 0x04	; 4
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	cd bf       	out	0x3d, r28	; 61

000002fa <__do_copy_data>:
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	a0 e6       	ldi	r26, 0x60	; 96
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e6 e6       	ldi	r30, 0x66	; 102
     302:	f1 e1       	ldi	r31, 0x11	; 17
     304:	02 c0       	rjmp	.+4      	; 0x30a <__do_copy_data+0x10>
     306:	05 90       	lpm	r0, Z+
     308:	0d 92       	st	X+, r0
     30a:	a0 3a       	cpi	r26, 0xA0	; 160
     30c:	b1 07       	cpc	r27, r17
     30e:	d9 f7       	brne	.-10     	; 0x306 <__do_copy_data+0xc>

00000310 <__do_clear_bss>:
     310:	22 e0       	ldi	r18, 0x02	; 2
     312:	a0 ea       	ldi	r26, 0xA0	; 160
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	01 c0       	rjmp	.+2      	; 0x31a <.do_clear_bss_start>

00000318 <.do_clear_bss_loop>:
     318:	1d 92       	st	X+, r1

0000031a <.do_clear_bss_start>:
     31a:	a4 37       	cpi	r26, 0x74	; 116
     31c:	b2 07       	cpc	r27, r18
     31e:	e1 f7       	brne	.-8      	; 0x318 <.do_clear_bss_loop>
     320:	0e 94 fd 06 	call	0xdfa	; 0xdfa <main>
     324:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_exit>

00000328 <__bad_interrupt>:
     328:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000032c <enc28j60ReadOp>:
// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
}
     32c:	c4 98       	cbi	0x18, 4	; 24
     32e:	96 2f       	mov	r25, r22
     330:	6f 71       	andi	r22, 0x1F	; 31
     332:	86 2b       	or	r24, r22
     334:	8f b9       	out	0x0f, r24	; 15
     336:	77 9b       	sbis	0x0e, 7	; 14
     338:	fe cf       	rjmp	.-4      	; 0x336 <enc28j60ReadOp+0xa>
     33a:	1f b8       	out	0x0f, r1	; 15
     33c:	77 9b       	sbis	0x0e, 7	; 14
     33e:	fe cf       	rjmp	.-4      	; 0x33c <enc28j60ReadOp+0x10>
     340:	99 23       	and	r25, r25
     342:	1c f4       	brge	.+6      	; 0x34a <enc28j60ReadOp+0x1e>
     344:	1f b8       	out	0x0f, r1	; 15
     346:	77 9b       	sbis	0x0e, 7	; 14
     348:	fe cf       	rjmp	.-4      	; 0x346 <enc28j60ReadOp+0x1a>
     34a:	c4 9a       	sbi	0x18, 4	; 24
     34c:	8f b1       	in	r24, 0x0f	; 15
     34e:	08 95       	ret

00000350 <enc28j60WriteOp>:
     350:	c4 98       	cbi	0x18, 4	; 24
     352:	6f 71       	andi	r22, 0x1F	; 31
     354:	86 2b       	or	r24, r22
     356:	8f b9       	out	0x0f, r24	; 15
     358:	77 9b       	sbis	0x0e, 7	; 14
     35a:	fe cf       	rjmp	.-4      	; 0x358 <enc28j60WriteOp+0x8>
     35c:	4f b9       	out	0x0f, r20	; 15
     35e:	77 9b       	sbis	0x0e, 7	; 14
     360:	fe cf       	rjmp	.-4      	; 0x35e <enc28j60WriteOp+0xe>
     362:	c4 9a       	sbi	0x18, 4	; 24
     364:	08 95       	ret

00000366 <enc28j60ReadBuffer>:
     366:	fb 01       	movw	r30, r22
     368:	c4 98       	cbi	0x18, 4	; 24
     36a:	2a e3       	ldi	r18, 0x3A	; 58
     36c:	2f b9       	out	0x0f, r18	; 15
     36e:	77 9b       	sbis	0x0e, 7	; 14
     370:	fe cf       	rjmp	.-4      	; 0x36e <enc28j60ReadBuffer+0x8>
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	61 f0       	breq	.+24     	; 0x38e <enc28j60ReadBuffer+0x28>
     376:	df 01       	movw	r26, r30
     378:	a8 0f       	add	r26, r24
     37a:	b9 1f       	adc	r27, r25
     37c:	1f b8       	out	0x0f, r1	; 15
     37e:	77 9b       	sbis	0x0e, 7	; 14
     380:	fe cf       	rjmp	.-4      	; 0x37e <enc28j60ReadBuffer+0x18>
     382:	9f b1       	in	r25, 0x0f	; 15
     384:	91 93       	st	Z+, r25
     386:	ea 17       	cp	r30, r26
     388:	fb 07       	cpc	r31, r27
     38a:	c1 f7       	brne	.-16     	; 0x37c <enc28j60ReadBuffer+0x16>
     38c:	01 c0       	rjmp	.+2      	; 0x390 <enc28j60ReadBuffer+0x2a>
     38e:	df 01       	movw	r26, r30
     390:	1c 92       	st	X, r1
     392:	c4 9a       	sbi	0x18, 4	; 24
     394:	08 95       	ret

00000396 <enc28j60WriteBuffer>:
     396:	fb 01       	movw	r30, r22
     398:	c4 98       	cbi	0x18, 4	; 24
     39a:	2a e7       	ldi	r18, 0x7A	; 122
     39c:	2f b9       	out	0x0f, r18	; 15
     39e:	77 9b       	sbis	0x0e, 7	; 14
     3a0:	fe cf       	rjmp	.-4      	; 0x39e <enc28j60WriteBuffer+0x8>
     3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <enc28j60WriteBuffer+0x1e>
     3a4:	9f 01       	movw	r18, r30
     3a6:	28 0f       	add	r18, r24
     3a8:	39 1f       	adc	r19, r25
     3aa:	91 91       	ld	r25, Z+
     3ac:	9f b9       	out	0x0f, r25	; 15
     3ae:	77 9b       	sbis	0x0e, 7	; 14
     3b0:	fe cf       	rjmp	.-4      	; 0x3ae <enc28j60WriteBuffer+0x18>
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <enc28j60WriteBuffer+0x24>
     3b4:	00 97       	sbiw	r24, 0x00	; 0
     3b6:	b1 f7       	brne	.-20     	; 0x3a4 <enc28j60WriteBuffer+0xe>
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <enc28j60WriteBuffer+0x2a>
     3ba:	2e 17       	cp	r18, r30
     3bc:	3f 07       	cpc	r19, r31
     3be:	a9 f7       	brne	.-22     	; 0x3aa <enc28j60WriteBuffer+0x14>
     3c0:	c4 9a       	sbi	0x18, 4	; 24
     3c2:	08 95       	ret

000003c4 <enc28j60SetBank>:
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	18 2f       	mov	r17, r24
     3cc:	10 76       	andi	r17, 0x60	; 96
     3ce:	c1 2f       	mov	r28, r17
     3d0:	d0 e0       	ldi	r29, 0x00	; 0
     3d2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <Enc28j60Bank>
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	c8 17       	cp	r28, r24
     3da:	d9 07       	cpc	r29, r25
     3dc:	b1 f0       	breq	.+44     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3de:	43 e0       	ldi	r20, 0x03	; 3
     3e0:	6f e1       	ldi	r22, 0x1F	; 31
     3e2:	80 ea       	ldi	r24, 0xA0	; 160
     3e4:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
     3e8:	ae 01       	movw	r20, r28
     3ea:	55 95       	asr	r21
     3ec:	47 95       	ror	r20
     3ee:	55 95       	asr	r21
     3f0:	47 95       	ror	r20
     3f2:	55 95       	asr	r21
     3f4:	47 95       	ror	r20
     3f6:	55 95       	asr	r21
     3f8:	47 95       	ror	r20
     3fa:	55 95       	asr	r21
     3fc:	47 95       	ror	r20
     3fe:	6f e1       	ldi	r22, 0x1F	; 31
     400:	80 e8       	ldi	r24, 0x80	; 128
     402:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
     406:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <Enc28j60Bank>
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	08 95       	ret

00000412 <enc28j60Read>:
     412:	cf 93       	push	r28
     414:	c8 2f       	mov	r28, r24
     416:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <enc28j60SetBank>
     41a:	6c 2f       	mov	r22, r28
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 96 01 	call	0x32c	; 0x32c <enc28j60ReadOp>
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <enc28j60Write>:
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	c8 2f       	mov	r28, r24
     42c:	d6 2f       	mov	r29, r22
     42e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <enc28j60SetBank>
     432:	4d 2f       	mov	r20, r29
     434:	6c 2f       	mov	r22, r28
     436:	80 e4       	ldi	r24, 0x40	; 64
     438:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <enc28j60PhyWrite>:
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	d6 2f       	mov	r29, r22
     448:	c7 2f       	mov	r28, r23
     44a:	68 2f       	mov	r22, r24
     44c:	84 ed       	ldi	r24, 0xD4	; 212
     44e:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     452:	6d 2f       	mov	r22, r29
     454:	86 ed       	ldi	r24, 0xD6	; 214
     456:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     45a:	6c 2f       	mov	r22, r28
     45c:	87 ed       	ldi	r24, 0xD7	; 215
     45e:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     462:	03 c0       	rjmp	.+6      	; 0x46a <__stack+0xb>
     464:	85 e0       	ldi	r24, 0x05	; 5
     466:	8a 95       	dec	r24
     468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
     46a:	8a ee       	ldi	r24, 0xEA	; 234
     46c:	0e 94 09 02 	call	0x412	; 0x412 <enc28j60Read>
     470:	80 fd       	sbrc	r24, 0
     472:	f8 cf       	rjmp	.-16     	; 0x464 <__stack+0x5>
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <enc28j60clkout>:
     47a:	68 2f       	mov	r22, r24
     47c:	67 70       	andi	r22, 0x07	; 7
     47e:	85 e7       	ldi	r24, 0x75	; 117
     480:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     484:	08 95       	ret

00000486 <enc28j60Init>:
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ec 01       	movw	r28, r24
     48c:	bc 9a       	sbi	0x17, 4	; 23
     48e:	c4 9a       	sbi	0x18, 4	; 24
     490:	0e 94 8b 08 	call	0x1116	; 0x1116 <spi_init>
     494:	4f ef       	ldi	r20, 0xFF	; 255
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	8f ef       	ldi	r24, 0xFF	; 255
     49a:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
     49e:	82 e3       	ldi	r24, 0x32	; 50
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 98 08 	call	0x1130	; 0x1130 <delay_ms>
     4a6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
     4aa:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	89 e0       	ldi	r24, 0x09	; 9
     4ba:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	8c e0       	ldi	r24, 0x0C	; 12
     4c2:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	8d e0       	ldi	r24, 0x0D	; 13
     4ca:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4ce:	6e ef       	ldi	r22, 0xFE	; 254
     4d0:	8a e0       	ldi	r24, 0x0A	; 10
     4d2:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4d6:	69 e1       	ldi	r22, 0x19	; 25
     4d8:	8b e0       	ldi	r24, 0x0B	; 11
     4da:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4de:	6f ef       	ldi	r22, 0xFF	; 255
     4e0:	84 e0       	ldi	r24, 0x04	; 4
     4e2:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4e6:	69 e1       	ldi	r22, 0x19	; 25
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4ee:	6f ef       	ldi	r22, 0xFF	; 255
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4f6:	6f e1       	ldi	r22, 0x1F	; 31
     4f8:	87 e0       	ldi	r24, 0x07	; 7
     4fa:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     4fe:	60 eb       	ldi	r22, 0xB0	; 176
     500:	88 e3       	ldi	r24, 0x38	; 56
     502:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     506:	6f e3       	ldi	r22, 0x3F	; 63
     508:	88 e2       	ldi	r24, 0x28	; 40
     50a:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     50e:	60 e3       	ldi	r22, 0x30	; 48
     510:	89 e2       	ldi	r24, 0x29	; 41
     512:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     516:	69 ef       	ldi	r22, 0xF9	; 249
     518:	80 e3       	ldi	r24, 0x30	; 48
     51a:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     51e:	67 ef       	ldi	r22, 0xF7	; 247
     520:	81 e3       	ldi	r24, 0x31	; 49
     522:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     526:	6d e0       	ldi	r22, 0x0D	; 13
     528:	80 ec       	ldi	r24, 0xC0	; 192
     52a:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	81 ec       	ldi	r24, 0xC1	; 193
     532:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     536:	42 e3       	ldi	r20, 0x32	; 50
     538:	62 ec       	ldi	r22, 0xC2	; 194
     53a:	80 e8       	ldi	r24, 0x80	; 128
     53c:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
     540:	62 e1       	ldi	r22, 0x12	; 18
     542:	86 ec       	ldi	r24, 0xC6	; 198
     544:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     548:	6c e0       	ldi	r22, 0x0C	; 12
     54a:	87 ec       	ldi	r24, 0xC7	; 199
     54c:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     550:	62 e1       	ldi	r22, 0x12	; 18
     552:	84 ec       	ldi	r24, 0xC4	; 196
     554:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     558:	6c ed       	ldi	r22, 0xDC	; 220
     55a:	8a ec       	ldi	r24, 0xCA	; 202
     55c:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     560:	65 e0       	ldi	r22, 0x05	; 5
     562:	8b ec       	ldi	r24, 0xCB	; 203
     564:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     568:	68 81       	ld	r22, Y
     56a:	84 ee       	ldi	r24, 0xE4	; 228
     56c:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     570:	69 81       	ldd	r22, Y+1	; 0x01
     572:	85 ee       	ldi	r24, 0xE5	; 229
     574:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     578:	6a 81       	ldd	r22, Y+2	; 0x02
     57a:	82 ee       	ldi	r24, 0xE2	; 226
     57c:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     580:	6b 81       	ldd	r22, Y+3	; 0x03
     582:	83 ee       	ldi	r24, 0xE3	; 227
     584:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     588:	6c 81       	ldd	r22, Y+4	; 0x04
     58a:	80 ee       	ldi	r24, 0xE0	; 224
     58c:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     590:	6d 81       	ldd	r22, Y+5	; 0x05
     592:	81 ee       	ldi	r24, 0xE1	; 225
     594:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	71 e0       	ldi	r23, 0x01	; 1
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	0e 94 21 02 	call	0x442	; 0x442 <enc28j60PhyWrite>
     5a2:	8f e1       	ldi	r24, 0x1F	; 31
     5a4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <enc28j60SetBank>
     5a8:	40 ec       	ldi	r20, 0xC0	; 192
     5aa:	6b e1       	ldi	r22, 0x1B	; 27
     5ac:	80 e8       	ldi	r24, 0x80	; 128
     5ae:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
     5b2:	44 e0       	ldi	r20, 0x04	; 4
     5b4:	6f e1       	ldi	r22, 0x1F	; 31
     5b6:	80 e8       	ldi	r24, 0x80	; 128
     5b8:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ec 01       	movw	r28, r24
     5cc:	8b 01       	movw	r16, r22
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     5ce:	6f ef       	ldi	r22, 0xFF	; 255
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     5d6:	69 e1       	ldi	r22, 0x19	; 25
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     5de:	6c 2f       	mov	r22, r28
     5e0:	61 50       	subi	r22, 0x01	; 1
     5e2:	86 e0       	ldi	r24, 0x06	; 6
     5e4:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     5e8:	ce 01       	movw	r24, r28
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	96 4e       	sbci	r25, 0xE6	; 230
     5ee:	69 2f       	mov	r22, r25
     5f0:	87 e0       	ldi	r24, 0x07	; 7
     5f2:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	8a e7       	ldi	r24, 0x7A	; 122
     5fc:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
     600:	b8 01       	movw	r22, r16
     602:	ce 01       	movw	r24, r28
     604:	0e 94 cb 01 	call	0x396	; 0x396 <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     608:	48 e0       	ldi	r20, 0x08	; 8
     60a:	6f e1       	ldi	r22, 0x1F	; 31
     60c:	80 e8       	ldi	r24, 0x80	; 128
     60e:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
     612:	8c e1       	ldi	r24, 0x1C	; 28
     614:	0e 94 09 02 	call	0x412	; 0x412 <enc28j60Read>
     618:	81 ff       	sbrs	r24, 1
     61a:	05 c0       	rjmp	.+10     	; 0x626 <enc28j60PacketSend+0x64>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
     61c:	48 e0       	ldi	r20, 0x08	; 8
     61e:	6f e1       	ldi	r22, 0x1F	; 31
     620:	80 ea       	ldi	r24, 0xA0	; 160
     622:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
        }
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     630:	9f 92       	push	r9
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	5c 01       	movw	r10, r24
     648:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     64a:	89 e3       	ldi	r24, 0x39	; 57
     64c:	0e 94 09 02 	call	0x412	; 0x412 <enc28j60Read>
     650:	88 23       	and	r24, r24
     652:	09 f4       	brne	.+2      	; 0x656 <enc28j60PacketReceive+0x26>
     654:	51 c0       	rjmp	.+162    	; 0x6f8 <enc28j60PacketReceive+0xc8>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
     656:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end>
     65a:	c0 91 a1 00 	lds	r28, 0x00A1	; 0x8000a1 <__data_end+0x1>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
     664:	6c 2f       	mov	r22, r28
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	8a e3       	ldi	r24, 0x3A	; 58
     670:	0e 94 96 01 	call	0x32c	; 0x32c <enc28j60ReadOp>
     674:	c8 2f       	mov	r28, r24
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	8a e3       	ldi	r24, 0x3A	; 58
     67a:	0e 94 96 01 	call	0x32c	; 0x32c <enc28j60ReadOp>
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	d8 2b       	or	r29, r24
     682:	d0 93 a1 00 	sts	0x00A1, r29	; 0x8000a1 <__data_end+0x1>
     686:	c0 93 a0 00 	sts	0x00A0, r28	; 0x8000a0 <__data_end>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	8a e3       	ldi	r24, 0x3A	; 58
     68e:	0e 94 96 01 	call	0x32c	; 0x32c <enc28j60ReadOp>
     692:	08 2f       	mov	r16, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	8a e3       	ldi	r24, 0x3A	; 58
     698:	0e 94 96 01 	call	0x32c	; 0x32c <enc28j60ReadOp>
     69c:	98 2e       	mov	r9, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	8a e3       	ldi	r24, 0x3A	; 58
     6a2:	0e 94 96 01 	call	0x32c	; 0x32c <enc28j60ReadOp>
     6a6:	c8 2e       	mov	r12, r24
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	8a e3       	ldi	r24, 0x3A	; 58
     6ac:	0e 94 96 01 	call	0x32c	; 0x32c <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     6b0:	c7 fe       	sbrs	r12, 7
     6b2:	10 c0       	rjmp	.+32     	; 0x6d4 <enc28j60PacketReceive+0xa4>
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	a8 1a       	sub	r10, r24
     6b8:	b1 08       	sbc	r11, r1
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	19 29       	or	r17, r9
     6be:	04 50       	subi	r16, 0x04	; 4
     6c0:	11 09       	sbc	r17, r1
     6c2:	a0 16       	cp	r10, r16
     6c4:	b1 06       	cpc	r11, r17
     6c6:	08 f4       	brcc	.+2      	; 0x6ca <enc28j60PacketReceive+0x9a>
     6c8:	85 01       	movw	r16, r10
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     6ca:	b7 01       	movw	r22, r14
     6cc:	c8 01       	movw	r24, r16
     6ce:	0e 94 b3 01 	call	0x366	; 0x366 <enc28j60ReadBuffer>
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <enc28j60PacketReceive+0xa8>
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
     6d4:	00 e0       	ldi	r16, 0x00	; 0
     6d6:	10 e0       	ldi	r17, 0x00	; 0
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
     6d8:	6c 2f       	mov	r22, r28
     6da:	8c e0       	ldi	r24, 0x0C	; 12
     6dc:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
     6e0:	6d 2f       	mov	r22, r29
     6e2:	8d e0       	ldi	r24, 0x0D	; 13
     6e4:	0e 94 13 02 	call	0x426	; 0x426 <enc28j60Write>
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     6e8:	40 e4       	ldi	r20, 0x40	; 64
     6ea:	6e e1       	ldi	r22, 0x1E	; 30
     6ec:	80 e8       	ldi	r24, 0x80	; 128
     6ee:	0e 94 a8 01 	call	0x350	; 0x350 <enc28j60WriteOp>
	return(len);
     6f2:	80 2f       	mov	r24, r16
     6f4:	91 2f       	mov	r25, r17
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <enc28j60PacketReceive+0xcc>
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	9f 90       	pop	r9
     712:	08 95       	ret

00000714 <checksum>:
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
typedef char PROGMEM prog_char;
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	ec 01       	movw	r28, r24
     722:	db 01       	movw	r26, r22
        uint32_t sum = 0;

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
     724:	41 30       	cpi	r20, 0x01	; 1
     726:	61 f4       	brne	.+24     	; 0x740 <checksum+0x2c>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     728:	6b 01       	movw	r12, r22
     72a:	88 e0       	ldi	r24, 0x08	; 8
     72c:	c8 1a       	sub	r12, r24
     72e:	d1 08       	sbc	r13, r1
     730:	e1 2c       	mov	r14, r1
     732:	f1 2c       	mov	r15, r1
     734:	81 e1       	ldi	r24, 0x11	; 17
     736:	c8 0e       	add	r12, r24
     738:	d1 1c       	adc	r13, r1
     73a:	e1 1c       	adc	r14, r1
     73c:	f1 1c       	adc	r15, r1
     73e:	11 c0       	rjmp	.+34     	; 0x762 <checksum+0x4e>
        }
        if(type==2){
     740:	42 30       	cpi	r20, 0x02	; 2
     742:	61 f4       	brne	.+24     	; 0x75c <checksum+0x48>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     744:	6b 01       	movw	r12, r22
     746:	88 e0       	ldi	r24, 0x08	; 8
     748:	c8 1a       	sub	r12, r24
     74a:	d1 08       	sbc	r13, r1
     74c:	e1 2c       	mov	r14, r1
     74e:	f1 2c       	mov	r15, r1
     750:	86 e0       	ldi	r24, 0x06	; 6
     752:	c8 0e       	add	r12, r24
     754:	d1 1c       	adc	r13, r1
     756:	e1 1c       	adc	r14, r1
     758:	f1 1c       	adc	r15, r1
     75a:	03 c0       	rjmp	.+6      	; 0x762 <checksum+0x4e>
typedef char PROGMEM prog_char;
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
        // type 0=ip 
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
     75c:	c1 2c       	mov	r12, r1
     75e:	d1 2c       	mov	r13, r1
     760:	76 01       	movw	r14, r12
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     762:	a2 30       	cpi	r26, 0x02	; 2
     764:	b1 05       	cpc	r27, r1
     766:	f0 f0       	brcs	.+60     	; 0x7a4 <checksum+0x90>
     768:	9d 01       	movw	r18, r26
     76a:	fe 01       	movw	r30, r28
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     76c:	40 81       	ld	r20, Z
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	76 2f       	mov	r23, r22
     776:	65 2f       	mov	r22, r21
     778:	54 2f       	mov	r21, r20
     77a:	44 27       	eor	r20, r20
     77c:	81 81       	ldd	r24, Z+1	; 0x01
     77e:	48 2b       	or	r20, r24
     780:	c4 0e       	add	r12, r20
     782:	d5 1e       	adc	r13, r21
     784:	e6 1e       	adc	r14, r22
     786:	f7 1e       	adc	r15, r23
                buf+=2;
     788:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     78a:	22 50       	subi	r18, 0x02	; 2
     78c:	31 09       	sbc	r19, r1
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     78e:	22 30       	cpi	r18, 0x02	; 2
     790:	31 05       	cpc	r19, r1
     792:	60 f7       	brcc	.-40     	; 0x76c <checksum+0x58>
     794:	cd 01       	movw	r24, r26
     796:	02 97       	sbiw	r24, 0x02	; 2
     798:	8e 7f       	andi	r24, 0xFE	; 254
     79a:	02 96       	adiw	r24, 0x02	; 2
     79c:	c8 0f       	add	r28, r24
     79e:	d9 1f       	adc	r29, r25
     7a0:	a1 70       	andi	r26, 0x01	; 1
     7a2:	bb 27       	eor	r27, r27
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     7a4:	ab 2b       	or	r26, r27
     7a6:	61 f0       	breq	.+24     	; 0x7c0 <checksum+0xac>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     7a8:	88 81       	ld	r24, Y
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	a0 e0       	ldi	r26, 0x00	; 0
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	ba 2f       	mov	r27, r26
     7b2:	a9 2f       	mov	r26, r25
     7b4:	98 2f       	mov	r25, r24
     7b6:	88 27       	eor	r24, r24
     7b8:	c8 0e       	add	r12, r24
     7ba:	d9 1e       	adc	r13, r25
     7bc:	ea 1e       	adc	r14, r26
     7be:	fb 1e       	adc	r15, r27
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     7c0:	a7 01       	movw	r20, r14
     7c2:	66 27       	eor	r22, r22
     7c4:	77 27       	eor	r23, r23
     7c6:	41 15       	cp	r20, r1
     7c8:	51 05       	cpc	r21, r1
     7ca:	61 05       	cpc	r22, r1
     7cc:	71 05       	cpc	r23, r1
     7ce:	71 f0       	breq	.+28     	; 0x7ec <checksum+0xd8>
                sum = (sum & 0xFFFF)+(sum >> 16);
     7d0:	ee 24       	eor	r14, r14
     7d2:	ff 24       	eor	r15, r15
     7d4:	c4 0e       	add	r12, r20
     7d6:	d5 1e       	adc	r13, r21
     7d8:	e6 1e       	adc	r14, r22
     7da:	f7 1e       	adc	r15, r23
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     7dc:	a7 01       	movw	r20, r14
     7de:	66 27       	eor	r22, r22
     7e0:	77 27       	eor	r23, r23
     7e2:	41 15       	cp	r20, r1
     7e4:	51 05       	cpc	r21, r1
     7e6:	61 05       	cpc	r22, r1
     7e8:	71 05       	cpc	r23, r1
     7ea:	91 f7       	brne	.-28     	; 0x7d0 <checksum+0xbc>
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
     7ec:	c6 01       	movw	r24, r12
     7ee:	80 95       	com	r24
     7f0:	90 95       	com	r25
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	08 95       	ret

00000800 <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
     800:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <wwwport>
     804:	a6 2f       	mov	r26, r22
     806:	b7 2f       	mov	r27, r23
     808:	e7 ea       	ldi	r30, 0xA7	; 167
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	4b ea       	ldi	r20, 0xAB	; 171
     80e:	50 e0       	ldi	r21, 0x00	; 0
        while(i<4){
                ipaddr[i]=myip[i];
     810:	2d 91       	ld	r18, X+
     812:	21 93       	st	Z+, r18

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
     814:	e4 17       	cp	r30, r20
     816:	f5 07       	cpc	r31, r21
     818:	d9 f7       	brne	.-10     	; 0x810 <init_ip_arp_udp_tcp+0x10>
     81a:	a8 2f       	mov	r26, r24
     81c:	b9 2f       	mov	r27, r25
     81e:	eb ea       	ldi	r30, 0xAB	; 171
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	21 eb       	ldi	r18, 0xB1	; 177
     824:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
     826:	8d 91       	ld	r24, X+
     828:	81 93       	st	Z+, r24
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
     82a:	e2 17       	cp	r30, r18
     82c:	f3 07       	cpc	r31, r19
     82e:	d9 f7       	brne	.-10     	; 0x826 <init_ip_arp_udp_tcp+0x26>
                macaddr[i]=mymac[i];
                i++;
        }
}
     830:	08 95       	ret

00000832 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
     832:	69 32       	cpi	r22, 0x29	; 41
     834:	71 05       	cpc	r23, r1
     836:	c8 f0       	brcs	.+50     	; 0x86a <eth_type_is_arp_and_my_ip+0x38>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     838:	fc 01       	movw	r30, r24
     83a:	24 85       	ldd	r18, Z+12	; 0x0c
     83c:	28 30       	cpi	r18, 0x08	; 8
     83e:	b9 f4       	brne	.+46     	; 0x86e <eth_type_is_arp_and_my_ip+0x3c>
     840:	25 85       	ldd	r18, Z+13	; 0x0d
     842:	26 30       	cpi	r18, 0x06	; 6
     844:	b1 f4       	brne	.+44     	; 0x872 <eth_type_is_arp_and_my_ip+0x40>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     846:	36 a1       	ldd	r19, Z+38	; 0x26
     848:	20 91 a7 00 	lds	r18, 0x00A7	; 0x8000a7 <ipaddr>
     84c:	32 13       	cpse	r19, r18
     84e:	13 c0       	rjmp	.+38     	; 0x876 <eth_type_is_arp_and_my_ip+0x44>
     850:	b7 96       	adiw	r30, 0x27	; 39
     852:	a8 ea       	ldi	r26, 0xA8	; 168
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	8a 96       	adiw	r24, 0x2a	; 42
     858:	31 91       	ld	r19, Z+
     85a:	2d 91       	ld	r18, X+
     85c:	32 13       	cpse	r19, r18
     85e:	0d c0       	rjmp	.+26     	; 0x87a <eth_type_is_arp_and_my_ip+0x48>
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
     860:	e8 17       	cp	r30, r24
     862:	f9 07       	cpc	r31, r25
     864:	c9 f7       	brne	.-14     	; 0x858 <eth_type_is_arp_and_my_ip+0x26>
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	08 95       	ret

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	08 95       	ret
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	08 95       	ret
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	08 95       	ret
     87a:	80 e0       	ldi	r24, 0x00	; 0
                }
                i++;
        }
        return(1);
}
     87c:	08 95       	ret

0000087e <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     884:	6a 32       	cpi	r22, 0x2A	; 42
     886:	71 05       	cpc	r23, r1
     888:	e0 f0       	brcs	.+56     	; 0x8c2 <eth_type_is_ip_and_my_ip+0x44>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     88a:	84 85       	ldd	r24, Z+12	; 0x0c
     88c:	88 30       	cpi	r24, 0x08	; 8
     88e:	d9 f4       	brne	.+54     	; 0x8c6 <eth_type_is_ip_and_my_ip+0x48>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
     890:	85 85       	ldd	r24, Z+13	; 0x0d
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     892:	81 11       	cpse	r24, r1
     894:	1a c0       	rjmp	.+52     	; 0x8ca <eth_type_is_ip_and_my_ip+0x4c>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     896:	96 85       	ldd	r25, Z+14	; 0x0e
     898:	95 34       	cpi	r25, 0x45	; 69
     89a:	c1 f4       	brne	.+48     	; 0x8cc <eth_type_is_ip_and_my_ip+0x4e>
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     89c:	26 8d       	ldd	r18, Z+30	; 0x1e
     89e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <ipaddr>
     8a2:	29 13       	cpse	r18, r25
     8a4:	13 c0       	rjmp	.+38     	; 0x8cc <eth_type_is_ip_and_my_ip+0x4e>
     8a6:	df 01       	movw	r26, r30
     8a8:	5f 96       	adiw	r26, 0x1f	; 31
     8aa:	c8 ea       	ldi	r28, 0xA8	; 168
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	b2 96       	adiw	r30, 0x22	; 34
     8b0:	2d 91       	ld	r18, X+
     8b2:	99 91       	ld	r25, Y+
     8b4:	29 13       	cpse	r18, r25
     8b6:	0a c0       	rjmp	.+20     	; 0x8cc <eth_type_is_ip_and_my_ip+0x4e>
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
     8b8:	ae 17       	cp	r26, r30
     8ba:	bf 07       	cpc	r27, r31
     8bc:	c9 f7       	brne	.-14     	; 0x8b0 <eth_type_is_ip_and_my_ip+0x32>
                if(buf[IP_DST_P+i]!=ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	05 c0       	rjmp	.+10     	; 0x8cc <eth_type_is_ip_and_my_ip+0x4e>

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <eth_type_is_ip_and_my_ip+0x4e>
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <eth_type_is_ip_and_my_ip+0x4e>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     8d2:	fc 01       	movw	r30, r24
     8d4:	ab ea       	ldi	r26, 0xAB	; 171
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	9c 01       	movw	r18, r24
     8da:	2a 5f       	subi	r18, 0xFA	; 250
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     8de:	86 81       	ldd	r24, Z+6	; 0x06
     8e0:	81 93       	st	Z+, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
     8e2:	8d 91       	ld	r24, X+
     8e4:	85 83       	std	Z+5, r24	; 0x05
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     8e6:	e2 17       	cp	r30, r18
     8e8:	f3 07       	cpc	r31, r19
     8ea:	c9 f7       	brne	.-14     	; 0x8de <make_eth+0xc>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     8ec:	08 95       	ret

000008ee <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     8f4:	18 8e       	std	Y+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     8f6:	19 8e       	std	Y+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     8f8:	80 e4       	ldi	r24, 0x40	; 64
     8fa:	8c 8b       	std	Y+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     8fc:	1d 8a       	std	Y+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     8fe:	8e 8b       	std	Y+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	64 e1       	ldi	r22, 0x14	; 20
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	ce 01       	movw	r24, r28
     908:	0e 96       	adiw	r24, 0x0e	; 14
     90a:	0e 94 8a 03 	call	0x714	; 0x714 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     90e:	98 8f       	std	Y+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     910:	89 8f       	std	Y+25, r24	; 0x19
}
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     918:	ac 01       	movw	r20, r24
     91a:	a7 ea       	ldi	r26, 0xA7	; 167
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	fc 01       	movw	r30, r24
     920:	7a 96       	adiw	r30, 0x1a	; 26
     922:	2b ea       	ldi	r18, 0xAB	; 171
     924:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     926:	90 81       	ld	r25, Z
     928:	94 83       	std	Z+4, r25	; 0x04
                buf[IP_SRC_P+i]=ipaddr[i];
     92a:	9d 91       	ld	r25, X+
     92c:	91 93       	st	Z+, r25

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     92e:	a2 17       	cp	r26, r18
     930:	b3 07       	cpc	r27, r19
     932:	c9 f7       	brne	.-14     	; 0x926 <make_ip+0xe>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     934:	ca 01       	movw	r24, r20
     936:	0e 94 77 04 	call	0x8ee	; 0x8ee <fill_ip_hdr_checksum>
     93a:	08 95       	ret

0000093c <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	dc 01       	movw	r26, r24
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     942:	92 96       	adiw	r26, 0x22	; 34
     944:	8c 91       	ld	r24, X
     946:	92 97       	sbiw	r26, 0x22	; 34
     948:	94 96       	adiw	r26, 0x24	; 36
     94a:	8c 93       	st	X, r24
     94c:	94 97       	sbiw	r26, 0x24	; 36
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
     94e:	92 96       	adiw	r26, 0x22	; 34
     950:	1c 92       	st	X, r1
     952:	92 97       	sbiw	r26, 0x22	; 34
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
     954:	93 96       	adiw	r26, 0x23	; 35
     956:	8c 91       	ld	r24, X
     958:	93 97       	sbiw	r26, 0x23	; 35
     95a:	95 96       	adiw	r26, 0x25	; 37
     95c:	8c 93       	st	X, r24
     95e:	95 97       	sbiw	r26, 0x25	; 37
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
                i++;
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
     960:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <wwwport>
     964:	93 96       	adiw	r26, 0x23	; 35
     966:	8c 93       	st	X, r24
     968:	93 97       	sbiw	r26, 0x23	; 35
     96a:	fd 01       	movw	r30, r26
     96c:	ba 96       	adiw	r30, 0x2a	; 42
     96e:	ed 01       	movw	r28, r26
     970:	a6 96       	adiw	r28, 0x26	; 38
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     972:	82 91       	ld	r24, -Z
     974:	68 0f       	add	r22, r24
     976:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     978:	84 81       	ldd	r24, Z+4	; 0x04
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     97a:	64 83       	std	Z+4, r22	; 0x04
                if (cp_seq){
     97c:	22 23       	and	r18, r18
     97e:	11 f0       	breq	.+4      	; 0x984 <make_tcphead+0x48>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     980:	80 83       	st	Z, r24
     982:	01 c0       	rjmp	.+2      	; 0x986 <make_tcphead+0x4a>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
     984:	10 82       	st	Z, r1
                }
                rel_ack_num=rel_ack_num>>8;
     986:	67 2f       	mov	r22, r23
     988:	77 27       	eor	r23, r23
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     98a:	ec 17       	cp	r30, r28
     98c:	fd 07       	cpc	r31, r29
     98e:	89 f7       	brne	.-30     	; 0x972 <make_tcphead+0x36>
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
        }
        if (cp_seq==0){
     990:	21 11       	cpse	r18, r1
     992:	11 c0       	rjmp	.+34     	; 0x9b6 <make_tcphead+0x7a>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
     994:	96 96       	adiw	r26, 0x26	; 38
     996:	1c 92       	st	X, r1
     998:	96 97       	sbiw	r26, 0x26	; 38
                buf[TCP_SEQ_H_P+1]= 0;
     99a:	97 96       	adiw	r26, 0x27	; 39
     99c:	1c 92       	st	X, r1
     99e:	97 97       	sbiw	r26, 0x27	; 39
                // we step only the second byte, this allows us to send packts 
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum; 
     9a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     9a4:	98 96       	adiw	r26, 0x28	; 40
     9a6:	8c 93       	st	X, r24
     9a8:	98 97       	sbiw	r26, 0x28	; 40
                buf[TCP_SEQ_H_P+3]= 0;
     9aa:	99 96       	adiw	r26, 0x29	; 41
     9ac:	1c 92       	st	X, r1
     9ae:	99 97       	sbiw	r26, 0x29	; 41
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
     9b0:	8e 5f       	subi	r24, 0xFE	; 254
     9b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     9b6:	d2 96       	adiw	r26, 0x32	; 50
     9b8:	1c 92       	st	X, r1
     9ba:	d2 97       	sbiw	r26, 0x32	; 50
        buf[TCP_CHECKSUM_L_P]=0;
     9bc:	d3 96       	adiw	r26, 0x33	; 51
     9be:	1c 92       	st	X, r1
     9c0:	d3 97       	sbiw	r26, 0x33	; 51

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes. 
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
     9c2:	44 23       	and	r20, r20
     9c4:	a1 f0       	breq	.+40     	; 0x9ee <make_tcphead+0xb2>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	d6 96       	adiw	r26, 0x36	; 54
     9ca:	8c 93       	st	X, r24
     9cc:	d6 97       	sbiw	r26, 0x36	; 54
                buf[TCP_OPTIONS_P+1]=4;
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	d7 96       	adiw	r26, 0x37	; 55
     9d2:	8c 93       	st	X, r24
     9d4:	d7 97       	sbiw	r26, 0x37	; 55
                buf[TCP_OPTIONS_P+2]=0x05; 
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	d8 96       	adiw	r26, 0x38	; 56
     9da:	8c 93       	st	X, r24
     9dc:	d8 97       	sbiw	r26, 0x38	; 56
                buf[TCP_OPTIONS_P+3]=0x80;
     9de:	80 e8       	ldi	r24, 0x80	; 128
     9e0:	d9 96       	adiw	r26, 0x39	; 57
     9e2:	8c 93       	st	X, r24
     9e4:	d9 97       	sbiw	r26, 0x39	; 57
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
     9e6:	80 e6       	ldi	r24, 0x60	; 96
     9e8:	9e 96       	adiw	r26, 0x2e	; 46
     9ea:	8c 93       	st	X, r24
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <make_tcphead+0xb8>
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
     9ee:	80 e5       	ldi	r24, 0x50	; 80
     9f0:	9e 96       	adiw	r26, 0x2e	; 46
     9f2:	8c 93       	st	X, r24
        }
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
        uint8_t i=0;
        //
        make_eth(buf);
     a00:	0e 94 69 04 	call	0x8d2	; 0x8d2 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     a04:	1c 8a       	std	Y+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	8d 8b       	std	Y+21, r24	; 0x15
     a0a:	ab ea       	ldi	r26, 0xAB	; 171
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	fe 01       	movw	r30, r28
     a10:	76 96       	adiw	r30, 0x16	; 22
     a12:	21 eb       	ldi	r18, 0xB1	; 177
     a14:	30 e0       	ldi	r19, 0x00	; 0
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     a16:	80 81       	ld	r24, Z
     a18:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     a1a:	8d 91       	ld	r24, X+
     a1c:	81 93       	st	Z+, r24
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     a1e:	a2 17       	cp	r26, r18
     a20:	b3 07       	cpc	r27, r19
     a22:	c9 f7       	brne	.-14     	; 0xa16 <make_arp_answer_from_request+0x1c>
     a24:	a7 ea       	ldi	r26, 0xA7	; 167
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	fe 01       	movw	r30, r28
     a2a:	7c 96       	adiw	r30, 0x1c	; 28
     a2c:	2b ea       	ldi	r18, 0xAB	; 171
     a2e:	30 e0       	ldi	r19, 0x00	; 0
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     a30:	80 81       	ld	r24, Z
     a32:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     a34:	8d 91       	ld	r24, X+
     a36:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     a38:	a2 17       	cp	r26, r18
     a3a:	b3 07       	cpc	r27, r19
     a3c:	c9 f7       	brne	.-14     	; 0xa30 <make_arp_answer_from_request+0x36>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     a3e:	be 01       	movw	r22, r28
     a40:	8a e2       	ldi	r24, 0x2A	; 42
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enc28j60PacketSend>
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	ec 01       	movw	r28, r24
     a58:	8b 01       	movw	r16, r22
        make_eth(buf);
     a5a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <make_eth>
        make_ip(buf);
     a5e:	ce 01       	movw	r24, r28
     a60:	0e 94 8c 04 	call	0x918	; 0x918 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     a64:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     a66:	8c a1       	ldd	r24, Y+36	; 0x24
     a68:	88 3f       	cpi	r24, 0xF8	; 248
     a6a:	18 f0       	brcs	.+6      	; 0xa72 <make_echo_reply_from_request+0x24>
                buf[ICMP_CHECKSUM_P+1]++;
     a6c:	9d a1       	ldd	r25, Y+37	; 0x25
     a6e:	9f 5f       	subi	r25, 0xFF	; 255
     a70:	9d a3       	std	Y+37, r25	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     a72:	88 5f       	subi	r24, 0xF8	; 248
     a74:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
     a76:	be 01       	movw	r22, r28
     a78:	c8 01       	movw	r24, r16
     a7a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enc28j60PacketSend>
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24
     a98:	d6 2e       	mov	r13, r22
     a9a:	e7 2e       	mov	r14, r23
     a9c:	04 2f       	mov	r16, r20
     a9e:	12 2f       	mov	r17, r18
     aa0:	f3 2e       	mov	r15, r19
        uint8_t i=0;
        uint16_t ck;
        make_eth(buf);
     aa2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <make_eth>
     aa6:	0d 3d       	cpi	r16, 0xDD	; 221
     aa8:	08 f0       	brcs	.+2      	; 0xaac <make_udp_reply_from_request+0x24>
     aaa:	0c ed       	ldi	r16, 0xDC	; 220
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
     aac:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     aae:	8c e1       	ldi	r24, 0x1C	; 28
     ab0:	80 0f       	add	r24, r16
     ab2:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     ab4:	ce 01       	movw	r24, r28
     ab6:	0e 94 8c 04 	call	0x918	; 0x918 <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     aba:	8a a1       	ldd	r24, Y+34	; 0x22
     abc:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     abe:	8b a1       	ldd	r24, Y+35	; 0x23
     ac0:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
     ac2:	fa a2       	std	Y+34, r15	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     ac4:	1b a3       	std	Y+35, r17	; 0x23
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
     ac6:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
     ac8:	88 e0       	ldi	r24, 0x08	; 8
     aca:	80 0f       	add	r24, r16
     acc:	8f a3       	std	Y+39, r24	; 0x27
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     ace:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
     ad0:	19 a6       	std	Y+41, r1	; 0x29
        // copy the data:
        while(i<datalen){
     ad2:	00 23       	and	r16, r16
     ad4:	81 f0       	breq	.+32     	; 0xaf6 <make_udp_reply_from_request+0x6e>
     ad6:	ad 2d       	mov	r26, r13
     ad8:	be 2d       	mov	r27, r14
     ada:	fe 01       	movw	r30, r28
     adc:	ba 96       	adiw	r30, 0x2a	; 42
     ade:	2f ef       	ldi	r18, 0xFF	; 255
     ae0:	20 0f       	add	r18, r16
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	25 5d       	subi	r18, 0xD5	; 213
     ae6:	3f 4f       	sbci	r19, 0xFF	; 255
     ae8:	2c 0f       	add	r18, r28
     aea:	3d 1f       	adc	r19, r29
                buf[UDP_DATA_P+i]=data[i];
     aec:	9d 91       	ld	r25, X+
     aee:	91 93       	st	Z+, r25
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
     af0:	e2 17       	cp	r30, r18
     af2:	f3 07       	cpc	r31, r19
     af4:	d9 f7       	brne	.-10     	; 0xaec <make_udp_reply_from_request+0x64>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	b8 01       	movw	r22, r16
     afa:	60 5f       	subi	r22, 0xF0	; 240
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	41 e0       	ldi	r20, 0x01	; 1
     b00:	ce 01       	movw	r24, r28
     b02:	4a 96       	adiw	r24, 0x1a	; 26
     b04:	0e 94 8a 03 	call	0x714	; 0x714 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
     b08:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
     b0a:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     b0c:	be 01       	movw	r22, r28
     b0e:	c8 01       	movw	r24, r16
     b10:	8a 96       	adiw	r24, 0x2a	; 42
     b12:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enc28j60PacketSend>
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	08 95       	ret

00000b26 <make_tcp_synack_from_syn>:

void make_tcp_synack_from_syn(uint8_t *buf)
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	ec 01       	movw	r28, r24
        uint16_t ck;
        make_eth(buf);
     b2c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     b30:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     b32:	8c e2       	ldi	r24, 0x2C	; 44
     b34:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     b36:	ce 01       	movw	r24, r28
     b38:	0e 94 8c 04 	call	0x918	; 0x918 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     b3c:	82 e1       	ldi	r24, 0x12	; 18
     b3e:	8f a7       	std	Y+47, r24	; 0x2f
        make_tcphead(buf,1,1,0);
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 9e 04 	call	0x93c	; 0x93c <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     b4e:	42 e0       	ldi	r20, 0x02	; 2
     b50:	60 e2       	ldi	r22, 0x20	; 32
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	ce 01       	movw	r24, r28
     b56:	4a 96       	adiw	r24, 0x1a	; 26
     b58:	0e 94 8a 03 	call	0x714	; 0x714 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     b5c:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     b5e:	8b ab       	std	Y+51, r24	; 0x33
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     b60:	be 01       	movw	r22, r28
     b62:	8a e3       	ldi	r24, 0x3A	; 58
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enc28j60PacketSend>
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <get_tcp_data_pointer>:
// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
        if (info_data_len){
     b70:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <info_data_len>
     b74:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <info_data_len+0x1>
     b78:	89 2b       	or	r24, r25
     b7a:	31 f0       	breq	.+12     	; 0xb88 <get_tcp_data_pointer+0x18>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
     b7c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <info_hdr_len>
     b80:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <info_hdr_len+0x1>
     b84:	82 96       	adiw	r24, 0x22	; 34
     b86:	08 95       	ret
        }else{
                return(0);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
        }
}
     b8c:	08 95       	ret

00000b8e <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
     b8e:	fc 01       	movw	r30, r24
        info_data_len=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
        info_data_len-=IP_HEADER_LEN;
     b90:	20 89       	ldd	r18, Z+16	; 0x10
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	32 2f       	mov	r19, r18
     b96:	22 27       	eor	r18, r18
     b98:	81 89       	ldd	r24, Z+17	; 0x11
     b9a:	28 2b       	or	r18, r24
     b9c:	24 51       	subi	r18, 0x14	; 20
     b9e:	31 09       	sbc	r19, r1
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     ba0:	86 a5       	ldd	r24, Z+46	; 0x2e
     ba2:	82 95       	swap	r24
     ba4:	8f 70       	andi	r24, 0x0F	; 15
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <info_hdr_len+0x1>
     bb4:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <info_hdr_len>
        info_data_len-=info_hdr_len;
     bb8:	a9 01       	movw	r20, r18
     bba:	48 1b       	sub	r20, r24
     bbc:	59 0b       	sbc	r21, r25
     bbe:	ca 01       	movw	r24, r20
        if (info_data_len<=0){
     bc0:	18 16       	cp	r1, r24
     bc2:	19 06       	cpc	r1, r25
     bc4:	2c f4       	brge	.+10     	; 0xbd0 <init_len_info+0x42>
void init_len_info(uint8_t *buf)
{
        info_data_len=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
        info_data_len-=IP_HEADER_LEN;
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
        info_data_len-=info_hdr_len;
     bc6:	50 93 a4 00 	sts	0x00A4, r21	; 0x8000a4 <info_data_len+0x1>
     bca:	40 93 a3 00 	sts	0x00A3, r20	; 0x8000a3 <info_data_len>
     bce:	08 95       	ret
        if (info_data_len<=0){
                info_data_len=0;
     bd0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <info_data_len+0x1>
     bd4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <info_data_len>
     bd8:	08 95       	ret

00000bda <fill_tcp_data_p>:
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     bda:	9a 01       	movw	r18, r20
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
     be0:	fa 01       	movw	r30, r20
     be2:	44 91       	lpm	r20, Z
     be4:	44 23       	and	r20, r20
     be6:	69 f0       	breq	.+26     	; 0xc02 <fill_tcp_data_p+0x28>
     be8:	fb 01       	movw	r30, r22
     bea:	f6 96       	adiw	r30, 0x36	; 54
     bec:	dc 01       	movw	r26, r24
     bee:	ae 0f       	add	r26, r30
     bf0:	bf 1f       	adc	r27, r31
     bf2:	f9 01       	movw	r30, r18
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     bf4:	4d 93       	st	X+, r20
                pos++;
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     bfa:	44 91       	lpm	r20, Z
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	41 11       	cpse	r20, r1
     c00:	f9 cf       	rjmp	.-14     	; 0xbf4 <fill_tcp_data_p+0x1a>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     c02:	cb 01       	movw	r24, r22
     c04:	08 95       	ret

00000c06 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
     c06:	dc 01       	movw	r26, r24
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     c08:	fa 01       	movw	r30, r20
     c0a:	90 81       	ld	r25, Z
     c0c:	99 23       	and	r25, r25
     c0e:	61 f0       	breq	.+24     	; 0xc28 <fill_tcp_data+0x22>
     c10:	9b 01       	movw	r18, r22
     c12:	2a 5c       	subi	r18, 0xCA	; 202
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
     c16:	a2 0f       	add	r26, r18
     c18:	b3 1f       	adc	r27, r19
     c1a:	31 96       	adiw	r30, 0x01	; 1
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     c1c:	9d 93       	st	X+, r25
                pos++;
     c1e:	6f 5f       	subi	r22, 0xFF	; 255
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
     c22:	91 91       	ld	r25, Z+
     c24:	91 11       	cpse	r25, r1
     c26:	fa cf       	rjmp	.-12     	; 0xc1c <fill_tcp_data+0x16>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
                pos++;
                s++;
        }
        return(pos);
}
     c28:	cb 01       	movw	r24, r22
     c2a:	08 95       	ret

00000c2c <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
        uint16_t j;
        make_eth(buf);
     c32:	0e 94 69 04 	call	0x8d2	; 0x8d2 <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V;
     c36:	80 e1       	ldi	r24, 0x10	; 16
     c38:	8f a7       	std	Y+47, r24	; 0x2f
        if (info_data_len==0){
     c3a:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <info_data_len>
     c3e:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <info_data_len+0x1>
     c42:	61 15       	cp	r22, r1
     c44:	71 05       	cpc	r23, r1
     c46:	41 f4       	brne	.+16     	; 0xc58 <make_tcp_ack_from_any+0x2c>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
     c48:	21 e0       	ldi	r18, 0x01	; 1
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 9e 04 	call	0x93c	; 0x93c <make_tcphead>
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <make_tcp_ack_from_any+0x36>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	ce 01       	movw	r24, r28
     c5e:	0e 94 9e 04 	call	0x93c	; 0x93c <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     c62:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     c64:	88 e2       	ldi	r24, 0x28	; 40
     c66:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 8c 04 	call	0x918	; 0x918 <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     c6e:	42 e0       	ldi	r20, 0x02	; 2
     c70:	6c e1       	ldi	r22, 0x1C	; 28
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	ce 01       	movw	r24, r28
     c76:	4a 96       	adiw	r24, 0x1a	; 26
     c78:	0e 94 8a 03 	call	0x714	; 0x714 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     c7c:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     c7e:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     c80:	be 01       	movw	r22, r28
     c82:	86 e3       	ldi	r24, 0x36	; 54
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enc28j60PacketSend>
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <make_tcp_ack_with_data>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data(uint8_t *buf,uint16_t dlen)
{
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ec 01       	movw	r28, r24
     c9a:	8b 01       	movw	r16, r22
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     c9c:	89 e1       	ldi	r24, 0x19	; 25
     c9e:	8f a7       	std	Y+47, r24	; 0x2f

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     ca0:	cb 01       	movw	r24, r22
     ca2:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     ca4:	98 8b       	std	Y+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     ca6:	89 8b       	std	Y+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 94 77 04 	call	0x8ee	; 0x8ee <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     cae:	1a aa       	std	Y+50, r1	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
     cb0:	1b aa       	std	Y+51, r1	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     cb2:	b8 01       	movw	r22, r16
     cb4:	64 5e       	subi	r22, 0xE4	; 228
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	42 e0       	ldi	r20, 0x02	; 2
     cba:	ce 01       	movw	r24, r28
     cbc:	4a 96       	adiw	r24, 0x1a	; 26
     cbe:	0e 94 8a 03 	call	0x714	; 0x714 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     cc2:	9a ab       	std	Y+50, r25	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     cc4:	8b ab       	std	Y+51, r24	; 0x33
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     cc6:	be 01       	movw	r22, r28
     cc8:	c8 01       	movw	r24, r16
     cca:	c6 96       	adiw	r24, 0x36	; 54
     ccc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <enc28j60PacketSend>
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	08 95       	ret

00000cda <verify_password>:
// 
uint8_t verify_password(char *str)
{
        // the first characters of the received string are
        // a simple password/cookie:
        if (strncmp(password,str,5)==0){
     cda:	45 e0       	ldi	r20, 0x05	; 5
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	bc 01       	movw	r22, r24
     ce0:	82 e6       	ldi	r24, 0x62	; 98
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 a3 08 	call	0x1146	; 0x1146 <strncmp>
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	89 2b       	or	r24, r25
     cec:	09 f0       	breq	.+2      	; 0xcf0 <verify_password+0x16>
     cee:	20 e0       	ldi	r18, 0x00	; 0
                return(1);
        }
        return(0);
}
     cf0:	82 2f       	mov	r24, r18
     cf2:	08 95       	ret

00000cf4 <analyse_get_url>:
//                -2 no command given but password valid
//                -3 valid password, no command and no trailing "/"
int8_t analyse_get_url(char *str)
{
        uint8_t loop=1;
        uint8_t i=0;
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <analyse_get_url+0xe>
     cf8:	01 96       	adiw	r24, 0x01	; 1
        while(loop){
                if(password[i]){
                        if(*str==password[i]){
     cfa:	4c 91       	ld	r20, X
     cfc:	43 13       	cpse	r20, r19
     cfe:	12 c0       	rjmp	.+36     	; 0xd24 <analyse_get_url+0x30>
                                str++;
                                i++;
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	dc 01       	movw	r26, r24
int8_t analyse_get_url(char *str)
{
        uint8_t loop=1;
        uint8_t i=0;
        while(loop){
                if(password[i]){
     d04:	e2 2f       	mov	r30, r18
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ee 59       	subi	r30, 0x9E	; 158
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	30 81       	ld	r19, Z
     d0e:	31 11       	cpse	r19, r1
     d10:	f3 cf       	rjmp	.-26     	; 0xcf8 <analyse_get_url+0x4>
                        // end of password
                        loop=0;
                }
        }
        // is is now one char after the password
        if (*str == '/'){
     d12:	8c 91       	ld	r24, X
     d14:	8f 32       	cpi	r24, 0x2F	; 47
     d16:	41 f4       	brne	.+16     	; 0xd28 <analyse_get_url+0x34>
                str++;
        }else{
                return(-3);
        }
        // check the first char, garbage after this is ignored (including a slash)
        if (*str < 0x3a && *str > 0x2f){
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	8c 91       	ld	r24, X
     d1c:	80 53       	subi	r24, 0x30	; 48
     d1e:	8a 30       	cpi	r24, 0x0A	; 10
     d20:	28 f4       	brcc	.+10     	; 0xd2c <analyse_get_url+0x38>
                // is a ASCII number, return it
                return(*str-0x30);
     d22:	08 95       	ret
                if(password[i]){
                        if(*str==password[i]){
                                str++;
                                i++;
                        }else{
                                return(-1);
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	08 95       	ret
        }
        // is is now one char after the password
        if (*str == '/'){
                str++;
        }else{
                return(-3);
     d28:	8d ef       	ldi	r24, 0xFD	; 253
     d2a:	08 95       	ret
        // check the first char, garbage after this is ignored (including a slash)
        if (*str < 0x3a && *str > 0x2f){
                // is a ASCII number, return it
                return(*str-0x30);
        }
        return(-2);
     d2c:	8e ef       	ldi	r24, 0xFE	; 254
}
     d2e:	08 95       	ret

00000d30 <moved_perm>:

// answer HTTP/1.0 301 Moved Permanently\r\nLocation: password/\r\n\r\n
// to redirect to the url ending in a slash
uint16_t moved_perm(uint8_t *buf)
{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 301 Moved Permanently\r\nLocation: "));
     d36:	42 ec       	ldi	r20, 0xC2	; 194
     d38:	52 e0       	ldi	r21, 0x02	; 2
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        plen=fill_tcp_data(buf,plen,password);
     d42:	42 e6       	ldi	r20, 0x62	; 98
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	bc 01       	movw	r22, r24
     d48:	ce 01       	movw	r24, r28
     d4a:	0e 94 03 06 	call	0xc06	; 0xc06 <fill_tcp_data>
        plen=fill_tcp_data_p(buf,plen,PSTR("/\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     d4e:	41 e9       	ldi	r20, 0x91	; 145
     d50:	52 e0       	ldi	r21, 0x02	; 2
     d52:	bc 01       	movw	r22, r24
     d54:	ce 01       	movw	r24, r28
     d56:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        plen=fill_tcp_data_p(buf,plen,PSTR("<h1>301 Moved Permanently</h1>\n"));
     d5a:	41 e7       	ldi	r20, 0x71	; 113
     d5c:	52 e0       	ldi	r21, 0x02	; 2
     d5e:	bc 01       	movw	r22, r24
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        plen=fill_tcp_data_p(buf,plen,PSTR("add a trailing slash to the url\n"));
     d66:	40 e5       	ldi	r20, 0x50	; 80
     d68:	52 e0       	ldi	r21, 0x02	; 2
     d6a:	bc 01       	movw	r22, r24
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        return(plen);
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <print_webpage>:


// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf,uint8_t on_off)
{
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
     d80:	16 2f       	mov	r17, r22
        uint16_t plen;
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     d82:	41 e1       	ldi	r20, 0x11	; 17
     d84:	52 e0       	ldi	r21, 0x02	; 2
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
     d8e:	4a ef       	ldi	r20, 0xFA	; 250
     d90:	51 e0       	ldi	r21, 0x01	; 1
     d92:	bc 01       	movw	r22, r24
     d94:	ce 01       	movw	r24, r28
     d96:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
     d9a:	bc 01       	movw	r22, r24
        if (on_off){
     d9c:	11 23       	and	r17, r17
     d9e:	91 f0       	breq	.+36     	; 0xdc4 <print_webpage+0x4c>
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#00FF00\"> ON</font>"));
     da0:	49 ed       	ldi	r20, 0xD9	; 217
     da2:	51 e0       	ldi	r21, 0x01	; 1
     da4:	ce 01       	movw	r24, r28
     da6:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
     daa:	42 e9       	ldi	r20, 0x92	; 146
     dac:	51 e0       	ldi	r21, 0x01	; 1
     dae:	bc 01       	movw	r22, r24
     db0:	ce 01       	movw	r24, r28
     db2:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
     db6:	4c e7       	ldi	r20, 0x7C	; 124
     db8:	51 e0       	ldi	r21, 0x01	; 1
     dba:	bc 01       	movw	r22, r24
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
     dc2:	11 c0       	rjmp	.+34     	; 0xde6 <print_webpage+0x6e>
        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
        plen=fill_tcp_data_p(buf,plen,PSTR("<center><p>Output is: "));
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"#00FF00\"> ON</font>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("OFF"));
     dc4:	45 ed       	ldi	r20, 0xD5	; 213
     dc6:	51 e0       	ldi	r21, 0x01	; 1
     dc8:	ce 01       	movw	r24, r28
     dca:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        }
        plen=fill_tcp_data_p(buf,plen,PSTR(" <small><a href=\".\">[refresh status]</a></small></p>\n<p><a href=\"."));
     dce:	42 e9       	ldi	r20, 0x92	; 146
     dd0:	51 e0       	ldi	r21, 0x01	; 1
     dd2:	bc 01       	movw	r22, r24
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        if (on_off){
                plen=fill_tcp_data_p(buf,plen,PSTR("/0\">Switch off</a><p>"));
        }else{
                plen=fill_tcp_data_p(buf,plen,PSTR("/1\">Switch on</a><p>"));
     dda:	47 e6       	ldi	r20, 0x67	; 103
     ddc:	51 e0       	ldi	r21, 0x01	; 1
     dde:	bc 01       	movw	r22, r24
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        }
        plen=fill_tcp_data_p(buf,plen,PSTR("</center><hr><br>version 2.10, tuxgraphics.org\n"));
     de6:	47 e3       	ldi	r20, 0x37	; 55
     de8:	51 e0       	ldi	r21, 0x01	; 1
     dea:	bc 01       	movw	r22, r24
     dec:	ce 01       	movw	r24, r28
     dee:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
        return(plen);
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	08 95       	ret

00000dfa <main>:


int main(void){
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	6e 97       	sbiw	r28, 0x1e	; 30
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
        uint8_t payloadlen=0;
        char str[30];
        char cmdval;
        
        /* enable PD2/INT0, as input */
        INT0_INPUT_DDR &= ~(1<<INT0_INPUT_DDC2);
     e0e:	a2 98       	cbi	0x14, 2	; 20

        /*initialize enc28j60*/
        enc28j60Init(mymac);
     e10:	8d e6       	ldi	r24, 0x6D	; 109
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 43 02 	call	0x486	; 0x486 <enc28j60Init>
        enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 3d 02 	call	0x47a	; 0x47a <enc28j60clkout>
        delay_ms(10);
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 98 08 	call	0x1130	; 0x1130 <delay_ms>
        
        // LED
        /* enable PB1, LED as output */
        LED_DDR |= (1<<STATUS_LED_DD);
     e26:	b9 9a       	sbi	0x17, 1	; 23

        /* set output to Vcc, LED off */
        LED_PORT |= (1<<STATUS_LED);
     e28:	c1 9a       	sbi	0x18, 1	; 24

        // the transistor on PD7
        SWITCH1_DDR |= (1<<SWITCH1_DD);
     e2a:	a7 9a       	sbi	0x14, 7	; 20
        SWITCH1_PORT &= ~(1<<SWITCH1);// transistor off
     e2c:	af 98       	cbi	0x15, 7	; 21
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
     e2e:	66 e7       	ldi	r22, 0x76	; 118
     e30:	74 e0       	ldi	r23, 0x04	; 4
     e32:	84 e1       	ldi	r24, 0x14	; 20
     e34:	0e 94 21 02 	call	0x442	; 0x442 <enc28j60PhyWrite>
        delay_ms(20);
     e38:	84 e1       	ldi	r24, 0x14	; 20
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 98 08 	call	0x1130	; 0x1130 <delay_ms>
        
        /* set output to GND, red LED on */
        LED_PORT &= ~(1<<STATUS_LED);
     e40:	c1 98       	cbi	0x18, 1	; 24

        i=1;

        //init the ethernet/ip layer:
        init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);
     e42:	40 e5       	ldi	r20, 0x50	; 80
     e44:	69 e6       	ldi	r22, 0x69	; 105
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	8d e6       	ldi	r24, 0x6D	; 109
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 00 04 	call	0x800	; 0x800 <init_ip_arp_udp_tcp>
        delay_ms(20);
        
        /* set output to GND, red LED on */
        LED_PORT &= ~(1<<STATUS_LED);

        i=1;
     e50:	ff 24       	eor	r15, r15
     e52:	f3 94       	inc	r15
                                strcpy(str,"e=no_such_cmd");
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
     e54:	ce 01       	movw	r24, r28
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	6c 01       	movw	r12, r24
                                        }else if(cmdval=='?'){
                                                if (SWITCH1_PORT & (1<<SWITCH1)){
                                                        strcpy(str,"t=1");
                                                        goto ANSWER;
                                                }
                                                strcpy(str,"t=0");
     e5a:	0f 2e       	mov	r0, r31
     e5c:	f4 e7       	ldi	r31, 0x74	; 116
     e5e:	af 2e       	mov	r10, r31
     e60:	fd e3       	ldi	r31, 0x3D	; 61
     e62:	bf 2e       	mov	r11, r31
     e64:	f0 2d       	mov	r31, r0
     e66:	0f 2e       	mov	r0, r31
     e68:	f0 e3       	ldi	r31, 0x30	; 48
     e6a:	8f 2e       	mov	r8, r31
     e6c:	91 2c       	mov	r9, r1
     e6e:	f0 2d       	mov	r31, r0
                                                SWITCH1_PORT &= ~(1<<SWITCH1);// transistor off
                                                strcpy(str,"t=0");
                                                goto ANSWER;
                                        }else if(cmdval=='?'){
                                                if (SWITCH1_PORT & (1<<SWITCH1)){
                                                        strcpy(str,"t=1");
     e70:	0f 2e       	mov	r0, r31
     e72:	f1 e3       	ldi	r31, 0x31	; 49
     e74:	4f 2e       	mov	r4, r31
     e76:	51 2c       	mov	r5, r1
     e78:	f0 2d       	mov	r31, r0
                        LED_PORT |= (1<<STATUS_LED);
                        i=0;
                }else{
                        /* set output to GND, LED on */
                        LED_PORT &= ~(1<<STATUS_LED);
                        i=1;
     e7a:	77 24       	eor	r7, r7
     e7c:	73 94       	inc	r7
                }
                // led----------
                if (i){
                        /* set output to Vcc, LED off */
                        LED_PORT |= (1<<STATUS_LED);
                        i=0;
     e7e:	e1 2c       	mov	r14, r1
        //init the ethernet/ip layer:
        init_ip_arp_udp_tcp(mymac,myip,MYWWWPORT);

        while(1){
                // get the next new packet:
                plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
     e80:	61 eb       	ldi	r22, 0xB1	; 177
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	82 ec       	ldi	r24, 0xC2	; 194
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	0e 94 18 03 	call	0x630	; 0x630 <enc28j60PacketReceive>
     e8c:	8c 01       	movw	r16, r24

                /*plen will ne unequal to zero if there is a valid 
                 * packet (without crc error) */
                if(plen==0){
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	b9 f3       	breq	.-18     	; 0xe80 <main+0x86>
                }
                        
                // arp is broadcast if unknown but a host may also
                // verify the mac address by sending it to 
                // a unicast address.
                if(eth_type_is_arp_and_my_ip(buf,plen)){
     e92:	bc 01       	movw	r22, r24
     e94:	81 eb       	ldi	r24, 0xB1	; 177
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 19 04 	call	0x832	; 0x832 <eth_type_is_arp_and_my_ip>
     e9c:	88 23       	and	r24, r24
     e9e:	29 f0       	breq	.+10     	; 0xeaa <main+0xb0>
                        make_arp_answer_from_request(buf);
     ea0:	81 eb       	ldi	r24, 0xB1	; 177
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <make_arp_answer_from_request>
                        continue;
     ea8:	eb cf       	rjmp	.-42     	; 0xe80 <main+0x86>
                }

                // check if ip packets are for us:
                if(eth_type_is_ip_and_my_ip(buf,plen)==0){
     eaa:	b8 01       	movw	r22, r16
     eac:	81 eb       	ldi	r24, 0xB1	; 177
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 3f 04 	call	0x87e	; 0x87e <eth_type_is_ip_and_my_ip>
     eb4:	88 23       	and	r24, r24
     eb6:	21 f3       	breq	.-56     	; 0xe80 <main+0x86>
                        continue;
                }
                // led----------
                if (i){
     eb8:	ff 20       	and	r15, r15
     eba:	19 f0       	breq	.+6      	; 0xec2 <main+0xc8>
                        /* set output to Vcc, LED off */
                        LED_PORT |= (1<<STATUS_LED);
     ebc:	c1 9a       	sbi	0x18, 1	; 24
                        i=0;
     ebe:	fe 2c       	mov	r15, r14
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <main+0xcc>
                }else{
                        /* set output to GND, LED on */
                        LED_PORT &= ~(1<<STATUS_LED);
     ec2:	c1 98       	cbi	0x18, 1	; 24
                        i=1;
     ec4:	f7 2c       	mov	r15, r7
                }
                
                if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
     ec6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <buf+0x17>
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	51 f4       	brne	.+20     	; 0xee2 <main+0xe8>
     ece:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <buf+0x22>
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	a9 f6       	brne	.-86     	; 0xe80 <main+0x86>
                        // a ping packet, let's send pong
                        make_echo_reply_from_request(buf,plen);
     ed6:	b8 01       	movw	r22, r16
     ed8:	81 eb       	ldi	r24, 0xB1	; 177
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 27 05 	call	0xa4e	; 0xa4e <make_echo_reply_from_request>
                        continue;
     ee0:	cf cf       	rjmp	.-98     	; 0xe80 <main+0x86>
                }
                // tcp port www start, compare only the lower byte
                if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P]==MYWWWPORT){
     ee2:	86 30       	cpi	r24, 0x06	; 6
     ee4:	09 f0       	breq	.+2      	; 0xee8 <main+0xee>
     ee6:	88 c0       	rjmp	.+272    	; 0xff8 <main+0x1fe>
     ee8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <buf+0x24>
     eec:	81 11       	cpse	r24, r1
     eee:	c8 cf       	rjmp	.-112    	; 0xe80 <main+0x86>
     ef0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <buf+0x25>
     ef4:	80 35       	cpi	r24, 0x50	; 80
     ef6:	21 f6       	brne	.-120    	; 0xe80 <main+0x86>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
     ef8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <buf+0x2f>
     efc:	81 ff       	sbrs	r24, 1
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <main+0x110>
                                make_tcp_synack_from_syn(buf);
     f00:	81 eb       	ldi	r24, 0xB1	; 177
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 93 05 	call	0xb26	; 0xb26 <make_tcp_synack_from_syn>
                                // make_tcp_synack_from_syn does already send the syn,ack
                                continue;
     f08:	bb cf       	rjmp	.-138    	; 0xe80 <main+0x86>
                        }
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
     f0a:	84 ff       	sbrs	r24, 4
     f0c:	b9 cf       	rjmp	.-142    	; 0xe80 <main+0x86>
                                init_len_info(buf); // init some data structures
     f0e:	81 eb       	ldi	r24, 0xB1	; 177
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 c7 05 	call	0xb8e	; 0xb8e <init_len_info>
                                // we can possibly have no data, just ack:
                                dat_p=get_tcp_data_pointer();
     f16:	0e 94 b8 05 	call	0xb70	; 0xb70 <get_tcp_data_pointer>
     f1a:	8c 01       	movw	r16, r24
                                if (dat_p==0){
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	49 f4       	brne	.+18     	; 0xf32 <main+0x138>
                                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
     f20:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <buf+0x2f>
     f24:	80 ff       	sbrs	r24, 0
     f26:	ac cf       	rjmp	.-168    	; 0xe80 <main+0x86>
                                                // finack, answer with ack
                                                make_tcp_ack_from_any(buf);
     f28:	81 eb       	ldi	r24, 0xB1	; 177
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 16 06 	call	0xc2c	; 0xc2c <make_tcp_ack_from_any>
     f30:	a7 cf       	rjmp	.-178    	; 0xe80 <main+0x86>
                                        }
                                        // just an ack with no data, wait for next packet
                                        continue;
                                }
                                if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
     f32:	44 e0       	ldi	r20, 0x04	; 4
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	bc 01       	movw	r22, r24
     f38:	6f 54       	subi	r22, 0x4F	; 79
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	83 e7       	ldi	r24, 0x73	; 115
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 a3 08 	call	0x1146	; 0x1146 <strncmp>
     f44:	89 2b       	or	r24, r25
     f46:	51 f0       	breq	.+20     	; 0xf5c <main+0x162>
                                        // head, post and other methods:
                                        //
                                        // for possible status codes see:
                                        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>200 OK</h1>"));
     f48:	4b ef       	ldi	r20, 0xFB	; 251
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	81 eb       	ldi	r24, 0xB1	; 177
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
     f58:	8c 01       	movw	r16, r24
                                        goto SENDTCP;
     f5a:	44 c0       	rjmp	.+136    	; 0xfe4 <main+0x1ea>
                                }
                                if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
     f5c:	42 e0       	ldi	r20, 0x02	; 2
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	b8 01       	movw	r22, r16
     f62:	6b 54       	subi	r22, 0x4B	; 75
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	88 e7       	ldi	r24, 0x78	; 120
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 a3 08 	call	0x1146	; 0x1146 <strncmp>
     f6e:	89 2b       	or	r24, r25
     f70:	89 f4       	brne	.+34     	; 0xf94 <main+0x19a>
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n"));
     f72:	4e ec       	ldi	r20, 0xCE	; 206
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	81 eb       	ldi	r24, 0xB1	; 177
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
                                        plen=fill_tcp_data_p(buf,plen,PSTR("<p>Usage: http://host_or_ip/password</p>\n"));
     f82:	44 ea       	ldi	r20, 0xA4	; 164
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	bc 01       	movw	r22, r24
     f88:	81 eb       	ldi	r24, 0xB1	; 177
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
     f90:	8c 01       	movw	r16, r24
                                        goto SENDTCP;
     f92:	28 c0       	rjmp	.+80     	; 0xfe4 <main+0x1ea>
                                }
                                cmd=analyse_get_url((char *)&(buf[dat_p+5]));
     f94:	c8 01       	movw	r24, r16
     f96:	8a 54       	subi	r24, 0x4A	; 74
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <analyse_get_url>
                                // for possible status codes see:
                                // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                                if (cmd==-1){
     f9e:	8f 3f       	cpi	r24, 0xFF	; 255
     fa0:	51 f4       	brne	.+20     	; 0xfb6 <main+0x1bc>
                                        plen=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
     fa2:	44 e5       	ldi	r20, 0x54	; 84
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	81 eb       	ldi	r24, 0xB1	; 177
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 ed 05 	call	0xbda	; 0xbda <fill_tcp_data_p>
     fb2:	8c 01       	movw	r16, r24
                                        goto SENDTCP;
     fb4:	17 c0       	rjmp	.+46     	; 0xfe4 <main+0x1ea>
                                }
                                if (cmd==1){
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	11 f4       	brne	.+4      	; 0xfbe <main+0x1c4>
                                        SWITCH1_PORT|= (1<<SWITCH1);// transistor on
     fba:	af 9a       	sbi	0x15, 7	; 21
     fbc:	0c c0       	rjmp	.+24     	; 0xfd6 <main+0x1dc>
                                }
                                if (cmd==0){
     fbe:	81 11       	cpse	r24, r1
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <main+0x1cc>
                                        SWITCH1_PORT &= ~(1<<SWITCH1);// transistor off
     fc2:	af 98       	cbi	0x15, 7	; 21
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <main+0x1dc>
                                }
                                if (cmd==-3){
     fc6:	8d 3f       	cpi	r24, 0xFD	; 253
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <main+0x1dc>
                                        // redirect to add a trailing slash
                                        plen=moved_perm(buf);
     fca:	81 eb       	ldi	r24, 0xB1	; 177
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 98 06 	call	0xd30	; 0xd30 <moved_perm>
     fd2:	8c 01       	movw	r16, r24
                                        goto SENDTCP;
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <main+0x1ea>
                                }
                                // if (cmd==-2) or any other value
                                // just display the status:
                                plen=print_webpage(buf,(SWITCH1_PORT & (1<<SWITCH1)));
     fd6:	65 b3       	in	r22, 0x15	; 21
     fd8:	60 78       	andi	r22, 0x80	; 128
     fda:	81 eb       	ldi	r24, 0xB1	; 177
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 bc 06 	call	0xd78	; 0xd78 <print_webpage>
     fe2:	8c 01       	movw	r16, r24
                                //
SENDTCP:
                                make_tcp_ack_from_any(buf); // send ack for http get
     fe4:	81 eb       	ldi	r24, 0xB1	; 177
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 16 06 	call	0xc2c	; 0xc2c <make_tcp_ack_from_any>
                                make_tcp_ack_with_data(buf,plen); // send data
     fec:	b8 01       	movw	r22, r16
     fee:	81 eb       	ldi	r24, 0xB1	; 177
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 48 06 	call	0xc90	; 0xc90 <make_tcp_ack_with_data>
                                continue;
     ff6:	44 cf       	rjmp	.-376    	; 0xe80 <main+0x86>

                }
                // tcp port www end
                //
                // udp start, we listen on udp port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
     ff8:	81 31       	cpi	r24, 0x11	; 17
     ffa:	09 f0       	breq	.+2      	; 0xffe <main+0x204>
     ffc:	41 cf       	rjmp	.-382    	; 0xe80 <main+0x86>
     ffe:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <buf+0x24>
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	09 f0       	breq	.+2      	; 0x1008 <main+0x20e>
    1006:	3c cf       	rjmp	.-392    	; 0xe80 <main+0x86>
    1008:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <buf+0x25>
    100c:	80 3b       	cpi	r24, 0xB0	; 176
    100e:	09 f0       	breq	.+2      	; 0x1012 <main+0x218>
    1010:	37 cf       	rjmp	.-402    	; 0xe80 <main+0x86>
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
                        // you must sent a string starting with v
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
    1012:	8b ed       	ldi	r24, 0xDB	; 219
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 6d 06 	call	0xcda	; 0xcda <verify_password>
    101a:	81 11       	cpse	r24, r1
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <main+0x246>
    101e:	63 c0       	rjmp	.+198    	; 0x10e6 <main+0x2ec>
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
                                        cmd_pos++;
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	98 0f       	add	r25, r24
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
    1024:	e9 2f       	mov	r30, r25
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ef 54       	subi	r30, 0x4F	; 79
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	32 a5       	ldd	r19, Z+42	; 0x2a
    102e:	3c 32       	cpi	r19, 0x2C	; 44
    1030:	29 f0       	breq	.+10     	; 0x103c <main+0x242>
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
                                        cmd_pos++;
    1032:	89 2f       	mov	r24, r25
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
    1034:	28 13       	cpse	r18, r24
    1036:	f4 cf       	rjmp	.-24     	; 0x1020 <main+0x226>
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <main+0x25a>
                                        cmd_pos++;
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
    103a:	80 e0       	ldi	r24, 0x00	; 0
                                                cmd_pos++; // put on start of cmd
    103c:	8e 5f       	subi	r24, 0xFE	; 254
                                                break;
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <main+0x25a>
                }
                // tcp port www end
                //
                // udp start, we listen on udp port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
    1040:	20 91 d8 00 	lds	r18, 0x00D8	; 0x8000d8 <buf+0x27>
    1044:	28 50       	subi	r18, 0x08	; 8
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
    1046:	a9 f0       	breq	.+42     	; 0x1072 <main+0x278>
                                        cmd_pos++;
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
    1048:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <buf+0x2b>
    104c:	8c 32       	cpi	r24, 0x2C	; 44
    104e:	a9 f3       	breq	.-22     	; 0x103a <main+0x240>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	f0 cf       	rjmp	.-32     	; 0x1034 <main+0x23a>
                                        }
                                }
                                // a command is one char and a value. At
                                // least 3 characters long. It has an '=' on
                                // position 2:
                                if (cmd_pos<2 || cmd_pos>payloadlen-3 || buf[UDP_DATA_P+cmd_pos+1]!='='){
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	68 f0       	brcs	.+26     	; 0x1072 <main+0x278>
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	23 50       	subi	r18, 0x03	; 3
    105e:	31 09       	sbc	r19, r1
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	34 f0       	brlt	.+12     	; 0x1072 <main+0x278>
    1066:	fc 01       	movw	r30, r24
    1068:	ef 54       	subi	r30, 0x4F	; 79
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	23 a5       	ldd	r18, Z+43	; 0x2b
    106e:	2d 33       	cpi	r18, 0x3D	; 61
    1070:	49 f0       	breq	.+18     	; 0x1084 <main+0x28a>
                                        strcpy(str,"e=no_cmd");
    1072:	89 e0       	ldi	r24, 0x09	; 9
    1074:	eb e7       	ldi	r30, 0x7B	; 123
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	d6 01       	movw	r26, r12
    107a:	01 90       	ld	r0, Z+
    107c:	0d 92       	st	X+, r0
    107e:	8a 95       	dec	r24
    1080:	e1 f7       	brne	.-8      	; 0x107a <main+0x280>
                                        goto ANSWER;
    1082:	39 c0       	rjmp	.+114    	; 0x10f6 <main+0x2fc>
                                }
                                // supported commands are
                                // t=1 t=0 t=?
                                if (buf[UDP_DATA_P+cmd_pos]=='t'){
    1084:	fc 01       	movw	r30, r24
    1086:	ef 54       	subi	r30, 0x4F	; 79
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	22 a5       	ldd	r18, Z+42	; 0x2a
    108c:	24 37       	cpi	r18, 0x74	; 116
    108e:	11 f5       	brne	.+68     	; 0x10d4 <main+0x2da>
                                        cmdval=buf[UDP_DATA_P+cmd_pos+2];
    1090:	fc 01       	movw	r30, r24
    1092:	ef 54       	subi	r30, 0x4F	; 79
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	84 a5       	ldd	r24, Z+44	; 0x2c
                                        if(cmdval=='1'){
    1098:	81 33       	cpi	r24, 0x31	; 49
    109a:	31 f4       	brne	.+12     	; 0x10a8 <main+0x2ae>
                                                SWITCH1_PORT |= (1<<SWITCH1);// transistor on
    109c:	af 9a       	sbi	0x15, 7	; 21
                                                strcpy(str,"t=1");
    109e:	ba 82       	std	Y+2, r11	; 0x02
    10a0:	a9 82       	std	Y+1, r10	; 0x01
    10a2:	5c 82       	std	Y+4, r5	; 0x04
    10a4:	4b 82       	std	Y+3, r4	; 0x03
                                                goto ANSWER;
    10a6:	27 c0       	rjmp	.+78     	; 0x10f6 <main+0x2fc>
                                        }else if(cmdval=='0'){
    10a8:	80 33       	cpi	r24, 0x30	; 48
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <main+0x2be>
                                                SWITCH1_PORT &= ~(1<<SWITCH1);// transistor off
    10ac:	af 98       	cbi	0x15, 7	; 21
                                                strcpy(str,"t=0");
    10ae:	ba 82       	std	Y+2, r11	; 0x02
    10b0:	a9 82       	std	Y+1, r10	; 0x01
    10b2:	9c 82       	std	Y+4, r9	; 0x04
    10b4:	8b 82       	std	Y+3, r8	; 0x03
                                                goto ANSWER;
    10b6:	1f c0       	rjmp	.+62     	; 0x10f6 <main+0x2fc>
                                        }else if(cmdval=='?'){
    10b8:	8f 33       	cpi	r24, 0x3F	; 63
    10ba:	61 f4       	brne	.+24     	; 0x10d4 <main+0x2da>
                                                if (SWITCH1_PORT & (1<<SWITCH1)){
    10bc:	af 9b       	sbis	0x15, 7	; 21
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <main+0x2d0>
                                                        strcpy(str,"t=1");
    10c0:	ba 82       	std	Y+2, r11	; 0x02
    10c2:	a9 82       	std	Y+1, r10	; 0x01
    10c4:	5c 82       	std	Y+4, r5	; 0x04
    10c6:	4b 82       	std	Y+3, r4	; 0x03
                                                        goto ANSWER;
    10c8:	16 c0       	rjmp	.+44     	; 0x10f6 <main+0x2fc>
                                                }
                                                strcpy(str,"t=0");
    10ca:	ba 82       	std	Y+2, r11	; 0x02
    10cc:	a9 82       	std	Y+1, r10	; 0x01
    10ce:	9c 82       	std	Y+4, r9	; 0x04
    10d0:	8b 82       	std	Y+3, r8	; 0x03
                                                goto ANSWER;
    10d2:	11 c0       	rjmp	.+34     	; 0x10f6 <main+0x2fc>
                                        }
                                }
                                strcpy(str,"e=no_such_cmd");
    10d4:	8e e0       	ldi	r24, 0x0E	; 14
    10d6:	e4 e8       	ldi	r30, 0x84	; 132
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	d6 01       	movw	r26, r12
    10dc:	01 90       	ld	r0, Z+
    10de:	0d 92       	st	X+, r0
    10e0:	8a 95       	dec	r24
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <main+0x2e2>
                                goto ANSWER;
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <main+0x2fc>
                        }
                        strcpy(str,"e=invalid_pw");
    10e6:	8d e0       	ldi	r24, 0x0D	; 13
    10e8:	e2 e9       	ldi	r30, 0x92	; 146
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	d6 01       	movw	r26, r12
    10ee:	01 90       	ld	r0, Z+
    10f0:	0d 92       	st	X+, r0
    10f2:	8a 95       	dec	r24
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <main+0x2f4>
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),MYUDPPORT);
    10f6:	f6 01       	movw	r30, r12
    10f8:	01 90       	ld	r0, Z+
    10fa:	00 20       	and	r0, r0
    10fc:	e9 f7       	brne	.-6      	; 0x10f8 <main+0x2fe>
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	af 01       	movw	r20, r30
    1102:	4c 19       	sub	r20, r12
    1104:	5d 09       	sbc	r21, r13
    1106:	20 eb       	ldi	r18, 0xB0	; 176
    1108:	34 e0       	ldi	r19, 0x04	; 4
    110a:	b6 01       	movw	r22, r12
    110c:	81 eb       	ldi	r24, 0xB1	; 177
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 44 05 	call	0xa88	; 0xa88 <make_udp_reply_from_request>
    1114:	b5 ce       	rjmp	.-662    	; 0xe80 <main+0x86>

00001116 <spi_init>:
#include "spi.h"

void spi_init(void)
{
    //DDRB  |= 1<<PB5 | 1<<PB7; // mosi, sck output
	DDRB  |= 1<<SPI_MOSI | 1<<SPI_SCK; // mosi, sck output
    1116:	87 b3       	in	r24, 0x17	; 23
    1118:	80 6a       	ori	r24, 0xA0	; 160
    111a:	87 bb       	out	0x17, r24	; 23
	cbi(SPI_DDR,SPI_MISO); // MISO is input
    111c:	be 98       	cbi	0x17, 6	; 23
        
           //    CSPASSIVE; ###############################
    cbi(SPI_PORT,SPI_MOSI); // MOSI low
    111e:	c5 98       	cbi	0x18, 5	; 24
    cbi(SPI_PORT,SPI_SCK); // SCK low
    1120:	c7 98       	cbi	0x18, 7	; 24
    //CPHA = 0;
  //  SPCR &= 0xF3;

	// initialize SPI interface
	// master mode and Fosc/2 clock:
    SPCR = (1<<SPE)|(1<<MSTR);  
    1122:	80 e5       	ldi	r24, 0x50	; 80
    1124:	8d b9       	out	0x0d, r24	; 13
    SPCR &= 0xFC; // SPR1=0, SPR0 = 0
    1126:	8d b1       	in	r24, 0x0d	; 13
    1128:	8c 7f       	andi	r24, 0xFC	; 252
    112a:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1<<SPI2X); 
    112c:	70 9a       	sbi	0x0e, 0	; 14
    112e:	08 95       	ret

00001130 <delay_ms>:
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	41 f0       	breq	.+16     	; 0x1144 <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1134:	ef e7       	ldi	r30, 0x7F	; 127
    1136:	f7 e0       	ldi	r31, 0x07	; 7
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <delay_ms+0x8>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <delay_ms+0xe>
    113e:	00 00       	nop
                _delay_ms(0.96);
                ms--;
    1140:	01 97       	sbiw	r24, 0x01	; 1
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
    1142:	c1 f7       	brne	.-16     	; 0x1134 <delay_ms+0x4>
    1144:	08 95       	ret

00001146 <strncmp>:
    1146:	fb 01       	movw	r30, r22
    1148:	dc 01       	movw	r26, r24
    114a:	41 50       	subi	r20, 0x01	; 1
    114c:	50 40       	sbci	r21, 0x00	; 0
    114e:	30 f0       	brcs	.+12     	; 0x115c <strncmp+0x16>
    1150:	8d 91       	ld	r24, X+
    1152:	01 90       	ld	r0, Z+
    1154:	80 19       	sub	r24, r0
    1156:	19 f4       	brne	.+6      	; 0x115e <strncmp+0x18>
    1158:	00 20       	and	r0, r0
    115a:	b9 f7       	brne	.-18     	; 0x114a <strncmp+0x4>
    115c:	88 1b       	sub	r24, r24
    115e:	99 0b       	sbc	r25, r25
    1160:	08 95       	ret

00001162 <_exit>:
    1162:	f8 94       	cli

00001164 <__stop_program>:
    1164:	ff cf       	rjmp	.-2      	; 0x1164 <__stop_program>
